/* eslint-disable */

/**
 * Generated by Verge3D Puzzles v.4.3.0
 * Tue, 20 Jun 2023 12:38:06 GMT
 * Prefer not editing this file as your changes may get overridden once Puzzles are saved.
 * Check out https://www.soft8soft.com/docs/manual/en/introduction/Using-JavaScript.html
 * for the information on how to add your own JavaScript to Verge3D apps.
 */
function createPL(v3d = window.v3d) {
  // global variables/constants used by puzzles' functions

  var LIST_NONE = "<none>";

  var _pGlob = {};

  _pGlob.objCache = {};
  _pGlob.fadeAnnotations = true;
  _pGlob.pickedObject = "";
  _pGlob.hoveredObject = "";
  _pGlob.mediaElements = {};
  _pGlob.loadedFile = "";
  _pGlob.states = [];
  _pGlob.percentage = 0;
  _pGlob.openedFile = "";
  _pGlob.openedFileMeta = {};
  _pGlob.xrSessionAcquired = false;
  _pGlob.xrSessionCallbacks = [];
  _pGlob.screenCoords = new v3d.Vector2();
  _pGlob.intervalTimers = {};
  _pGlob.customEvents = new v3d.EventDispatcher();
  _pGlob.eventListeners = [];

  _pGlob.AXIS_X = new v3d.Vector3(1, 0, 0);
  _pGlob.AXIS_Y = new v3d.Vector3(0, 1, 0);
  _pGlob.AXIS_Z = new v3d.Vector3(0, 0, 1);
  _pGlob.MIN_DRAG_SCALE = 10e-4;
  _pGlob.SET_OBJ_ROT_EPS = 1e-8;

  _pGlob.vec2Tmp = new v3d.Vector2();
  _pGlob.vec2Tmp2 = new v3d.Vector2();
  _pGlob.vec3Tmp = new v3d.Vector3();
  _pGlob.vec3Tmp2 = new v3d.Vector3();
  _pGlob.vec3Tmp3 = new v3d.Vector3();
  _pGlob.vec3Tmp4 = new v3d.Vector3();
  _pGlob.eulerTmp = new v3d.Euler();
  _pGlob.eulerTmp2 = new v3d.Euler();
  _pGlob.quatTmp = new v3d.Quaternion();
  _pGlob.quatTmp2 = new v3d.Quaternion();
  _pGlob.colorTmp = new v3d.Color();
  _pGlob.mat4Tmp = new v3d.Matrix4();
  _pGlob.planeTmp = new v3d.Plane();
  _pGlob.raycasterTmp = new v3d.Raycaster(); // always check visibility

  var PL = {};
  // backward compatibility
  if (v3d[Symbol.toStringTag] !== "Module") {
    v3d.PL = v3d.puzzles = PL;
  }

  PL.procedures = PL.procedures || {};

  PL.execInitPuzzles = function (options) {
    // always null, should not be available in "init" puzzles
    var appInstance = null;
    // app is more conventional than appInstance (used in exec script and app templates)
    var app = null;

    var _initGlob = {};
    _initGlob.percentage = 0;
    _initGlob.output = {
      initOptions: {
        fadeAnnotations: true,
        useBkgTransp: false,
        preserveDrawBuf: false,
        useCompAssets: false,
        useFullscreen: true,
        useCustomPreloader: false,
        preloaderStartCb: function () {},
        preloaderProgressCb: function () {},
        preloaderEndCb: function () {},
      },
    };

    // provide the container's id to puzzles that need access to the container
    _initGlob.container =
      options !== undefined && "container" in options ? options.container : "";

    var _fonts, i;

    // dictGet puzzle
    function dictGet(dict, key) {
      if (dict && typeof dict == "object") return dict[key];
    }

    // loadFile puzzle
    _pGlob.loadedFiles = {};

    function loadFile(url, callback, caching) {
      const files = _pGlob.loadedFiles;

      if (!url || typeof url != "string") {
        _pGlob.loadedFile = "";
        callback();
      } else if (caching && url in files) {
        _pGlob.loadedFile = files[url];
        callback();
      } else {
        const req = new XMLHttpRequest();

        req.onreadystatechange = function () {
          if (req.readyState == 4 && req.status == 200) {
            if (
              req
                .getResponseHeader("Content-Type")
                .indexOf("application/json") > -1
            )
              _pGlob.loadedFile = JSON.parse(req.responseText);
            else _pGlob.loadedFile = req.responseText;

            if (caching) files[url] = _pGlob.loadedFile;

            callback();
          }
        };
        req.open("GET", url, true);
        req.send();
      }
    }

    window.devicePixelRatio;

    // initSettings puzzle
    _initGlob.output.initOptions.fadeAnnotations = true;
    _initGlob.output.initOptions.useBkgTransp = false;
    _initGlob.output.initOptions.preserveDrawBuf = true;
    _initGlob.output.initOptions.useCompAssets = true;
    _initGlob.output.initOptions.useFullscreen = true;

    loadFile(
      "./konfigurator/json/fonts.json",
      function () {
        _fonts = _pGlob.loadedFile;
        var i_list = typeof _fonts == "object" ? Object.keys(_fonts) : [];
        for (var i_index in i_list) {
          let i = i_list[i_index];
          var VARS = Object.defineProperties(
            {},
            {
              _fonts: {
                get: function () {
                  return _fonts;
                },
                set: function (val) {
                  _fonts = val;
                },
              },
              i: {
                get: function () {
                  return i;
                },
                set: function (val) {
                  i = val;
                },
              },
            }
          );

          loadFile(dictGet(_fonts, i), function () {}, true);
        }
      },
      true
    );

    return _initGlob.output;
  };

  PL.init = function (appInstance, initOptions) {
    // app is more conventional than appInstance (used in exec script and app templates)
    var app = appInstance;

    initOptions = initOptions || {};

    if ("fadeAnnotations" in initOptions) {
      _pGlob.fadeAnnotations = initOptions.fadeAnnotations;
    }

    this.procedures["configure_plates_names"] = configure_plates_names;
    this.procedures["configure_basic_plates"] = configure_basic_plates;
    this.procedures["configure_addon_plates"] = configure_addon_plates;
    this.procedures["configure_addon_module"] = configure_addon_module;
    this.procedures["chenge_handle_color"] = chenge_handle_color;
    this.procedures["cofigure_skeleton"] = cofigure_skeleton;
    this.procedures["configure_mounting"] = configure_mounting;
    this.procedures["light_on"] = light_on;
    this.procedures["configure_top_lable_name"] = configure_top_lable_name;
    this.procedures["configure_top_lable"] = configure_top_lable;
    this.procedures["up_camera"] = up_camera;
    this.procedures["cam_position"] = cam_position;
    this.procedures["clone_group"] = clone_group;
    this.procedures["init"] = init;
    this.procedures["set_transparent"] = set_transparent;
    this.procedures["scene"] = scene;
    this.procedures["make_screenshot"] = make_screenshot;
    this.procedures["zoom_in"] = zoom_in;
    this.procedures["zoom_to_fit_all"] = zoom_to_fit_all;
    this.procedures["add_ruler"] = add_ruler;
    this.procedures["remove_ruler"] = remove_ruler;
    this.procedures["zoom_out"] = zoom_out;
    this.procedures["set_ruler_visibility"] = set_ruler_visibility;
    this.procedures["show_ruler"] = show_ruler2;
    this.procedures["hide_ruler"] = hide_ruler;
    this.procedures["calc_dimensions"] = calc_dimensions;
    this.procedures["pass_names_to_arr"] = pass_names_to_arr;

    var PROC = {
      configure_plates_names: configure_plates_names,
      configure_basic_plates: configure_basic_plates,
      configure_addon_plates: configure_addon_plates,
      configure_addon_module: configure_addon_module,
      chenge_handle_color: chenge_handle_color,
      cofigure_skeleton: cofigure_skeleton,
      configure_mounting: configure_mounting,
      light_on: light_on,
      configure_top_lable_name: configure_top_lable_name,
      configure_top_lable: configure_top_lable,
      up_camera: up_camera,
      cam_position: cam_position,
      clone_group: clone_group,
      init: init,
      set_transparent: set_transparent,
      scene: scene,
      make_screenshot: make_screenshot,
      zoom_in: zoom_in,
      zoom_to_fit_all: zoom_to_fit_all,
      add_ruler: add_ruler,
      remove_ruler: remove_ruler,
      zoom_out: zoom_out,
      set_ruler_visibility: set_ruler_visibility,
      show_ruler: show_ruler2,
      hide_ruler: hide_ruler,
      calc_dimensions: calc_dimensions,
      pass_names_to_arr: pass_names_to_arr,
    };

    var VARS = Object.defineProperties(
      {},
      {
        _name: {
          get: function () {
            return _name;
          },
          set: function (val) {
            _name = val;
          },
        },
        _plates_amount: {
          get: function () {
            return _plates_amount;
          },
          set: function (val) {
            _plates_amount = val;
          },
        },
        x_position: {
          get: function () {
            return x_position;
          },
          set: function (val) {
            x_position = val;
          },
        },
        _plates_basic_arr: {
          get: function () {
            return _plates_basic_arr;
          },
          set: function (val) {
            _plates_basic_arr = val;
          },
        },
        _place_type: {
          get: function () {
            return _place_type;
          },
          set: function (val) {
            _place_type = val;
          },
        },
        _G_step_hor: {
          get: function () {
            return _G_step_hor;
          },
          set: function (val) {
            _G_step_hor = val;
          },
        },
        mailbox_obj: {
          get: function () {
            return mailbox_obj;
          },
          set: function (val) {
            mailbox_obj = val;
          },
        },
        _top_lable_x_pos: {
          get: function () {
            return _top_lable_x_pos;
          },
          set: function (val) {
            _top_lable_x_pos = val;
          },
        },
        _cam_update_requests: {
          get: function () {
            return _cam_update_requests;
          },
          set: function (val) {
            _cam_update_requests = val;
          },
        },
        columns: {
          get: function () {
            return columns;
          },
          set: function (val) {
            columns = val;
          },
        },
        row: {
          get: function () {
            return row;
          },
          set: function (val) {
            row = val;
          },
        },
        col: {
          get: function () {
            return col;
          },
          set: function (val) {
            col = val;
          },
        },
        parent: {
          get: function () {
            return parent2;
          },
          set: function (val) {
            parent2 = val;
          },
        },
        template: {
          get: function () {
            return template;
          },
          set: function (val) {
            template = val;
          },
        },
        where: {
          get: function () {
            return where;
          },
          set: function (val) {
            where = val;
          },
        },
        num: {
          get: function () {
            return num;
          },
          set: function (val) {
            num = val;
          },
        },
        promise: {
          get: function () {
            return promise;
          },
          set: function (val) {
            promise = val;
          },
        },
        ruler_object_top: {
          get: function () {
            return ruler_object_top;
          },
          set: function (val) {
            ruler_object_top = val;
          },
        },
        callback: {
          get: function () {
            return callback;
          },
          set: function (val) {
            callback = val;
          },
        },
        visible: {
          get: function () {
            return visible;
          },
          set: function (val) {
            visible = val;
          },
        },
        show_ruler: {
          get: function () {
            return show_ruler;
          },
          set: function (val) {
            show_ruler = val;
          },
        },
        _name_obj: {
          get: function () {
            return _name_obj;
          },
          set: function (val) {
            _name_obj = val;
          },
        },
        _plates_template: {
          get: function () {
            return _plates_template;
          },
          set: function (val) {
            _plates_template = val;
          },
        },
        z_position: {
          get: function () {
            return z_position;
          },
          set: function (val) {
            z_position = val;
          },
        },
        _plates_basic_template: {
          get: function () {
            return _plates_basic_template;
          },
          set: function (val) {
            _plates_basic_template = val;
          },
        },
        _place_key: {
          get: function () {
            return _place_key;
          },
          set: function (val) {
            _place_key = val;
          },
        },
        _G_step_vert: {
          get: function () {
            return _G_step_vert;
          },
          set: function (val) {
            _G_step_vert = val;
          },
        },
        _leg_mouting_offset: {
          get: function () {
            return _leg_mouting_offset;
          },
          set: function (val) {
            _leg_mouting_offset = val;
          },
        },
        _STATE_skeleton: {
          get: function () {
            return _STATE_skeleton;
          },
          set: function (val) {
            _STATE_skeleton = val;
          },
        },
        _top_lable_y_pos: {
          get: function () {
            return _top_lable_y_pos;
          },
          set: function (val) {
            _top_lable_y_pos = val;
          },
        },
        _cam_update_counter: {
          get: function () {
            return _cam_update_counter;
          },
          set: function (val) {
            _cam_update_counter = val;
          },
        },
        j: {
          get: function () {
            return j;
          },
          set: function (val) {
            j = val;
          },
        },
        _zoom_step: {
          get: function () {
            return _zoom_step;
          },
          set: function (val) {
            _zoom_step = val;
          },
        },
        ruler_object_left: {
          get: function () {
            return ruler_object_left;
          },
          set: function (val) {
            ruler_object_left = val;
          },
        },
        _name_basic: {
          get: function () {
            return _name_basic;
          },
          set: function (val) {
            _name_basic = val;
          },
        },
        _plates_x_position: {
          get: function () {
            return _plates_x_position;
          },
          set: function (val) {
            _plates_x_position = val;
          },
        },
        i: {
          get: function () {
            return i;
          },
          set: function (val) {
            i = val;
          },
        },
        _plates_basic_group: {
          get: function () {
            return _plates_basic_group;
          },
          set: function (val) {
            _plates_basic_group = val;
          },
        },
        _place_configuration: {
          get: function () {
            return _place_configuration;
          },
          set: function (val) {
            _place_configuration = val;
          },
        },
        _basic_modules_arr: {
          get: function () {
            return _basic_modules_arr;
          },
          set: function (val) {
            _basic_modules_arr = val;
          },
        },
        _top_lable_z_pos: {
          get: function () {
            return _top_lable_z_pos;
          },
          set: function (val) {
            _top_lable_z_pos = val;
          },
        },
        _anim_running: {
          get: function () {
            return _anim_running;
          },
          set: function (val) {
            _anim_running = val;
          },
        },
        _JSON_placement_rules: {
          get: function () {
            return _JSON_placement_rules;
          },
          set: function (val) {
            _JSON_placement_rules = val;
          },
        },
        ruler_object_bottom: {
          get: function () {
            return ruler_object_bottom;
          },
          set: function (val) {
            ruler_object_bottom = val;
          },
        },
        _name_obj_basic: {
          get: function () {
            return _name_obj_basic;
          },
          set: function (val) {
            _name_obj_basic = val;
          },
        },
        _plates_z_position: {
          get: function () {
            return _plates_z_position;
          },
          set: function (val) {
            _plates_z_position = val;
          },
        },
        _place_direction: {
          get: function () {
            return _place_direction;
          },
          set: function (val) {
            _place_direction = val;
          },
        },
        placeholder_modules_arr: {
          get: function () {
            return placeholder_modules_arr;
          },
          set: function (val) {
            placeholder_modules_arr = val;
          },
        },
        _STATE_addon_module: {
          get: function () {
            return _STATE_addon_module;
          },
          set: function (val) {
            _STATE_addon_module = val;
          },
        },
        _STATE_top_lable: {
          get: function () {
            return _STATE_top_lable;
          },
          set: function (val) {
            _STATE_top_lable = val;
          },
        },
        _top_lable_xyz_scale: {
          get: function () {
            return _top_lable_xyz_scale;
          },
          set: function (val) {
            _top_lable_xyz_scale = val;
          },
        },
        _cam_shift: {
          get: function () {
            return _cam_shift;
          },
          set: function (val) {
            _cam_shift = val;
          },
        },
        _basic_module_id: {
          get: function () {
            return _basic_module_id;
          },
          set: function (val) {
            _basic_module_id = val;
          },
        },
        _temp_text: {
          get: function () {
            return _temp_text;
          },
          set: function (val) {
            _temp_text = val;
          },
        },
        _plates_temp: {
          get: function () {
            return _plates_temp;
          },
          set: function (val) {
            _plates_temp = val;
          },
        },
        _STATE_scene: {
          get: function () {
            return _STATE_scene;
          },
          set: function (val) {
            _STATE_scene = val;
          },
        },
        _STATE_basic_module: {
          get: function () {
            return _STATE_basic_module;
          },
          set: function (val) {
            _STATE_basic_module = val;
          },
        },
        calculated_width: {
          get: function () {
            return calculated_width;
          },
          set: function (val) {
            calculated_width = val;
          },
        },
        ruler_points: {
          get: function () {
            return ruler_points;
          },
          set: function (val) {
            ruler_points = val;
          },
        },
        _plates_arr: {
          get: function () {
            return _plates_arr;
          },
          set: function (val) {
            _plates_arr = val;
          },
        },
        _STATE_addon_plates: {
          get: function () {
            return _STATE_addon_plates;
          },
          set: function (val) {
            _STATE_addon_plates = val;
          },
        },
        _place_shift: {
          get: function () {
            return _place_shift;
          },
          set: function (val) {
            _place_shift = val;
          },
        },
        _plaсe_shift_z: {
          get: function () {
            return _pla_D1_81e_shift_z;
          },
          set: function (val) {
            _pla_D1_81e_shift_z = val;
          },
        },
        _character_number: {
          get: function () {
            return _character_number;
          },
          set: function (val) {
            _character_number = val;
          },
        },
        _JSON_font_path: {
          get: function () {
            return _JSON_font_path;
          },
          set: function (val) {
            _JSON_font_path = val;
          },
        },
        calculated_height: {
          get: function () {
            return calculated_height;
          },
          set: function (val) {
            calculated_height = val;
          },
        },
        LEG_WIDTH: {
          get: function () {
            return LEG_WIDTH;
          },
          set: function (val) {
            LEG_WIDTH = val;
          },
        },
        _plates_height_limit: {
          get: function () {
            return _plates_height_limit;
          },
          set: function (val) {
            _plates_height_limit = val;
          },
        },
        _STATE_basic_plates: {
          get: function () {
            return _STATE_basic_plates;
          },
          set: function (val) {
            _STATE_basic_plates = val;
          },
        },
        _top_label_single_char: {
          get: function () {
            return _top_label_single_char;
          },
          set: function (val) {
            _top_label_single_char = val;
          },
        },
        _cam_module_target_position_x: {
          get: function () {
            return _cam_module_target_position_x;
          },
          set: function (val) {
            _cam_module_target_position_x = val;
          },
        },
        calculated_depth: {
          get: function () {
            return calculated_depth;
          },
          set: function (val) {
            calculated_depth = val;
          },
        },
        DISTANCE_TO_FLOOR: {
          get: function () {
            return DISTANCE_TO_FLOOR;
          },
          set: function (val) {
            DISTANCE_TO_FLOOR = val;
          },
        },
        _plates_z_step: {
          get: function () {
            return _plates_z_step;
          },
          set: function (val) {
            _plates_z_step = val;
          },
        },
        _3_15_exeption: {
          get: function () {
            return _3_15_exeption;
          },
          set: function (val) {
            _3_15_exeption = val;
          },
        },
        _cam_module_target_position_z: {
          get: function () {
            return _cam_module_target_position_z;
          },
          set: function (val) {
            _cam_module_target_position_z = val;
          },
        },
        ONE_BOX_WIDTH: {
          get: function () {
            return ONE_BOX_WIDTH;
          },
          set: function (val) {
            ONE_BOX_WIDTH = val;
          },
        },
        _plates_x_step: {
          get: function () {
            return _plates_x_step;
          },
          set: function (val) {
            _plates_x_step = val;
          },
        },
        ONE_BOX_HEIGHT: {
          get: function () {
            return ONE_BOX_HEIGHT;
          },
          set: function (val) {
            ONE_BOX_HEIGHT = val;
          },
        },
        _plates_shift: {
          get: function () {
            return _plates_shift;
          },
          set: function (val) {
            _plates_shift = val;
          },
        },
        _cam_position_x: {
          get: function () {
            return _cam_position_x;
          },
          set: function (val) {
            _cam_position_x = val;
          },
        },
        TOP_LABLE_HEIGHT: {
          get: function () {
            return TOP_LABLE_HEIGHT;
          },
          set: function (val) {
            TOP_LABLE_HEIGHT = val;
          },
        },
        _plates_max: {
          get: function () {
            return _plates_max;
          },
          set: function (val) {
            _plates_max = val;
          },
        },
        _top_label_text_area: {
          get: function () {
            return _top_label_text_area;
          },
          set: function (val) {
            _top_label_text_area = val;
          },
        },
        _cam_position_z: {
          get: function () {
            return _cam_position_z;
          },
          set: function (val) {
            _cam_position_z = val;
          },
        },
        _plates_group: {
          get: function () {
            return _plates_group;
          },
          set: function (val) {
            _plates_group = val;
          },
        },
        _cam_state: {
          get: function () {
            return _cam_state;
          },
          set: function (val) {
            _cam_state = val;
          },
        },
        _plates_row_limit: {
          get: function () {
            return _plates_row_limit;
          },
          set: function (val) {
            _plates_row_limit = val;
          },
        },
        _basic_temp_emptyes: {
          get: function () {
            return _basic_temp_emptyes;
          },
          set: function (val) {
            _basic_temp_emptyes = val;
          },
        },
        _counter: {
          get: function () {
            return _counter;
          },
          set: function (val) {
            _counter = val;
          },
        },
        _temp_module: {
          get: function () {
            return _temp_module;
          },
          set: function (val) {
            _temp_module = val;
          },
        },
      }
    );

    var _name,
      _plates_amount,
      x_position,
      _plates_basic_arr,
      _place_type,
      _G_step_hor,
      mailbox_obj,
      _top_lable_x_pos,
      _cam_update_requests,
      columns,
      row,
      col,
      parent2,
      template,
      where,
      num,
      promise,
      ruler_object_top,
      callback,
      visible,
      show_ruler,
      _name_obj,
      _plates_template,
      z_position,
      _plates_basic_template,
      _place_key,
      _G_step_vert,
      _leg_mouting_offset,
      _STATE_skeleton,
      _top_lable_y_pos,
      _cam_update_counter,
      j,
      _zoom_step,
      ruler_object_left,
      ruler_points,
      _name_basic,
      _plates_x_position,
      i,
      _plates_basic_group,
      _place_configuration,
      _basic_modules_arr,
      _top_lable_z_pos,
      _anim_running,
      _JSON_placement_rules,
      ruler_object_bottom,
      LEG_WIDTH,
      _STATE_addon_plates,
      _name_obj_basic,
      _plates_z_position,
      _place_direction,
      placeholder_modules_arr,
      _STATE_addon_module,
      _STATE_top_lable,
      _top_lable_xyz_scale,
      _cam_shift,
      _basic_module_id,
      _temp_text,
      _plates_temp,
      _STATE_scene,
      _STATE_basic_module,
      calculated_width,
      DISTANCE_TO_FLOOR,
      _STATE_basic_plates,
      _plates_arr,
      _place_shift,
      _pla_D1_81e_shift_z,
      _character_number,
      _JSON_font_path,
      calculated_height,
      ONE_BOX_WIDTH,
      _plates_height_limit,
      _top_label_single_char,
      _cam_module_target_position_x,
      calculated_depth,
      ONE_BOX_HEIGHT,
      _plates_z_step,
      _3_15_exeption,
      _cam_module_target_position_z,
      TOP_LABLE_HEIGHT,
      _plates_x_step,
      _plates_shift,
      _cam_position_x,
      _plates_max,
      _top_label_text_area,
      _cam_position_z,
      _plates_group,
      _cam_state,
      _plates_row_limit,
      _basic_temp_emptyes,
      _counter,
      _temp_module;

    // dictGet puzzle
    function dictGet(dict, key) {
      if (dict && typeof dict == "object") return dict[key];
    }

    // utility function envoked by almost all V3D-specific puzzles
    // filter off some non-mesh types
    function notIgnoredObj(obj) {
      return (
        obj.type !== "AmbientLight" &&
        obj.name !== "" &&
        !(obj.isMesh && obj.isMaterialGeneratedMesh) &&
        !obj.isAuxClippingMesh
      );
    }

    // utility function envoked by almost all V3D-specific puzzles
    // find first occurence of the object by its name
    function getObjectByName(objName) {
      var objFound;
      var runTime = _pGlob !== undefined;
      objFound = runTime ? _pGlob.objCache[objName] : null;

      if (objFound && objFound.name === objName) return objFound;

      if (appInstance.scene) {
        appInstance.scene.traverse(function (obj) {
          if (!objFound && notIgnoredObj(obj) && obj.name == objName) {
            objFound = obj;
            if (runTime) {
              _pGlob.objCache[objName] = objFound;
            }
          }
        });
      }
      return objFound;
    }

    // utility function envoked by almost all V3D-specific puzzles
    // retrieve all objects on the scene
    function getAllObjectNames() {
      var objNameList = [];
      appInstance.scene.traverse(function (obj) {
        if (notIgnoredObj(obj)) objNameList.push(obj.name);
      });
      return objNameList;
    }

    // utility function envoked by almost all V3D-specific puzzles
    // retrieve all objects which belong to the group
    function getObjectNamesByGroupName(targetGroupName) {
      var objNameList = [];
      appInstance.scene.traverse(function (obj) {
        if (notIgnoredObj(obj)) {
          var groupNames = obj.groupNames;
          if (!groupNames) return;
          for (var i = 0; i < groupNames.length; i++) {
            var groupName = groupNames[i];
            if (groupName == targetGroupName) {
              objNameList.push(obj.name);
            }
          }
        }
      });
      return objNameList;
    }

    // utility function envoked by almost all V3D-specific puzzles
    // process object input, which can be either single obj or array of objects, or a group
    function retrieveObjectNames(objNames) {
      var acc = [];
      retrieveObjectNamesAcc(objNames, acc);
      return acc.filter(function (name) {
        return name;
      });
    }

    function retrieveObjectNamesAcc(currObjNames, acc) {
      if (typeof currObjNames == "string") {
        acc.push(currObjNames);
      } else if (Array.isArray(currObjNames) && currObjNames[0] == "GROUP") {
        var newObj = getObjectNamesByGroupName(currObjNames[1]);
        for (var i = 0; i < newObj.length; i++) acc.push(newObj[i]);
      } else if (
        Array.isArray(currObjNames) &&
        currObjNames[0] == "ALL_OBJECTS"
      ) {
        var newObj = getAllObjectNames();
        for (var i = 0; i < newObj.length; i++) acc.push(newObj[i]);
      } else if (Array.isArray(currObjNames)) {
        for (var i = 0; i < currObjNames.length; i++)
          retrieveObjectNamesAcc(currObjNames[i], acc);
      }
    }

    // updateTextObject puzzle
    function updateTextObj(objSelector, text) {
      var objNames = retrieveObjectNames(objSelector);

      for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i];
        if (!objName) continue;
        var obj = getObjectByName(objName);
        if (!obj || !obj.geometry || !obj.geometry.cloneWithText) continue;
        obj.geometry = obj.geometry.cloneWithText(String(text));
      }
    }

    // Describe this function...
    function configure_plates_names() {
      if (dictGet(_STATE_addon_plates, "type") == "engrave") {
        for (let i = 0; i <= 14; i++) {
          var VARS = Object.defineProperties(
            {},
            {
              _name: {
                get: function () {
                  return _name;
                },
                set: function (val) {
                  _name = val;
                },
              },
              _plates_amount: {
                get: function () {
                  return _plates_amount;
                },
                set: function (val) {
                  _plates_amount = val;
                },
              },
              x_position: {
                get: function () {
                  return x_position;
                },
                set: function (val) {
                  x_position = val;
                },
              },
              _plates_basic_arr: {
                get: function () {
                  return _plates_basic_arr;
                },
                set: function (val) {
                  _plates_basic_arr = val;
                },
              },
              _place_type: {
                get: function () {
                  return _place_type;
                },
                set: function (val) {
                  _place_type = val;
                },
              },
              _G_step_hor: {
                get: function () {
                  return _G_step_hor;
                },
                set: function (val) {
                  _G_step_hor = val;
                },
              },
              mailbox_obj: {
                get: function () {
                  return mailbox_obj;
                },
                set: function (val) {
                  mailbox_obj = val;
                },
              },
              _top_lable_x_pos: {
                get: function () {
                  return _top_lable_x_pos;
                },
                set: function (val) {
                  _top_lable_x_pos = val;
                },
              },
              _cam_update_requests: {
                get: function () {
                  return _cam_update_requests;
                },
                set: function (val) {
                  _cam_update_requests = val;
                },
              },
              columns: {
                get: function () {
                  return columns;
                },
                set: function (val) {
                  columns = val;
                },
              },
              row: {
                get: function () {
                  return row;
                },
                set: function (val) {
                  row = val;
                },
              },
              col: {
                get: function () {
                  return col;
                },
                set: function (val) {
                  col = val;
                },
              },
              parent: {
                get: function () {
                  return parent2;
                },
                set: function (val) {
                  parent2 = val;
                },
              },
              template: {
                get: function () {
                  return template;
                },
                set: function (val) {
                  template = val;
                },
              },
              where: {
                get: function () {
                  return where;
                },
                set: function (val) {
                  where = val;
                },
              },
              num: {
                get: function () {
                  return num;
                },
                set: function (val) {
                  num = val;
                },
              },
              promise: {
                get: function () {
                  return promise;
                },
                set: function (val) {
                  promise = val;
                },
              },
              ruler_object_top: {
                get: function () {
                  return ruler_object_top;
                },
                set: function (val) {
                  ruler_object_top = val;
                },
              },
              callback: {
                get: function () {
                  return callback;
                },
                set: function (val) {
                  callback = val;
                },
              },
              visible: {
                get: function () {
                  return visible;
                },
                set: function (val) {
                  visible = val;
                },
              },
              show_ruler: {
                get: function () {
                  return show_ruler;
                },
                set: function (val) {
                  show_ruler = val;
                },
              },
              _name_obj: {
                get: function () {
                  return _name_obj;
                },
                set: function (val) {
                  _name_obj = val;
                },
              },
              _plates_template: {
                get: function () {
                  return _plates_template;
                },
                set: function (val) {
                  _plates_template = val;
                },
              },
              z_position: {
                get: function () {
                  return z_position;
                },
                set: function (val) {
                  z_position = val;
                },
              },
              _plates_basic_template: {
                get: function () {
                  return _plates_basic_template;
                },
                set: function (val) {
                  _plates_basic_template = val;
                },
              },
              _place_key: {
                get: function () {
                  return _place_key;
                },
                set: function (val) {
                  _place_key = val;
                },
              },
              _G_step_vert: {
                get: function () {
                  return _G_step_vert;
                },
                set: function (val) {
                  _G_step_vert = val;
                },
              },
              _leg_mouting_offset: {
                get: function () {
                  return _leg_mouting_offset;
                },
                set: function (val) {
                  _leg_mouting_offset = val;
                },
              },
              _STATE_skeleton: {
                get: function () {
                  return _STATE_skeleton;
                },
                set: function (val) {
                  _STATE_skeleton = val;
                },
              },
              _top_lable_y_pos: {
                get: function () {
                  return _top_lable_y_pos;
                },
                set: function (val) {
                  _top_lable_y_pos = val;
                },
              },
              _cam_update_counter: {
                get: function () {
                  return _cam_update_counter;
                },
                set: function (val) {
                  _cam_update_counter = val;
                },
              },
              j: {
                get: function () {
                  return j;
                },
                set: function (val) {
                  j = val;
                },
              },
              _zoom_step: {
                get: function () {
                  return _zoom_step;
                },
                set: function (val) {
                  _zoom_step = val;
                },
              },
              ruler_object_left: {
                get: function () {
                  return ruler_object_left;
                },
                set: function (val) {
                  ruler_object_left = val;
                },
              },
              _name_basic: {
                get: function () {
                  return _name_basic;
                },
                set: function (val) {
                  _name_basic = val;
                },
              },
              _plates_x_position: {
                get: function () {
                  return _plates_x_position;
                },
                set: function (val) {
                  _plates_x_position = val;
                },
              },
              i: {
                get: function () {
                  return i;
                },
                set: function (val) {
                  i = val;
                },
              },
              _plates_basic_group: {
                get: function () {
                  return _plates_basic_group;
                },
                set: function (val) {
                  _plates_basic_group = val;
                },
              },
              _place_configuration: {
                get: function () {
                  return _place_configuration;
                },
                set: function (val) {
                  _place_configuration = val;
                },
              },
              _basic_modules_arr: {
                get: function () {
                  return _basic_modules_arr;
                },
                set: function (val) {
                  _basic_modules_arr = val;
                },
              },
              _top_lable_z_pos: {
                get: function () {
                  return _top_lable_z_pos;
                },
                set: function (val) {
                  _top_lable_z_pos = val;
                },
              },
              _anim_running: {
                get: function () {
                  return _anim_running;
                },
                set: function (val) {
                  _anim_running = val;
                },
              },
              _JSON_placement_rules: {
                get: function () {
                  return _JSON_placement_rules;
                },
                set: function (val) {
                  _JSON_placement_rules = val;
                },
              },
              ruler_object_bottom: {
                get: function () {
                  return ruler_object_bottom;
                },
                set: function (val) {
                  ruler_object_bottom = val;
                },
              },
              _name_obj_basic: {
                get: function () {
                  return _name_obj_basic;
                },
                set: function (val) {
                  _name_obj_basic = val;
                },
              },
              _plates_z_position: {
                get: function () {
                  return _plates_z_position;
                },
                set: function (val) {
                  _plates_z_position = val;
                },
              },
              _place_direction: {
                get: function () {
                  return _place_direction;
                },
                set: function (val) {
                  _place_direction = val;
                },
              },
              placeholder_modules_arr: {
                get: function () {
                  return placeholder_modules_arr;
                },
                set: function (val) {
                  placeholder_modules_arr = val;
                },
              },
              _STATE_addon_module: {
                get: function () {
                  return _STATE_addon_module;
                },
                set: function (val) {
                  _STATE_addon_module = val;
                },
              },
              _STATE_top_lable: {
                get: function () {
                  return _STATE_top_lable;
                },
                set: function (val) {
                  _STATE_top_lable = val;
                },
              },
              _top_lable_xyz_scale: {
                get: function () {
                  return _top_lable_xyz_scale;
                },
                set: function (val) {
                  _top_lable_xyz_scale = val;
                },
              },
              _cam_shift: {
                get: function () {
                  return _cam_shift;
                },
                set: function (val) {
                  _cam_shift = val;
                },
              },
              _basic_module_id: {
                get: function () {
                  return _basic_module_id;
                },
                set: function (val) {
                  _basic_module_id = val;
                },
              },
              _temp_text: {
                get: function () {
                  return _temp_text;
                },
                set: function (val) {
                  _temp_text = val;
                },
              },
              _plates_temp: {
                get: function () {
                  return _plates_temp;
                },
                set: function (val) {
                  _plates_temp = val;
                },
              },
              _STATE_scene: {
                get: function () {
                  return _STATE_scene;
                },
                set: function (val) {
                  _STATE_scene = val;
                },
              },
              _STATE_basic_module: {
                get: function () {
                  return _STATE_basic_module;
                },
                set: function (val) {
                  _STATE_basic_module = val;
                },
              },
              calculated_width: {
                get: function () {
                  return calculated_width;
                },
                set: function (val) {
                  calculated_width = val;
                },
              },
              ruler_points: {
                get: function () {
                  return ruler_points;
                },
                set: function (val) {
                  ruler_points = val;
                },
              },
              _plates_arr: {
                get: function () {
                  return _plates_arr;
                },
                set: function (val) {
                  _plates_arr = val;
                },
              },
              _STATE_addon_plates: {
                get: function () {
                  return _STATE_addon_plates;
                },
                set: function (val) {
                  _STATE_addon_plates = val;
                },
              },
              _place_shift: {
                get: function () {
                  return _place_shift;
                },
                set: function (val) {
                  _place_shift = val;
                },
              },
              _plaсe_shift_z: {
                get: function () {
                  return _pla_D1_81e_shift_z;
                },
                set: function (val) {
                  _pla_D1_81e_shift_z = val;
                },
              },
              _character_number: {
                get: function () {
                  return _character_number;
                },
                set: function (val) {
                  _character_number = val;
                },
              },
              _JSON_font_path: {
                get: function () {
                  return _JSON_font_path;
                },
                set: function (val) {
                  _JSON_font_path = val;
                },
              },
              calculated_height: {
                get: function () {
                  return calculated_height;
                },
                set: function (val) {
                  calculated_height = val;
                },
              },
              LEG_WIDTH: {
                get: function () {
                  return LEG_WIDTH;
                },
                set: function (val) {
                  LEG_WIDTH = val;
                },
              },
              _plates_height_limit: {
                get: function () {
                  return _plates_height_limit;
                },
                set: function (val) {
                  _plates_height_limit = val;
                },
              },
              _STATE_basic_plates: {
                get: function () {
                  return _STATE_basic_plates;
                },
                set: function (val) {
                  _STATE_basic_plates = val;
                },
              },
              _top_label_single_char: {
                get: function () {
                  return _top_label_single_char;
                },
                set: function (val) {
                  _top_label_single_char = val;
                },
              },
              _cam_module_target_position_x: {
                get: function () {
                  return _cam_module_target_position_x;
                },
                set: function (val) {
                  _cam_module_target_position_x = val;
                },
              },
              calculated_depth: {
                get: function () {
                  return calculated_depth;
                },
                set: function (val) {
                  calculated_depth = val;
                },
              },
              DISTANCE_TO_FLOOR: {
                get: function () {
                  return DISTANCE_TO_FLOOR;
                },
                set: function (val) {
                  DISTANCE_TO_FLOOR = val;
                },
              },
              _plates_z_step: {
                get: function () {
                  return _plates_z_step;
                },
                set: function (val) {
                  _plates_z_step = val;
                },
              },
              _3_15_exeption: {
                get: function () {
                  return _3_15_exeption;
                },
                set: function (val) {
                  _3_15_exeption = val;
                },
              },
              _cam_module_target_position_z: {
                get: function () {
                  return _cam_module_target_position_z;
                },
                set: function (val) {
                  _cam_module_target_position_z = val;
                },
              },
              ONE_BOX_WIDTH: {
                get: function () {
                  return ONE_BOX_WIDTH;
                },
                set: function (val) {
                  ONE_BOX_WIDTH = val;
                },
              },
              _plates_x_step: {
                get: function () {
                  return _plates_x_step;
                },
                set: function (val) {
                  _plates_x_step = val;
                },
              },
              ONE_BOX_HEIGHT: {
                get: function () {
                  return ONE_BOX_HEIGHT;
                },
                set: function (val) {
                  ONE_BOX_HEIGHT = val;
                },
              },
              _plates_shift: {
                get: function () {
                  return _plates_shift;
                },
                set: function (val) {
                  _plates_shift = val;
                },
              },
              _cam_position_x: {
                get: function () {
                  return _cam_position_x;
                },
                set: function (val) {
                  _cam_position_x = val;
                },
              },
              TOP_LABLE_HEIGHT: {
                get: function () {
                  return TOP_LABLE_HEIGHT;
                },
                set: function (val) {
                  TOP_LABLE_HEIGHT = val;
                },
              },
              _plates_max: {
                get: function () {
                  return _plates_max;
                },
                set: function (val) {
                  _plates_max = val;
                },
              },
              _top_label_text_area: {
                get: function () {
                  return _top_label_text_area;
                },
                set: function (val) {
                  _top_label_text_area = val;
                },
              },
              _cam_position_z: {
                get: function () {
                  return _cam_position_z;
                },
                set: function (val) {
                  _cam_position_z = val;
                },
              },
              _plates_group: {
                get: function () {
                  return _plates_group;
                },
                set: function (val) {
                  _plates_group = val;
                },
              },
              _cam_state: {
                get: function () {
                  return _cam_state;
                },
                set: function (val) {
                  _cam_state = val;
                },
              },
              _plates_row_limit: {
                get: function () {
                  return _plates_row_limit;
                },
                set: function (val) {
                  _plates_row_limit = val;
                },
              },
              _basic_temp_emptyes: {
                get: function () {
                  return _basic_temp_emptyes;
                },
                set: function (val) {
                  _basic_temp_emptyes = val;
                },
              },
              _counter: {
                get: function () {
                  return _counter;
                },
                set: function (val) {
                  _counter = val;
                },
              },
              _temp_module: {
                get: function () {
                  return _temp_module;
                },
                set: function (val) {
                  _temp_module = val;
                },
              },
            }
          );

          _name = dictGet(_STATE_addon_plates, "names")[i];
          _name_obj = ["engrave_text_", i + 1, "_addon"].join("");
          if (_name) {
            updateTextObj(_name_obj, _name);
          } else {
            updateTextObj(
              _name_obj,
              dictGet(_STATE_addon_plates, "default_name")
            );
          }
        }
      }
      if (dictGet(_STATE_basic_plates, "type") == "engrave") {
        for (let i = 0; i <= 14; i++) {
          var VARS = Object.defineProperties(
            {},
            {
              _name: {
                get: function () {
                  return _name;
                },
                set: function (val) {
                  _name = val;
                },
              },
              _plates_amount: {
                get: function () {
                  return _plates_amount;
                },
                set: function (val) {
                  _plates_amount = val;
                },
              },
              x_position: {
                get: function () {
                  return x_position;
                },
                set: function (val) {
                  x_position = val;
                },
              },
              _plates_basic_arr: {
                get: function () {
                  return _plates_basic_arr;
                },
                set: function (val) {
                  _plates_basic_arr = val;
                },
              },
              _place_type: {
                get: function () {
                  return _place_type;
                },
                set: function (val) {
                  _place_type = val;
                },
              },
              _G_step_hor: {
                get: function () {
                  return _G_step_hor;
                },
                set: function (val) {
                  _G_step_hor = val;
                },
              },
              mailbox_obj: {
                get: function () {
                  return mailbox_obj;
                },
                set: function (val) {
                  mailbox_obj = val;
                },
              },
              _top_lable_x_pos: {
                get: function () {
                  return _top_lable_x_pos;
                },
                set: function (val) {
                  _top_lable_x_pos = val;
                },
              },
              _cam_update_requests: {
                get: function () {
                  return _cam_update_requests;
                },
                set: function (val) {
                  _cam_update_requests = val;
                },
              },
              columns: {
                get: function () {
                  return columns;
                },
                set: function (val) {
                  columns = val;
                },
              },
              row: {
                get: function () {
                  return row;
                },
                set: function (val) {
                  row = val;
                },
              },
              col: {
                get: function () {
                  return col;
                },
                set: function (val) {
                  col = val;
                },
              },
              parent: {
                get: function () {
                  return parent2;
                },
                set: function (val) {
                  parent2 = val;
                },
              },
              template: {
                get: function () {
                  return template;
                },
                set: function (val) {
                  template = val;
                },
              },
              where: {
                get: function () {
                  return where;
                },
                set: function (val) {
                  where = val;
                },
              },
              num: {
                get: function () {
                  return num;
                },
                set: function (val) {
                  num = val;
                },
              },
              promise: {
                get: function () {
                  return promise;
                },
                set: function (val) {
                  promise = val;
                },
              },
              ruler_object_top: {
                get: function () {
                  return ruler_object_top;
                },
                set: function (val) {
                  ruler_object_top = val;
                },
              },
              callback: {
                get: function () {
                  return callback;
                },
                set: function (val) {
                  callback = val;
                },
              },
              visible: {
                get: function () {
                  return visible;
                },
                set: function (val) {
                  visible = val;
                },
              },
              show_ruler: {
                get: function () {
                  return show_ruler;
                },
                set: function (val) {
                  show_ruler = val;
                },
              },
              _name_obj: {
                get: function () {
                  return _name_obj;
                },
                set: function (val) {
                  _name_obj = val;
                },
              },
              _plates_template: {
                get: function () {
                  return _plates_template;
                },
                set: function (val) {
                  _plates_template = val;
                },
              },
              z_position: {
                get: function () {
                  return z_position;
                },
                set: function (val) {
                  z_position = val;
                },
              },
              _plates_basic_template: {
                get: function () {
                  return _plates_basic_template;
                },
                set: function (val) {
                  _plates_basic_template = val;
                },
              },
              _place_key: {
                get: function () {
                  return _place_key;
                },
                set: function (val) {
                  _place_key = val;
                },
              },
              _G_step_vert: {
                get: function () {
                  return _G_step_vert;
                },
                set: function (val) {
                  _G_step_vert = val;
                },
              },
              _leg_mouting_offset: {
                get: function () {
                  return _leg_mouting_offset;
                },
                set: function (val) {
                  _leg_mouting_offset = val;
                },
              },
              _STATE_skeleton: {
                get: function () {
                  return _STATE_skeleton;
                },
                set: function (val) {
                  _STATE_skeleton = val;
                },
              },
              _top_lable_y_pos: {
                get: function () {
                  return _top_lable_y_pos;
                },
                set: function (val) {
                  _top_lable_y_pos = val;
                },
              },
              _cam_update_counter: {
                get: function () {
                  return _cam_update_counter;
                },
                set: function (val) {
                  _cam_update_counter = val;
                },
              },
              j: {
                get: function () {
                  return j;
                },
                set: function (val) {
                  j = val;
                },
              },
              _zoom_step: {
                get: function () {
                  return _zoom_step;
                },
                set: function (val) {
                  _zoom_step = val;
                },
              },
              ruler_object_left: {
                get: function () {
                  return ruler_object_left;
                },
                set: function (val) {
                  ruler_object_left = val;
                },
              },
              _name_basic: {
                get: function () {
                  return _name_basic;
                },
                set: function (val) {
                  _name_basic = val;
                },
              },
              _plates_x_position: {
                get: function () {
                  return _plates_x_position;
                },
                set: function (val) {
                  _plates_x_position = val;
                },
              },
              i: {
                get: function () {
                  return i;
                },
                set: function (val) {
                  i = val;
                },
              },
              _plates_basic_group: {
                get: function () {
                  return _plates_basic_group;
                },
                set: function (val) {
                  _plates_basic_group = val;
                },
              },
              _place_configuration: {
                get: function () {
                  return _place_configuration;
                },
                set: function (val) {
                  _place_configuration = val;
                },
              },
              _basic_modules_arr: {
                get: function () {
                  return _basic_modules_arr;
                },
                set: function (val) {
                  _basic_modules_arr = val;
                },
              },
              _top_lable_z_pos: {
                get: function () {
                  return _top_lable_z_pos;
                },
                set: function (val) {
                  _top_lable_z_pos = val;
                },
              },
              _anim_running: {
                get: function () {
                  return _anim_running;
                },
                set: function (val) {
                  _anim_running = val;
                },
              },
              _JSON_placement_rules: {
                get: function () {
                  return _JSON_placement_rules;
                },
                set: function (val) {
                  _JSON_placement_rules = val;
                },
              },
              ruler_object_bottom: {
                get: function () {
                  return ruler_object_bottom;
                },
                set: function (val) {
                  ruler_object_bottom = val;
                },
              },
              _name_obj_basic: {
                get: function () {
                  return _name_obj_basic;
                },
                set: function (val) {
                  _name_obj_basic = val;
                },
              },
              _plates_z_position: {
                get: function () {
                  return _plates_z_position;
                },
                set: function (val) {
                  _plates_z_position = val;
                },
              },
              _place_direction: {
                get: function () {
                  return _place_direction;
                },
                set: function (val) {
                  _place_direction = val;
                },
              },
              placeholder_modules_arr: {
                get: function () {
                  return placeholder_modules_arr;
                },
                set: function (val) {
                  placeholder_modules_arr = val;
                },
              },
              _STATE_addon_module: {
                get: function () {
                  return _STATE_addon_module;
                },
                set: function (val) {
                  _STATE_addon_module = val;
                },
              },
              _STATE_top_lable: {
                get: function () {
                  return _STATE_top_lable;
                },
                set: function (val) {
                  _STATE_top_lable = val;
                },
              },
              _top_lable_xyz_scale: {
                get: function () {
                  return _top_lable_xyz_scale;
                },
                set: function (val) {
                  _top_lable_xyz_scale = val;
                },
              },
              _cam_shift: {
                get: function () {
                  return _cam_shift;
                },
                set: function (val) {
                  _cam_shift = val;
                },
              },
              _basic_module_id: {
                get: function () {
                  return _basic_module_id;
                },
                set: function (val) {
                  _basic_module_id = val;
                },
              },
              _temp_text: {
                get: function () {
                  return _temp_text;
                },
                set: function (val) {
                  _temp_text = val;
                },
              },
              _plates_temp: {
                get: function () {
                  return _plates_temp;
                },
                set: function (val) {
                  _plates_temp = val;
                },
              },
              _STATE_scene: {
                get: function () {
                  return _STATE_scene;
                },
                set: function (val) {
                  _STATE_scene = val;
                },
              },
              _STATE_basic_module: {
                get: function () {
                  return _STATE_basic_module;
                },
                set: function (val) {
                  _STATE_basic_module = val;
                },
              },
              calculated_width: {
                get: function () {
                  return calculated_width;
                },
                set: function (val) {
                  calculated_width = val;
                },
              },
              ruler_points: {
                get: function () {
                  return ruler_points;
                },
                set: function (val) {
                  ruler_points = val;
                },
              },
              _plates_arr: {
                get: function () {
                  return _plates_arr;
                },
                set: function (val) {
                  _plates_arr = val;
                },
              },
              _STATE_addon_plates: {
                get: function () {
                  return _STATE_addon_plates;
                },
                set: function (val) {
                  _STATE_addon_plates = val;
                },
              },
              _place_shift: {
                get: function () {
                  return _place_shift;
                },
                set: function (val) {
                  _place_shift = val;
                },
              },
              _plaсe_shift_z: {
                get: function () {
                  return _pla_D1_81e_shift_z;
                },
                set: function (val) {
                  _pla_D1_81e_shift_z = val;
                },
              },
              _character_number: {
                get: function () {
                  return _character_number;
                },
                set: function (val) {
                  _character_number = val;
                },
              },
              _JSON_font_path: {
                get: function () {
                  return _JSON_font_path;
                },
                set: function (val) {
                  _JSON_font_path = val;
                },
              },
              calculated_height: {
                get: function () {
                  return calculated_height;
                },
                set: function (val) {
                  calculated_height = val;
                },
              },
              LEG_WIDTH: {
                get: function () {
                  return LEG_WIDTH;
                },
                set: function (val) {
                  LEG_WIDTH = val;
                },
              },
              _plates_height_limit: {
                get: function () {
                  return _plates_height_limit;
                },
                set: function (val) {
                  _plates_height_limit = val;
                },
              },
              _STATE_basic_plates: {
                get: function () {
                  return _STATE_basic_plates;
                },
                set: function (val) {
                  _STATE_basic_plates = val;
                },
              },
              _top_label_single_char: {
                get: function () {
                  return _top_label_single_char;
                },
                set: function (val) {
                  _top_label_single_char = val;
                },
              },
              _cam_module_target_position_x: {
                get: function () {
                  return _cam_module_target_position_x;
                },
                set: function (val) {
                  _cam_module_target_position_x = val;
                },
              },
              calculated_depth: {
                get: function () {
                  return calculated_depth;
                },
                set: function (val) {
                  calculated_depth = val;
                },
              },
              DISTANCE_TO_FLOOR: {
                get: function () {
                  return DISTANCE_TO_FLOOR;
                },
                set: function (val) {
                  DISTANCE_TO_FLOOR = val;
                },
              },
              _plates_z_step: {
                get: function () {
                  return _plates_z_step;
                },
                set: function (val) {
                  _plates_z_step = val;
                },
              },
              _3_15_exeption: {
                get: function () {
                  return _3_15_exeption;
                },
                set: function (val) {
                  _3_15_exeption = val;
                },
              },
              _cam_module_target_position_z: {
                get: function () {
                  return _cam_module_target_position_z;
                },
                set: function (val) {
                  _cam_module_target_position_z = val;
                },
              },
              ONE_BOX_WIDTH: {
                get: function () {
                  return ONE_BOX_WIDTH;
                },
                set: function (val) {
                  ONE_BOX_WIDTH = val;
                },
              },
              _plates_x_step: {
                get: function () {
                  return _plates_x_step;
                },
                set: function (val) {
                  _plates_x_step = val;
                },
              },
              ONE_BOX_HEIGHT: {
                get: function () {
                  return ONE_BOX_HEIGHT;
                },
                set: function (val) {
                  ONE_BOX_HEIGHT = val;
                },
              },
              _plates_shift: {
                get: function () {
                  return _plates_shift;
                },
                set: function (val) {
                  _plates_shift = val;
                },
              },
              _cam_position_x: {
                get: function () {
                  return _cam_position_x;
                },
                set: function (val) {
                  _cam_position_x = val;
                },
              },
              TOP_LABLE_HEIGHT: {
                get: function () {
                  return TOP_LABLE_HEIGHT;
                },
                set: function (val) {
                  TOP_LABLE_HEIGHT = val;
                },
              },
              _plates_max: {
                get: function () {
                  return _plates_max;
                },
                set: function (val) {
                  _plates_max = val;
                },
              },
              _top_label_text_area: {
                get: function () {
                  return _top_label_text_area;
                },
                set: function (val) {
                  _top_label_text_area = val;
                },
              },
              _cam_position_z: {
                get: function () {
                  return _cam_position_z;
                },
                set: function (val) {
                  _cam_position_z = val;
                },
              },
              _plates_group: {
                get: function () {
                  return _plates_group;
                },
                set: function (val) {
                  _plates_group = val;
                },
              },
              _cam_state: {
                get: function () {
                  return _cam_state;
                },
                set: function (val) {
                  _cam_state = val;
                },
              },
              _plates_row_limit: {
                get: function () {
                  return _plates_row_limit;
                },
                set: function (val) {
                  _plates_row_limit = val;
                },
              },
              _basic_temp_emptyes: {
                get: function () {
                  return _basic_temp_emptyes;
                },
                set: function (val) {
                  _basic_temp_emptyes = val;
                },
              },
              _counter: {
                get: function () {
                  return _counter;
                },
                set: function (val) {
                  _counter = val;
                },
              },
              _temp_module: {
                get: function () {
                  return _temp_module;
                },
                set: function (val) {
                  _temp_module = val;
                },
              },
            }
          );

          _name_basic = dictGet(_STATE_basic_plates, "names")[i];
          _name_obj_basic = ["engrave_basic_text_", i + 1, "_basic"].join("");
          if (_name_basic) {
            updateTextObj(_name_obj_basic, _name_basic);
          } else {
            updateTextObj(
              _name_obj_basic,
              dictGet(_STATE_basic_plates, "default_name")
            );
          }
        }
      }
    }

    // utility functions envoked by the HTML puzzles
    function getElements(ids, isParent) {
      var elems = [];
      if (
        Array.isArray(ids) &&
        ids[0] != "CONTAINER" &&
        ids[0] != "WINDOW" &&
        ids[0] != "DOCUMENT" &&
        ids[0] != "BODY" &&
        ids[0] != "QUERYSELECTOR"
      ) {
        for (var i = 0; i < ids.length; i++)
          elems.push(getElement(ids[i], isParent));
      } else {
        elems.push(getElement(ids, isParent));
      }
      return elems;
    }

    function getElement(id, isParent) {
      var elem;
      if (Array.isArray(id) && id[0] == "CONTAINER") {
        if (appInstance !== null) {
          elem = appInstance.container;
        } else if (typeof _initGlob !== "undefined") {
          // if we are on the initialization stage, we still can have access
          // to the container element
          var id = _initGlob.container;
          if (isParent) {
            elem = parent.document.getElementById(id);
          } else {
            elem = document.getElementById(id);
          }
        }
      } else if (Array.isArray(id) && id[0] == "WINDOW") {
        if (isParent) elem = parent;
        else elem = window;
      } else if (Array.isArray(id) && id[0] == "DOCUMENT") {
        if (isParent) elem = parent.document;
        else elem = document;
      } else if (Array.isArray(id) && id[0] == "BODY") {
        if (isParent) elem = parent.document.body;
        else elem = document.body;
      } else if (Array.isArray(id) && id[0] == "QUERYSELECTOR") {
        if (isParent) elem = parent.document.querySelector(id);
        else elem = document.querySelector(id);
      } else {
        if (isParent) elem = parent.document.getElementById(id);
        else elem = document.getElementById(id);
      }
      return elem;
    }

    // getHTMLElemAttribute puzzle
    function getHTMLElemAttribute(attr, id, isParent) {
      var elem = getElement(id, isParent);
      return elem ? elem[attr] : "";
    }

    // convertToNumber puzzle
    function toNumber(text) {
      var num = Number(text);
      if (isNaN(num)) num = 0;
      return num;
    }

    // dictSet puzzle
    function dictSet(dict, key, value) {
      if (dict && typeof dict == "object") dict[key] = value;
    }

    function _checkListenersSame(
      target0,
      type0,
      listener0,
      optionsOrUseCapture0,
      target1,
      type1,
      listener1,
      optionsOrUseCapture1
    ) {
      const capture0 = Boolean(
        optionsOrUseCapture0 instanceof Object
          ? optionsOrUseCapture0.capture
          : optionsOrUseCapture0
      );
      const capture1 = Boolean(
        optionsOrUseCapture1 instanceof Object
          ? optionsOrUseCapture1.capture
          : optionsOrUseCapture1
      );
      return (
        target0 === target1 &&
        type0 === type1 &&
        listener0 === listener1 &&
        capture0 === capture1
      );
    }

    /**
     * Add the specified event listener to the specified target. This function also
     * stores listener data for easier disposing.
     */
    function bindListener(target, type, listener, optionsOrUseCapture) {
      const alreadyExists = _pGlob.eventListeners.some((elem) => {
        return _checkListenersSame(
          elem.target,
          elem.type,
          elem.listener,
          elem.optionsOrUseCapture,
          target,
          type,
          listener,
          optionsOrUseCapture
        );
      });

      if (!alreadyExists) {
        target.addEventListener(type, listener, optionsOrUseCapture);
        _pGlob.eventListeners.push({
          target,
          type,
          listener,
          optionsOrUseCapture,
        });
      }
    }

    // eventHTMLElem puzzle
    function eventHTMLElem(eventType, ids, isParent, callback) {
      var elems = getElements(ids, isParent);
      for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem) continue;

        bindListener(elem, eventType, callback);
      }
    }

    function setMorphFactor(objName, targetName, factor) {
      if (objName && targetName) {
        var obj = getObjectByName(objName);
        if (obj) {
          obj.resolveMultiMaterial().forEach(function (objR) {
            if (
              objR.morphTargetDictionary &&
              targetName in objR.morphTargetDictionary
            ) {
              var idx = objR.morphTargetDictionary[targetName];
              objR.morphTargetInfluences[idx] = Number(factor);
            }
          });

          obj.resolveMultiMaterial().forEach(function (objR) {
            objR.getAuxClippingMeshes().forEach(function (objC) {
              if (
                objC.morphTargetDictionary &&
                targetName in objC.morphTargetDictionary
              ) {
                var idx = objC.morphTargetDictionary[targetName];
                objC.morphTargetInfluences[idx] = Number(factor);
              }
            });
          });
        }
      }
    }

    /**
     * mesh or multi-material object
     */
    function isMeshObj(obj) {
      if (obj.isMesh) return true;

      for (var i = 0; i < obj.children.length; i++) {
        var child = obj.children[i];
        if (child.isMesh && child.isMaterialGeneratedMesh) return true;
      }

      return false;
    }

    function getObjectsFromCollect(obj, type, out) {
      if (!notIgnoredObj(obj)) return;

      switch (type) {
        case "ALL":
          if (out.indexOf(obj.name) < 0) out.push(obj.name);
          break;
        case "ANNOTATION":
          if (obj.isAnnotation && out.indexOf(obj.name) < 0) out.push(obj.name);
          break;
        case "BONE":
          if (obj.isBone && out.indexOf(obj.name) < 0) out.push(obj.name);
          break;
        case "CAMERA":
          if (obj.isCamera && out.indexOf(obj.name) < 0) out.push(obj.name);
          break;
        case "EMPTY":
          if (
            !obj.isAnnotationControl &&
            !obj.isBone &&
            !obj.isCamera &&
            !obj.isGroup &&
            !obj.isLine &&
            !obj.isLOD &&
            !obj.isLight &&
            !isMeshObj(obj) &&
            !obj.isPoints &&
            !obj.isScene &&
            !obj.isSprite &&
            out.indexOf(obj.name) < 0
          )
            out.push(obj.name);
          break;
        case "LIGHT":
          if (obj.isLight && out.indexOf(obj.name) < 0) out.push(obj.name);
          break;
        case "MESH":
          if (isMeshObj(obj) && out.indexOf(obj.name) < 0) out.push(obj.name);
          break;
        default:
          console.error("getObjectsFrom: Unknown object type: " + type);
          break;
      }

      for (var i = 0; i < obj.children.length; i++) {
        var child = obj.children[i];
        getObjectsFromCollect(child, type, out);
      }
    }

    // getObjectsFrom puzzle
    function getObjectsFrom(objSelector, type) {
      var out = [];

      var objNames = retrieveObjectNames(objSelector);

      for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i];
        if (!objName) continue;

        var obj = getObjectByName(objName);
        if (!obj) continue;

        getObjectsFromCollect(obj, type, out);
      }

      return out;
    }

    // removeObject puzzles
    function removeObject(objSelector) {
      var objNames = retrieveObjectNames(objSelector);

      for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i];
        if (!objName) continue;
        var obj = getObjectByName(objName);
        if (!obj || !obj.parent) continue;

        obj.parent.remove(obj);

        // clean object cache
        _pGlob.objCache = {};
      }
    }

    // createObject puzzle
    function createObject(
      type,
      name,
      width,
      height,
      depth,
      radius,
      tube,
      segments,
      cameraType,
      lightType,
      fov
    ) {
      var oldObj = appInstance.scene.getObjectByName(name);
      if (oldObj) {
        oldObj.parent.remove(oldObj);
      }

      var obj;
      var geometry;

      switch (type) {
        case "BOX":
          geometry = new v3d.BoxGeometry(width, height, depth);
          break;
        case "CAMERA":
          var aspect =
            appInstance.container.offsetWidth /
            appInstance.container.offsetHeight;

          if (cameraType == "PERSPECTIVE") {
            obj = new v3d.PerspectiveCamera(fov, aspect, 1, 1000);
          } else {
            var width = fov * aspect;
            obj = new v3d.OrthographicCamera(
              -width / 2,
              width / 2,
              fov / 2,
              -fov / 2,
              -1000,
              1000
            );
          }

          obj.lookAt(_pGlob.vec3Tmp.set(0, 0, 0));
          break;
        case "CIRCLE":
          geometry = new v3d.CircleGeometry(radius, segments);
          break;
        case "CONE":
          geometry = new v3d.ConeGeometry(radius, height, segments);
          break;
        case "CYLINDER":
          geometry = new v3d.CylinderGeometry(radius, radius, height, segments);
          break;
        case "EMPTY":
          obj = new v3d.Object3D();
          break;
        case "LIGHT":
          var color = 0xffffff;
          var intensity = 0.5;

          switch (lightType) {
            case "AMBIENT":
              obj = new v3d.AmbientLight(color, intensity);
              break;
            case "AREA":
              v3d.RectAreaLightUniformsLib.init(LTC_MAT_1, LTC_MAT_2);
              obj = new v3d.RectAreaLight(color, intensity, 1, 1);
              break;
            case "DIRECTIONAL":
              obj = new v3d.DirectionalLight(color, intensity);
              break;
            case "HEMISPHERE":
              obj = new v3d.HemisphereLight(color, 0, intensity);
              break;
            case "POINT":
              obj = new v3d.PointLight(color, intensity);
              break;
            case "SPOT":
              obj = new v3d.SpotLight(color, intensity);
              break;
          }

          obj.isFreeLight = true;

          break;
        case "PLANE":
          geometry = new v3d.PlaneGeometry(width, height, 1, 1);
          break;
        case "PLANE_WITH_TEXTURE":
          geometry = new v3d.PlaneGeometry(width, height, 1, 1);
          break;
        case "SPHERE":
          geometry = new v3d.SphereGeometry(radius, 32, 32);
          break;
        case "TEAPOT":
          geometry = new v3d.TeapotGeometry(width);
          break;
        case "TORUS":
          geometry = new v3d.TorusGeometry(radius, tube, 32, 32);
          break;
      }

      if (geometry) {
        var material = new v3d.MeshStandardMaterial({
          color: "white",
          roughness: 1.0,
          metalness: 0.0,
          side:
            type == "CIRCLE" ||
            type == "PLANE" ||
            type == "PLANE_WITH_TEXTURE" ||
            type == "TEAPOT"
              ? v3d.DoubleSide
              : v3d.FrontSide,
        });

        material.name = name + "Material";

        if (type == "PLANE_WITH_TEXTURE") {
          material.map = new v3d.TextureLoader().load(CHECKER_IMAGE);
          material.map.name = name + "MaterialTexture";
          material.map.magFilter = v3d.NearestFilter;
        }

        obj = new v3d.Mesh(geometry, material);
      }

      obj.name = name;

      appInstance.scene.add(obj);

      // clean object cache
      _pGlob.objCache = {};
    }

    /**
     * Retrieve coordinate system from the loaded scene
     */
    function getCoordSystem() {
      var scene = appInstance.scene;

      if (scene && "coordSystem" in scene.userData) {
        return scene.userData.coordSystem;
      }

      return "Y_UP_RIGHT";
    }

    /**
     * Transform coordinates from one space to another
     * Can be used with Vector3 or Euler.
     */
    function coordsTransform(coords, from, to, noSignChange) {
      if (from == to) return coords;

      var y = coords.y,
        z = coords.z;

      if (from == "Z_UP_RIGHT" && to == "Y_UP_RIGHT") {
        coords.y = z;
        coords.z = noSignChange ? y : -y;
      } else if (from == "Y_UP_RIGHT" && to == "Z_UP_RIGHT") {
        coords.y = noSignChange ? z : -z;
        coords.z = y;
      } else {
        console.error("coordsTransform: Unsupported coordinate space");
      }

      return coords;
    }

    /**
     * Verge3D euler rotation to Blender/Max shortest.
     * 1) Convert from intrinsic rotation (v3d) to extrinsic XYZ (Blender/Max default
     *    order) via reversion: XYZ -> ZYX
     * 2) swizzle ZYX->YZX
     * 3) choose the shortest rotation to resemble Blender's behavior
     */
    const eulerV3DToBlenderShortest = (function () {
      const eulerTmp = new v3d.Euler();
      const eulerTmp2 = new v3d.Euler();
      const vec3Tmp = new v3d.Vector3();

      return function (euler, dest) {
        const eulerBlender = eulerTmp.copy(euler).reorder("YZX");
        const eulerBlenderAlt = eulerTmp2.copy(eulerBlender).makeAlternative();

        const len = vec3Tmp.setFromEuler(eulerBlender).lengthSq();
        const lenAlt = vec3Tmp.setFromEuler(eulerBlenderAlt).lengthSq();

        dest.copy(len < lenAlt ? eulerBlender : eulerBlenderAlt);
        return coordsTransform(dest, "Y_UP_RIGHT", "Z_UP_RIGHT");
      };
    })();

    function RotationInterface() {
      /**
       * For user manipulations use XYZ extrinsic rotations (which
       * are the same as ZYX intrinsic rotations)
       *     - Blender/Max/Maya use extrinsic rotations in the UI
       *     - XYZ is the default option, but could be set from
       *       some order hint if exported
       */
      this._userRotation = new v3d.Euler(0, 0, 0, "ZYX");
      this._actualRotation = new v3d.Euler();
    }

    Object.assign(RotationInterface, {
      initObject: function (obj) {
        if (obj.userData.puzzles === undefined) {
          obj.userData.puzzles = {};
        }
        if (obj.userData.puzzles.rotationInterface === undefined) {
          obj.userData.puzzles.rotationInterface = new RotationInterface();
        }

        var rotUI = obj.userData.puzzles.rotationInterface;
        rotUI.updateFromObject(obj);
        return rotUI;
      },
    });

    Object.assign(RotationInterface.prototype, {
      updateFromObject: function (obj) {
        var SYNC_ROT_EPS = 1e-8;

        if (!this._actualRotation.equalsEps(obj.rotation, SYNC_ROT_EPS)) {
          this._actualRotation.copy(obj.rotation);
          this._updateUserRotFromActualRot();
        }
      },

      getActualRotation: function (euler) {
        return euler.copy(this._actualRotation);
      },

      setUserRotation: function (euler) {
        // don't copy the order, since it's fixed to ZYX for now
        this._userRotation.set(euler.x, euler.y, euler.z);
        this._updateActualRotFromUserRot();
      },

      getUserRotation: function (euler) {
        return euler.copy(this._userRotation);
      },

      _updateUserRotFromActualRot: function () {
        var order = this._userRotation.order;
        this._userRotation.copy(this._actualRotation).reorder(order);
      },

      _updateActualRotFromUserRot: function () {
        var order = this._actualRotation.order;
        this._actualRotation.copy(this._userRotation).reorder(order);
      },
    });

    // getObjTransform puzzle
    function getObjTransform(objName, isWorldSpace, mode, coord) {
      if (!objName) return;
      var obj = getObjectByName(objName);
      if (!obj) return;

      var coordSystem = getCoordSystem();

      var transformVal;

      if (isWorldSpace && obj.parent) {
        if (mode === "position") {
          transformVal = coordsTransform(
            obj.getWorldPosition(_pGlob.vec3Tmp),
            "Y_UP_RIGHT",
            coordSystem,
            mode === "scale"
          );
        } else if (mode === "rotation") {
          transformVal = coordsTransform(
            obj.getWorldEuler(_pGlob.eulerTmp, "XYZ"),
            "Y_UP_RIGHT",
            coordSystem,
            mode === "scale"
          );
        } else if (mode === "scale") {
          transformVal = coordsTransform(
            obj.getWorldScale(_pGlob.vec3Tmp),
            "Y_UP_RIGHT",
            coordSystem,
            mode === "scale"
          );
        }
      } else if (mode === "rotation" && coordSystem == "Z_UP_RIGHT") {
        transformVal = eulerV3DToBlenderShortest(obj.rotation, _pGlob.eulerTmp);
      } else if (mode === "rotation" && coordSystem == "Y_UP_RIGHT") {
        // Maya coordinates
        // Use separate rotation interface to fix ambiguous rotations for Maya,
        // might as well do the same for Blender/Max.

        var rotUI = RotationInterface.initObject(obj);
        transformVal = rotUI.getUserRotation(_pGlob.eulerTmp);
      } else {
        transformVal = coordsTransform(
          obj[mode].clone(),
          "Y_UP_RIGHT",
          coordSystem,
          mode === "scale"
        );
      }

      if (mode === "rotation") {
        transformVal.x = v3d.MathUtils.radToDeg(transformVal.x);
        transformVal.y = v3d.MathUtils.radToDeg(transformVal.y);
        transformVal.z = v3d.MathUtils.radToDeg(transformVal.z);
      }

      if (coord == "xyz") {
        // remove order component for Euler vectors
        return transformVal.toArray().slice(0, 3);
      } else {
        return transformVal[coord];
      }
    }

    // setObjTransform puzzle
    function setObjTransform(objSelector, isWorldSpace, mode, vector, offset) {
      var x = vector[0];
      var y = vector[1];
      var z = vector[2];

      var objNames = retrieveObjectNames(objSelector);

      function setObjProp(obj, prop, val) {
        if (!offset) {
          obj[mode][prop] = val;
        } else {
          if (mode != "scale") obj[mode][prop] += val;
          else obj[mode][prop] *= val;
        }
      }

      var inputsUsed = _pGlob.vec3Tmp.set(
        Number(x !== ""),
        Number(y !== ""),
        Number(z !== "")
      );
      var coords = _pGlob.vec3Tmp2.set(x || 0, y || 0, z || 0);

      if (mode === "rotation") {
        // rotations are specified in degrees
        coords.multiplyScalar(v3d.MathUtils.DEG2RAD);
      }

      var coordSystem = getCoordSystem();

      coordsTransform(inputsUsed, coordSystem, "Y_UP_RIGHT", true);
      coordsTransform(coords, coordSystem, "Y_UP_RIGHT", mode === "scale");

      for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i];
        if (!objName) continue;

        var obj = getObjectByName(objName);
        if (!obj) continue;

        if (isWorldSpace && obj.parent) {
          obj.matrixWorld.decomposeE(obj.position, obj.rotation, obj.scale);

          if (inputsUsed.x) setObjProp(obj, "x", coords.x);
          if (inputsUsed.y) setObjProp(obj, "y", coords.y);
          if (inputsUsed.z) setObjProp(obj, "z", coords.z);

          obj.matrixWorld.composeE(obj.position, obj.rotation, obj.scale);
          obj.matrix.multiplyMatrices(
            _pGlob.mat4Tmp.copy(obj.parent.matrixWorld).invert(),
            obj.matrixWorld
          );
          obj.matrix.decompose(obj.position, obj.quaternion, obj.scale);
        } else if (mode === "rotation" && coordSystem == "Z_UP_RIGHT") {
          // Blender/Max coordinates

          // need all the rotations for order conversions, especially if some
          // inputs are not specified
          var euler = eulerV3DToBlenderShortest(obj.rotation, _pGlob.eulerTmp);
          coordsTransform(euler, coordSystem, "Y_UP_RIGHT");

          if (inputsUsed.x) euler.x = offset ? euler.x + coords.x : coords.x;
          if (inputsUsed.y) euler.y = offset ? euler.y + coords.y : coords.y;
          if (inputsUsed.z) euler.z = offset ? euler.z + coords.z : coords.z;

          /**
           * convert from Blender/Max default XYZ extrinsic order to v3d XYZ
           * intrinsic with reversion (XYZ -> ZYX) and axes swizzling (ZYX -> YZX)
           */
          euler.order = "YZX";
          euler.reorder(obj.rotation.order);
          obj.rotation.copy(euler);
        } else if (mode === "rotation" && coordSystem == "Y_UP_RIGHT") {
          // Maya coordinates

          // Use separate rotation interface to fix ambiguous rotations for Maya,
          // might as well do the same for Blender/Max.

          var rotUI = RotationInterface.initObject(obj);
          var euler = rotUI.getUserRotation(_pGlob.eulerTmp);
          // TODO(ivan): this probably needs some reasonable wrapping
          if (inputsUsed.x) euler.x = offset ? euler.x + coords.x : coords.x;
          if (inputsUsed.y) euler.y = offset ? euler.y + coords.y : coords.y;
          if (inputsUsed.z) euler.z = offset ? euler.z + coords.z : coords.z;

          rotUI.setUserRotation(euler);
          rotUI.getActualRotation(obj.rotation);
        } else {
          if (inputsUsed.x) setObjProp(obj, "x", coords.x);
          if (inputsUsed.y) setObjProp(obj, "y", coords.y);
          if (inputsUsed.z) setObjProp(obj, "z", coords.z);
        }

        obj.updateMatrixWorld(true);
      }
    }

    // Describe this function...
    function configure_basic_plates() {
      /* zero */
      for (var i_index in _basic_modules_arr) {
        let i = _basic_modules_arr[i_index];
        var VARS = Object.defineProperties(
          {},
          {
            _name: {
              get: function () {
                return _name;
              },
              set: function (val) {
                _name = val;
              },
            },
            _plates_amount: {
              get: function () {
                return _plates_amount;
              },
              set: function (val) {
                _plates_amount = val;
              },
            },
            x_position: {
              get: function () {
                return x_position;
              },
              set: function (val) {
                x_position = val;
              },
            },
            _plates_basic_arr: {
              get: function () {
                return _plates_basic_arr;
              },
              set: function (val) {
                _plates_basic_arr = val;
              },
            },
            _place_type: {
              get: function () {
                return _place_type;
              },
              set: function (val) {
                _place_type = val;
              },
            },
            _G_step_hor: {
              get: function () {
                return _G_step_hor;
              },
              set: function (val) {
                _G_step_hor = val;
              },
            },
            mailbox_obj: {
              get: function () {
                return mailbox_obj;
              },
              set: function (val) {
                mailbox_obj = val;
              },
            },
            _top_lable_x_pos: {
              get: function () {
                return _top_lable_x_pos;
              },
              set: function (val) {
                _top_lable_x_pos = val;
              },
            },
            _cam_update_requests: {
              get: function () {
                return _cam_update_requests;
              },
              set: function (val) {
                _cam_update_requests = val;
              },
            },
            columns: {
              get: function () {
                return columns;
              },
              set: function (val) {
                columns = val;
              },
            },
            row: {
              get: function () {
                return row;
              },
              set: function (val) {
                row = val;
              },
            },
            col: {
              get: function () {
                return col;
              },
              set: function (val) {
                col = val;
              },
            },
            parent: {
              get: function () {
                return parent2;
              },
              set: function (val) {
                parent2 = val;
              },
            },
            template: {
              get: function () {
                return template;
              },
              set: function (val) {
                template = val;
              },
            },
            where: {
              get: function () {
                return where;
              },
              set: function (val) {
                where = val;
              },
            },
            num: {
              get: function () {
                return num;
              },
              set: function (val) {
                num = val;
              },
            },
            promise: {
              get: function () {
                return promise;
              },
              set: function (val) {
                promise = val;
              },
            },
            ruler_object_top: {
              get: function () {
                return ruler_object_top;
              },
              set: function (val) {
                ruler_object_top = val;
              },
            },
            callback: {
              get: function () {
                return callback;
              },
              set: function (val) {
                callback = val;
              },
            },
            visible: {
              get: function () {
                return visible;
              },
              set: function (val) {
                visible = val;
              },
            },
            show_ruler: {
              get: function () {
                return show_ruler;
              },
              set: function (val) {
                show_ruler = val;
              },
            },
            _name_obj: {
              get: function () {
                return _name_obj;
              },
              set: function (val) {
                _name_obj = val;
              },
            },
            _plates_template: {
              get: function () {
                return _plates_template;
              },
              set: function (val) {
                _plates_template = val;
              },
            },
            z_position: {
              get: function () {
                return z_position;
              },
              set: function (val) {
                z_position = val;
              },
            },
            _plates_basic_template: {
              get: function () {
                return _plates_basic_template;
              },
              set: function (val) {
                _plates_basic_template = val;
              },
            },
            _place_key: {
              get: function () {
                return _place_key;
              },
              set: function (val) {
                _place_key = val;
              },
            },
            _G_step_vert: {
              get: function () {
                return _G_step_vert;
              },
              set: function (val) {
                _G_step_vert = val;
              },
            },
            _leg_mouting_offset: {
              get: function () {
                return _leg_mouting_offset;
              },
              set: function (val) {
                _leg_mouting_offset = val;
              },
            },
            _STATE_skeleton: {
              get: function () {
                return _STATE_skeleton;
              },
              set: function (val) {
                _STATE_skeleton = val;
              },
            },
            _top_lable_y_pos: {
              get: function () {
                return _top_lable_y_pos;
              },
              set: function (val) {
                _top_lable_y_pos = val;
              },
            },
            _cam_update_counter: {
              get: function () {
                return _cam_update_counter;
              },
              set: function (val) {
                _cam_update_counter = val;
              },
            },
            j: {
              get: function () {
                return j;
              },
              set: function (val) {
                j = val;
              },
            },
            _zoom_step: {
              get: function () {
                return _zoom_step;
              },
              set: function (val) {
                _zoom_step = val;
              },
            },
            ruler_object_left: {
              get: function () {
                return ruler_object_left;
              },
              set: function (val) {
                ruler_object_left = val;
              },
            },
            _name_basic: {
              get: function () {
                return _name_basic;
              },
              set: function (val) {
                _name_basic = val;
              },
            },
            _plates_x_position: {
              get: function () {
                return _plates_x_position;
              },
              set: function (val) {
                _plates_x_position = val;
              },
            },
            i: {
              get: function () {
                return i;
              },
              set: function (val) {
                i = val;
              },
            },
            _plates_basic_group: {
              get: function () {
                return _plates_basic_group;
              },
              set: function (val) {
                _plates_basic_group = val;
              },
            },
            _place_configuration: {
              get: function () {
                return _place_configuration;
              },
              set: function (val) {
                _place_configuration = val;
              },
            },
            _basic_modules_arr: {
              get: function () {
                return _basic_modules_arr;
              },
              set: function (val) {
                _basic_modules_arr = val;
              },
            },
            _top_lable_z_pos: {
              get: function () {
                return _top_lable_z_pos;
              },
              set: function (val) {
                _top_lable_z_pos = val;
              },
            },
            _anim_running: {
              get: function () {
                return _anim_running;
              },
              set: function (val) {
                _anim_running = val;
              },
            },
            _JSON_placement_rules: {
              get: function () {
                return _JSON_placement_rules;
              },
              set: function (val) {
                _JSON_placement_rules = val;
              },
            },
            ruler_object_bottom: {
              get: function () {
                return ruler_object_bottom;
              },
              set: function (val) {
                ruler_object_bottom = val;
              },
            },
            _name_obj_basic: {
              get: function () {
                return _name_obj_basic;
              },
              set: function (val) {
                _name_obj_basic = val;
              },
            },
            _plates_z_position: {
              get: function () {
                return _plates_z_position;
              },
              set: function (val) {
                _plates_z_position = val;
              },
            },
            _place_direction: {
              get: function () {
                return _place_direction;
              },
              set: function (val) {
                _place_direction = val;
              },
            },
            placeholder_modules_arr: {
              get: function () {
                return placeholder_modules_arr;
              },
              set: function (val) {
                placeholder_modules_arr = val;
              },
            },
            _STATE_addon_module: {
              get: function () {
                return _STATE_addon_module;
              },
              set: function (val) {
                _STATE_addon_module = val;
              },
            },
            _STATE_top_lable: {
              get: function () {
                return _STATE_top_lable;
              },
              set: function (val) {
                _STATE_top_lable = val;
              },
            },
            _top_lable_xyz_scale: {
              get: function () {
                return _top_lable_xyz_scale;
              },
              set: function (val) {
                _top_lable_xyz_scale = val;
              },
            },
            _cam_shift: {
              get: function () {
                return _cam_shift;
              },
              set: function (val) {
                _cam_shift = val;
              },
            },
            _basic_module_id: {
              get: function () {
                return _basic_module_id;
              },
              set: function (val) {
                _basic_module_id = val;
              },
            },
            _temp_text: {
              get: function () {
                return _temp_text;
              },
              set: function (val) {
                _temp_text = val;
              },
            },
            _plates_temp: {
              get: function () {
                return _plates_temp;
              },
              set: function (val) {
                _plates_temp = val;
              },
            },
            _STATE_scene: {
              get: function () {
                return _STATE_scene;
              },
              set: function (val) {
                _STATE_scene = val;
              },
            },
            _STATE_basic_module: {
              get: function () {
                return _STATE_basic_module;
              },
              set: function (val) {
                _STATE_basic_module = val;
              },
            },
            calculated_width: {
              get: function () {
                return calculated_width;
              },
              set: function (val) {
                calculated_width = val;
              },
            },
            ruler_points: {
              get: function () {
                return ruler_points;
              },
              set: function (val) {
                ruler_points = val;
              },
            },
            _plates_arr: {
              get: function () {
                return _plates_arr;
              },
              set: function (val) {
                _plates_arr = val;
              },
            },
            _STATE_addon_plates: {
              get: function () {
                return _STATE_addon_plates;
              },
              set: function (val) {
                _STATE_addon_plates = val;
              },
            },
            _place_shift: {
              get: function () {
                return _place_shift;
              },
              set: function (val) {
                _place_shift = val;
              },
            },
            _plaсe_shift_z: {
              get: function () {
                return _pla_D1_81e_shift_z;
              },
              set: function (val) {
                _pla_D1_81e_shift_z = val;
              },
            },
            _character_number: {
              get: function () {
                return _character_number;
              },
              set: function (val) {
                _character_number = val;
              },
            },
            _JSON_font_path: {
              get: function () {
                return _JSON_font_path;
              },
              set: function (val) {
                _JSON_font_path = val;
              },
            },
            calculated_height: {
              get: function () {
                return calculated_height;
              },
              set: function (val) {
                calculated_height = val;
              },
            },
            LEG_WIDTH: {
              get: function () {
                return LEG_WIDTH;
              },
              set: function (val) {
                LEG_WIDTH = val;
              },
            },
            _plates_height_limit: {
              get: function () {
                return _plates_height_limit;
              },
              set: function (val) {
                _plates_height_limit = val;
              },
            },
            _STATE_basic_plates: {
              get: function () {
                return _STATE_basic_plates;
              },
              set: function (val) {
                _STATE_basic_plates = val;
              },
            },
            _top_label_single_char: {
              get: function () {
                return _top_label_single_char;
              },
              set: function (val) {
                _top_label_single_char = val;
              },
            },
            _cam_module_target_position_x: {
              get: function () {
                return _cam_module_target_position_x;
              },
              set: function (val) {
                _cam_module_target_position_x = val;
              },
            },
            calculated_depth: {
              get: function () {
                return calculated_depth;
              },
              set: function (val) {
                calculated_depth = val;
              },
            },
            DISTANCE_TO_FLOOR: {
              get: function () {
                return DISTANCE_TO_FLOOR;
              },
              set: function (val) {
                DISTANCE_TO_FLOOR = val;
              },
            },
            _plates_z_step: {
              get: function () {
                return _plates_z_step;
              },
              set: function (val) {
                _plates_z_step = val;
              },
            },
            _3_15_exeption: {
              get: function () {
                return _3_15_exeption;
              },
              set: function (val) {
                _3_15_exeption = val;
              },
            },
            _cam_module_target_position_z: {
              get: function () {
                return _cam_module_target_position_z;
              },
              set: function (val) {
                _cam_module_target_position_z = val;
              },
            },
            ONE_BOX_WIDTH: {
              get: function () {
                return ONE_BOX_WIDTH;
              },
              set: function (val) {
                ONE_BOX_WIDTH = val;
              },
            },
            _plates_x_step: {
              get: function () {
                return _plates_x_step;
              },
              set: function (val) {
                _plates_x_step = val;
              },
            },
            ONE_BOX_HEIGHT: {
              get: function () {
                return ONE_BOX_HEIGHT;
              },
              set: function (val) {
                ONE_BOX_HEIGHT = val;
              },
            },
            _plates_shift: {
              get: function () {
                return _plates_shift;
              },
              set: function (val) {
                _plates_shift = val;
              },
            },
            _cam_position_x: {
              get: function () {
                return _cam_position_x;
              },
              set: function (val) {
                _cam_position_x = val;
              },
            },
            TOP_LABLE_HEIGHT: {
              get: function () {
                return TOP_LABLE_HEIGHT;
              },
              set: function (val) {
                TOP_LABLE_HEIGHT = val;
              },
            },
            _plates_max: {
              get: function () {
                return _plates_max;
              },
              set: function (val) {
                _plates_max = val;
              },
            },
            _top_label_text_area: {
              get: function () {
                return _top_label_text_area;
              },
              set: function (val) {
                _top_label_text_area = val;
              },
            },
            _cam_position_z: {
              get: function () {
                return _cam_position_z;
              },
              set: function (val) {
                _cam_position_z = val;
              },
            },
            _plates_group: {
              get: function () {
                return _plates_group;
              },
              set: function (val) {
                _plates_group = val;
              },
            },
            _cam_state: {
              get: function () {
                return _cam_state;
              },
              set: function (val) {
                _cam_state = val;
              },
            },
            _plates_row_limit: {
              get: function () {
                return _plates_row_limit;
              },
              set: function (val) {
                _plates_row_limit = val;
              },
            },
            _basic_temp_emptyes: {
              get: function () {
                return _basic_temp_emptyes;
              },
              set: function (val) {
                _basic_temp_emptyes = val;
              },
            },
            _counter: {
              get: function () {
                return _counter;
              },
              set: function (val) {
                _counter = val;
              },
            },
            _temp_module: {
              get: function () {
                return _temp_module;
              },
              set: function (val) {
                _temp_module = val;
              },
            },
          }
        );

        setMorphFactor(i, "engraving_plate", 0);
      }
      for (var i_index2 in _plates_basic_arr) {
        let i = _plates_basic_arr[i_index2];
        var VARS = Object.defineProperties(
          {},
          {
            _name: {
              get: function () {
                return _name;
              },
              set: function (val) {
                _name = val;
              },
            },
            _plates_amount: {
              get: function () {
                return _plates_amount;
              },
              set: function (val) {
                _plates_amount = val;
              },
            },
            x_position: {
              get: function () {
                return x_position;
              },
              set: function (val) {
                x_position = val;
              },
            },
            _plates_basic_arr: {
              get: function () {
                return _plates_basic_arr;
              },
              set: function (val) {
                _plates_basic_arr = val;
              },
            },
            _place_type: {
              get: function () {
                return _place_type;
              },
              set: function (val) {
                _place_type = val;
              },
            },
            _G_step_hor: {
              get: function () {
                return _G_step_hor;
              },
              set: function (val) {
                _G_step_hor = val;
              },
            },
            mailbox_obj: {
              get: function () {
                return mailbox_obj;
              },
              set: function (val) {
                mailbox_obj = val;
              },
            },
            _top_lable_x_pos: {
              get: function () {
                return _top_lable_x_pos;
              },
              set: function (val) {
                _top_lable_x_pos = val;
              },
            },
            _cam_update_requests: {
              get: function () {
                return _cam_update_requests;
              },
              set: function (val) {
                _cam_update_requests = val;
              },
            },
            columns: {
              get: function () {
                return columns;
              },
              set: function (val) {
                columns = val;
              },
            },
            row: {
              get: function () {
                return row;
              },
              set: function (val) {
                row = val;
              },
            },
            col: {
              get: function () {
                return col;
              },
              set: function (val) {
                col = val;
              },
            },
            parent: {
              get: function () {
                return parent2;
              },
              set: function (val) {
                parent2 = val;
              },
            },
            template: {
              get: function () {
                return template;
              },
              set: function (val) {
                template = val;
              },
            },
            where: {
              get: function () {
                return where;
              },
              set: function (val) {
                where = val;
              },
            },
            num: {
              get: function () {
                return num;
              },
              set: function (val) {
                num = val;
              },
            },
            promise: {
              get: function () {
                return promise;
              },
              set: function (val) {
                promise = val;
              },
            },
            ruler_object_top: {
              get: function () {
                return ruler_object_top;
              },
              set: function (val) {
                ruler_object_top = val;
              },
            },
            callback: {
              get: function () {
                return callback;
              },
              set: function (val) {
                callback = val;
              },
            },
            visible: {
              get: function () {
                return visible;
              },
              set: function (val) {
                visible = val;
              },
            },
            show_ruler: {
              get: function () {
                return show_ruler;
              },
              set: function (val) {
                show_ruler = val;
              },
            },
            _name_obj: {
              get: function () {
                return _name_obj;
              },
              set: function (val) {
                _name_obj = val;
              },
            },
            _plates_template: {
              get: function () {
                return _plates_template;
              },
              set: function (val) {
                _plates_template = val;
              },
            },
            z_position: {
              get: function () {
                return z_position;
              },
              set: function (val) {
                z_position = val;
              },
            },
            _plates_basic_template: {
              get: function () {
                return _plates_basic_template;
              },
              set: function (val) {
                _plates_basic_template = val;
              },
            },
            _place_key: {
              get: function () {
                return _place_key;
              },
              set: function (val) {
                _place_key = val;
              },
            },
            _G_step_vert: {
              get: function () {
                return _G_step_vert;
              },
              set: function (val) {
                _G_step_vert = val;
              },
            },
            _leg_mouting_offset: {
              get: function () {
                return _leg_mouting_offset;
              },
              set: function (val) {
                _leg_mouting_offset = val;
              },
            },
            _STATE_skeleton: {
              get: function () {
                return _STATE_skeleton;
              },
              set: function (val) {
                _STATE_skeleton = val;
              },
            },
            _top_lable_y_pos: {
              get: function () {
                return _top_lable_y_pos;
              },
              set: function (val) {
                _top_lable_y_pos = val;
              },
            },
            _cam_update_counter: {
              get: function () {
                return _cam_update_counter;
              },
              set: function (val) {
                _cam_update_counter = val;
              },
            },
            j: {
              get: function () {
                return j;
              },
              set: function (val) {
                j = val;
              },
            },
            _zoom_step: {
              get: function () {
                return _zoom_step;
              },
              set: function (val) {
                _zoom_step = val;
              },
            },
            ruler_object_left: {
              get: function () {
                return ruler_object_left;
              },
              set: function (val) {
                ruler_object_left = val;
              },
            },
            _name_basic: {
              get: function () {
                return _name_basic;
              },
              set: function (val) {
                _name_basic = val;
              },
            },
            _plates_x_position: {
              get: function () {
                return _plates_x_position;
              },
              set: function (val) {
                _plates_x_position = val;
              },
            },
            i: {
              get: function () {
                return i;
              },
              set: function (val) {
                i = val;
              },
            },
            _plates_basic_group: {
              get: function () {
                return _plates_basic_group;
              },
              set: function (val) {
                _plates_basic_group = val;
              },
            },
            _place_configuration: {
              get: function () {
                return _place_configuration;
              },
              set: function (val) {
                _place_configuration = val;
              },
            },
            _basic_modules_arr: {
              get: function () {
                return _basic_modules_arr;
              },
              set: function (val) {
                _basic_modules_arr = val;
              },
            },
            _top_lable_z_pos: {
              get: function () {
                return _top_lable_z_pos;
              },
              set: function (val) {
                _top_lable_z_pos = val;
              },
            },
            _anim_running: {
              get: function () {
                return _anim_running;
              },
              set: function (val) {
                _anim_running = val;
              },
            },
            _JSON_placement_rules: {
              get: function () {
                return _JSON_placement_rules;
              },
              set: function (val) {
                _JSON_placement_rules = val;
              },
            },
            ruler_object_bottom: {
              get: function () {
                return ruler_object_bottom;
              },
              set: function (val) {
                ruler_object_bottom = val;
              },
            },
            _name_obj_basic: {
              get: function () {
                return _name_obj_basic;
              },
              set: function (val) {
                _name_obj_basic = val;
              },
            },
            _plates_z_position: {
              get: function () {
                return _plates_z_position;
              },
              set: function (val) {
                _plates_z_position = val;
              },
            },
            _place_direction: {
              get: function () {
                return _place_direction;
              },
              set: function (val) {
                _place_direction = val;
              },
            },
            placeholder_modules_arr: {
              get: function () {
                return placeholder_modules_arr;
              },
              set: function (val) {
                placeholder_modules_arr = val;
              },
            },
            _STATE_addon_module: {
              get: function () {
                return _STATE_addon_module;
              },
              set: function (val) {
                _STATE_addon_module = val;
              },
            },
            _STATE_top_lable: {
              get: function () {
                return _STATE_top_lable;
              },
              set: function (val) {
                _STATE_top_lable = val;
              },
            },
            _top_lable_xyz_scale: {
              get: function () {
                return _top_lable_xyz_scale;
              },
              set: function (val) {
                _top_lable_xyz_scale = val;
              },
            },
            _cam_shift: {
              get: function () {
                return _cam_shift;
              },
              set: function (val) {
                _cam_shift = val;
              },
            },
            _basic_module_id: {
              get: function () {
                return _basic_module_id;
              },
              set: function (val) {
                _basic_module_id = val;
              },
            },
            _temp_text: {
              get: function () {
                return _temp_text;
              },
              set: function (val) {
                _temp_text = val;
              },
            },
            _plates_temp: {
              get: function () {
                return _plates_temp;
              },
              set: function (val) {
                _plates_temp = val;
              },
            },
            _STATE_scene: {
              get: function () {
                return _STATE_scene;
              },
              set: function (val) {
                _STATE_scene = val;
              },
            },
            _STATE_basic_module: {
              get: function () {
                return _STATE_basic_module;
              },
              set: function (val) {
                _STATE_basic_module = val;
              },
            },
            calculated_width: {
              get: function () {
                return calculated_width;
              },
              set: function (val) {
                calculated_width = val;
              },
            },
            ruler_points: {
              get: function () {
                return ruler_points;
              },
              set: function (val) {
                ruler_points = val;
              },
            },
            _plates_arr: {
              get: function () {
                return _plates_arr;
              },
              set: function (val) {
                _plates_arr = val;
              },
            },
            _STATE_addon_plates: {
              get: function () {
                return _STATE_addon_plates;
              },
              set: function (val) {
                _STATE_addon_plates = val;
              },
            },
            _place_shift: {
              get: function () {
                return _place_shift;
              },
              set: function (val) {
                _place_shift = val;
              },
            },
            _plaсe_shift_z: {
              get: function () {
                return _pla_D1_81e_shift_z;
              },
              set: function (val) {
                _pla_D1_81e_shift_z = val;
              },
            },
            _character_number: {
              get: function () {
                return _character_number;
              },
              set: function (val) {
                _character_number = val;
              },
            },
            _JSON_font_path: {
              get: function () {
                return _JSON_font_path;
              },
              set: function (val) {
                _JSON_font_path = val;
              },
            },
            calculated_height: {
              get: function () {
                return calculated_height;
              },
              set: function (val) {
                calculated_height = val;
              },
            },
            LEG_WIDTH: {
              get: function () {
                return LEG_WIDTH;
              },
              set: function (val) {
                LEG_WIDTH = val;
              },
            },
            _plates_height_limit: {
              get: function () {
                return _plates_height_limit;
              },
              set: function (val) {
                _plates_height_limit = val;
              },
            },
            _STATE_basic_plates: {
              get: function () {
                return _STATE_basic_plates;
              },
              set: function (val) {
                _STATE_basic_plates = val;
              },
            },
            _top_label_single_char: {
              get: function () {
                return _top_label_single_char;
              },
              set: function (val) {
                _top_label_single_char = val;
              },
            },
            _cam_module_target_position_x: {
              get: function () {
                return _cam_module_target_position_x;
              },
              set: function (val) {
                _cam_module_target_position_x = val;
              },
            },
            calculated_depth: {
              get: function () {
                return calculated_depth;
              },
              set: function (val) {
                calculated_depth = val;
              },
            },
            DISTANCE_TO_FLOOR: {
              get: function () {
                return DISTANCE_TO_FLOOR;
              },
              set: function (val) {
                DISTANCE_TO_FLOOR = val;
              },
            },
            _plates_z_step: {
              get: function () {
                return _plates_z_step;
              },
              set: function (val) {
                _plates_z_step = val;
              },
            },
            _3_15_exeption: {
              get: function () {
                return _3_15_exeption;
              },
              set: function (val) {
                _3_15_exeption = val;
              },
            },
            _cam_module_target_position_z: {
              get: function () {
                return _cam_module_target_position_z;
              },
              set: function (val) {
                _cam_module_target_position_z = val;
              },
            },
            ONE_BOX_WIDTH: {
              get: function () {
                return ONE_BOX_WIDTH;
              },
              set: function (val) {
                ONE_BOX_WIDTH = val;
              },
            },
            _plates_x_step: {
              get: function () {
                return _plates_x_step;
              },
              set: function (val) {
                _plates_x_step = val;
              },
            },
            ONE_BOX_HEIGHT: {
              get: function () {
                return ONE_BOX_HEIGHT;
              },
              set: function (val) {
                ONE_BOX_HEIGHT = val;
              },
            },
            _plates_shift: {
              get: function () {
                return _plates_shift;
              },
              set: function (val) {
                _plates_shift = val;
              },
            },
            _cam_position_x: {
              get: function () {
                return _cam_position_x;
              },
              set: function (val) {
                _cam_position_x = val;
              },
            },
            TOP_LABLE_HEIGHT: {
              get: function () {
                return TOP_LABLE_HEIGHT;
              },
              set: function (val) {
                TOP_LABLE_HEIGHT = val;
              },
            },
            _plates_max: {
              get: function () {
                return _plates_max;
              },
              set: function (val) {
                _plates_max = val;
              },
            },
            _top_label_text_area: {
              get: function () {
                return _top_label_text_area;
              },
              set: function (val) {
                _top_label_text_area = val;
              },
            },
            _cam_position_z: {
              get: function () {
                return _cam_position_z;
              },
              set: function (val) {
                _cam_position_z = val;
              },
            },
            _plates_group: {
              get: function () {
                return _plates_group;
              },
              set: function (val) {
                _plates_group = val;
              },
            },
            _cam_state: {
              get: function () {
                return _cam_state;
              },
              set: function (val) {
                _cam_state = val;
              },
            },
            _plates_row_limit: {
              get: function () {
                return _plates_row_limit;
              },
              set: function (val) {
                _plates_row_limit = val;
              },
            },
            _basic_temp_emptyes: {
              get: function () {
                return _basic_temp_emptyes;
              },
              set: function (val) {
                _basic_temp_emptyes = val;
              },
            },
            _counter: {
              get: function () {
                return _counter;
              },
              set: function (val) {
                _counter = val;
              },
            },
            _temp_module: {
              get: function () {
                return _temp_module;
              },
              set: function (val) {
                _temp_module = val;
              },
            },
          }
        );

        removeObject(getObjectsFrom(i, "MESH"));
        removeObject(i);
      }
      _plates_basic_arr = [];
      /* configure basic plates */
      if (dictGet(_STATE_basic_plates, "visible")) {
        if (dictGet(_STATE_basic_plates, "type") == "plate") {
          _plates_basic_template = "plate_basic_group";
        } else if (dictGet(_STATE_basic_plates, "type") == "engrave") {
          _plates_basic_template = "engrave_basic_group";
          for (var i_index3 in _basic_modules_arr) {
            let i = _basic_modules_arr[i_index3];
            var VARS = Object.defineProperties(
              {},
              {
                _name: {
                  get: function () {
                    return _name;
                  },
                  set: function (val) {
                    _name = val;
                  },
                },
                _plates_amount: {
                  get: function () {
                    return _plates_amount;
                  },
                  set: function (val) {
                    _plates_amount = val;
                  },
                },
                x_position: {
                  get: function () {
                    return x_position;
                  },
                  set: function (val) {
                    x_position = val;
                  },
                },
                _plates_basic_arr: {
                  get: function () {
                    return _plates_basic_arr;
                  },
                  set: function (val) {
                    _plates_basic_arr = val;
                  },
                },
                _place_type: {
                  get: function () {
                    return _place_type;
                  },
                  set: function (val) {
                    _place_type = val;
                  },
                },
                _G_step_hor: {
                  get: function () {
                    return _G_step_hor;
                  },
                  set: function (val) {
                    _G_step_hor = val;
                  },
                },
                mailbox_obj: {
                  get: function () {
                    return mailbox_obj;
                  },
                  set: function (val) {
                    mailbox_obj = val;
                  },
                },
                _top_lable_x_pos: {
                  get: function () {
                    return _top_lable_x_pos;
                  },
                  set: function (val) {
                    _top_lable_x_pos = val;
                  },
                },
                _cam_update_requests: {
                  get: function () {
                    return _cam_update_requests;
                  },
                  set: function (val) {
                    _cam_update_requests = val;
                  },
                },
                columns: {
                  get: function () {
                    return columns;
                  },
                  set: function (val) {
                    columns = val;
                  },
                },
                row: {
                  get: function () {
                    return row;
                  },
                  set: function (val) {
                    row = val;
                  },
                },
                col: {
                  get: function () {
                    return col;
                  },
                  set: function (val) {
                    col = val;
                  },
                },
                parent: {
                  get: function () {
                    return parent2;
                  },
                  set: function (val) {
                    parent2 = val;
                  },
                },
                template: {
                  get: function () {
                    return template;
                  },
                  set: function (val) {
                    template = val;
                  },
                },
                where: {
                  get: function () {
                    return where;
                  },
                  set: function (val) {
                    where = val;
                  },
                },
                num: {
                  get: function () {
                    return num;
                  },
                  set: function (val) {
                    num = val;
                  },
                },
                promise: {
                  get: function () {
                    return promise;
                  },
                  set: function (val) {
                    promise = val;
                  },
                },
                ruler_object_top: {
                  get: function () {
                    return ruler_object_top;
                  },
                  set: function (val) {
                    ruler_object_top = val;
                  },
                },
                callback: {
                  get: function () {
                    return callback;
                  },
                  set: function (val) {
                    callback = val;
                  },
                },
                visible: {
                  get: function () {
                    return visible;
                  },
                  set: function (val) {
                    visible = val;
                  },
                },
                show_ruler: {
                  get: function () {
                    return show_ruler;
                  },
                  set: function (val) {
                    show_ruler = val;
                  },
                },
                _name_obj: {
                  get: function () {
                    return _name_obj;
                  },
                  set: function (val) {
                    _name_obj = val;
                  },
                },
                _plates_template: {
                  get: function () {
                    return _plates_template;
                  },
                  set: function (val) {
                    _plates_template = val;
                  },
                },
                z_position: {
                  get: function () {
                    return z_position;
                  },
                  set: function (val) {
                    z_position = val;
                  },
                },
                _plates_basic_template: {
                  get: function () {
                    return _plates_basic_template;
                  },
                  set: function (val) {
                    _plates_basic_template = val;
                  },
                },
                _place_key: {
                  get: function () {
                    return _place_key;
                  },
                  set: function (val) {
                    _place_key = val;
                  },
                },
                _G_step_vert: {
                  get: function () {
                    return _G_step_vert;
                  },
                  set: function (val) {
                    _G_step_vert = val;
                  },
                },
                _leg_mouting_offset: {
                  get: function () {
                    return _leg_mouting_offset;
                  },
                  set: function (val) {
                    _leg_mouting_offset = val;
                  },
                },
                _STATE_skeleton: {
                  get: function () {
                    return _STATE_skeleton;
                  },
                  set: function (val) {
                    _STATE_skeleton = val;
                  },
                },
                _top_lable_y_pos: {
                  get: function () {
                    return _top_lable_y_pos;
                  },
                  set: function (val) {
                    _top_lable_y_pos = val;
                  },
                },
                _cam_update_counter: {
                  get: function () {
                    return _cam_update_counter;
                  },
                  set: function (val) {
                    _cam_update_counter = val;
                  },
                },
                j: {
                  get: function () {
                    return j;
                  },
                  set: function (val) {
                    j = val;
                  },
                },
                _zoom_step: {
                  get: function () {
                    return _zoom_step;
                  },
                  set: function (val) {
                    _zoom_step = val;
                  },
                },
                ruler_object_left: {
                  get: function () {
                    return ruler_object_left;
                  },
                  set: function (val) {
                    ruler_object_left = val;
                  },
                },
                _name_basic: {
                  get: function () {
                    return _name_basic;
                  },
                  set: function (val) {
                    _name_basic = val;
                  },
                },
                _plates_x_position: {
                  get: function () {
                    return _plates_x_position;
                  },
                  set: function (val) {
                    _plates_x_position = val;
                  },
                },
                i: {
                  get: function () {
                    return i;
                  },
                  set: function (val) {
                    i = val;
                  },
                },
                _plates_basic_group: {
                  get: function () {
                    return _plates_basic_group;
                  },
                  set: function (val) {
                    _plates_basic_group = val;
                  },
                },
                _place_configuration: {
                  get: function () {
                    return _place_configuration;
                  },
                  set: function (val) {
                    _place_configuration = val;
                  },
                },
                _basic_modules_arr: {
                  get: function () {
                    return _basic_modules_arr;
                  },
                  set: function (val) {
                    _basic_modules_arr = val;
                  },
                },
                _top_lable_z_pos: {
                  get: function () {
                    return _top_lable_z_pos;
                  },
                  set: function (val) {
                    _top_lable_z_pos = val;
                  },
                },
                _anim_running: {
                  get: function () {
                    return _anim_running;
                  },
                  set: function (val) {
                    _anim_running = val;
                  },
                },
                _JSON_placement_rules: {
                  get: function () {
                    return _JSON_placement_rules;
                  },
                  set: function (val) {
                    _JSON_placement_rules = val;
                  },
                },
                ruler_object_bottom: {
                  get: function () {
                    return ruler_object_bottom;
                  },
                  set: function (val) {
                    ruler_object_bottom = val;
                  },
                },
                _name_obj_basic: {
                  get: function () {
                    return _name_obj_basic;
                  },
                  set: function (val) {
                    _name_obj_basic = val;
                  },
                },
                _plates_z_position: {
                  get: function () {
                    return _plates_z_position;
                  },
                  set: function (val) {
                    _plates_z_position = val;
                  },
                },
                _place_direction: {
                  get: function () {
                    return _place_direction;
                  },
                  set: function (val) {
                    _place_direction = val;
                  },
                },
                placeholder_modules_arr: {
                  get: function () {
                    return placeholder_modules_arr;
                  },
                  set: function (val) {
                    placeholder_modules_arr = val;
                  },
                },
                _STATE_addon_module: {
                  get: function () {
                    return _STATE_addon_module;
                  },
                  set: function (val) {
                    _STATE_addon_module = val;
                  },
                },
                _STATE_top_lable: {
                  get: function () {
                    return _STATE_top_lable;
                  },
                  set: function (val) {
                    _STATE_top_lable = val;
                  },
                },
                _top_lable_xyz_scale: {
                  get: function () {
                    return _top_lable_xyz_scale;
                  },
                  set: function (val) {
                    _top_lable_xyz_scale = val;
                  },
                },
                _cam_shift: {
                  get: function () {
                    return _cam_shift;
                  },
                  set: function (val) {
                    _cam_shift = val;
                  },
                },
                _basic_module_id: {
                  get: function () {
                    return _basic_module_id;
                  },
                  set: function (val) {
                    _basic_module_id = val;
                  },
                },
                _temp_text: {
                  get: function () {
                    return _temp_text;
                  },
                  set: function (val) {
                    _temp_text = val;
                  },
                },
                _plates_temp: {
                  get: function () {
                    return _plates_temp;
                  },
                  set: function (val) {
                    _plates_temp = val;
                  },
                },
                _STATE_scene: {
                  get: function () {
                    return _STATE_scene;
                  },
                  set: function (val) {
                    _STATE_scene = val;
                  },
                },
                _STATE_basic_module: {
                  get: function () {
                    return _STATE_basic_module;
                  },
                  set: function (val) {
                    _STATE_basic_module = val;
                  },
                },
                calculated_width: {
                  get: function () {
                    return calculated_width;
                  },
                  set: function (val) {
                    calculated_width = val;
                  },
                },
                ruler_points: {
                  get: function () {
                    return ruler_points;
                  },
                  set: function (val) {
                    ruler_points = val;
                  },
                },
                _plates_arr: {
                  get: function () {
                    return _plates_arr;
                  },
                  set: function (val) {
                    _plates_arr = val;
                  },
                },
                _STATE_addon_plates: {
                  get: function () {
                    return _STATE_addon_plates;
                  },
                  set: function (val) {
                    _STATE_addon_plates = val;
                  },
                },
                _place_shift: {
                  get: function () {
                    return _place_shift;
                  },
                  set: function (val) {
                    _place_shift = val;
                  },
                },
                _plaсe_shift_z: {
                  get: function () {
                    return _pla_D1_81e_shift_z;
                  },
                  set: function (val) {
                    _pla_D1_81e_shift_z = val;
                  },
                },
                _character_number: {
                  get: function () {
                    return _character_number;
                  },
                  set: function (val) {
                    _character_number = val;
                  },
                },
                _JSON_font_path: {
                  get: function () {
                    return _JSON_font_path;
                  },
                  set: function (val) {
                    _JSON_font_path = val;
                  },
                },
                calculated_height: {
                  get: function () {
                    return calculated_height;
                  },
                  set: function (val) {
                    calculated_height = val;
                  },
                },
                LEG_WIDTH: {
                  get: function () {
                    return LEG_WIDTH;
                  },
                  set: function (val) {
                    LEG_WIDTH = val;
                  },
                },
                _plates_height_limit: {
                  get: function () {
                    return _plates_height_limit;
                  },
                  set: function (val) {
                    _plates_height_limit = val;
                  },
                },
                _STATE_basic_plates: {
                  get: function () {
                    return _STATE_basic_plates;
                  },
                  set: function (val) {
                    _STATE_basic_plates = val;
                  },
                },
                _top_label_single_char: {
                  get: function () {
                    return _top_label_single_char;
                  },
                  set: function (val) {
                    _top_label_single_char = val;
                  },
                },
                _cam_module_target_position_x: {
                  get: function () {
                    return _cam_module_target_position_x;
                  },
                  set: function (val) {
                    _cam_module_target_position_x = val;
                  },
                },
                calculated_depth: {
                  get: function () {
                    return calculated_depth;
                  },
                  set: function (val) {
                    calculated_depth = val;
                  },
                },
                DISTANCE_TO_FLOOR: {
                  get: function () {
                    return DISTANCE_TO_FLOOR;
                  },
                  set: function (val) {
                    DISTANCE_TO_FLOOR = val;
                  },
                },
                _plates_z_step: {
                  get: function () {
                    return _plates_z_step;
                  },
                  set: function (val) {
                    _plates_z_step = val;
                  },
                },
                _3_15_exeption: {
                  get: function () {
                    return _3_15_exeption;
                  },
                  set: function (val) {
                    _3_15_exeption = val;
                  },
                },
                _cam_module_target_position_z: {
                  get: function () {
                    return _cam_module_target_position_z;
                  },
                  set: function (val) {
                    _cam_module_target_position_z = val;
                  },
                },
                ONE_BOX_WIDTH: {
                  get: function () {
                    return ONE_BOX_WIDTH;
                  },
                  set: function (val) {
                    ONE_BOX_WIDTH = val;
                  },
                },
                _plates_x_step: {
                  get: function () {
                    return _plates_x_step;
                  },
                  set: function (val) {
                    _plates_x_step = val;
                  },
                },
                ONE_BOX_HEIGHT: {
                  get: function () {
                    return ONE_BOX_HEIGHT;
                  },
                  set: function (val) {
                    ONE_BOX_HEIGHT = val;
                  },
                },
                _plates_shift: {
                  get: function () {
                    return _plates_shift;
                  },
                  set: function (val) {
                    _plates_shift = val;
                  },
                },
                _cam_position_x: {
                  get: function () {
                    return _cam_position_x;
                  },
                  set: function (val) {
                    _cam_position_x = val;
                  },
                },
                TOP_LABLE_HEIGHT: {
                  get: function () {
                    return TOP_LABLE_HEIGHT;
                  },
                  set: function (val) {
                    TOP_LABLE_HEIGHT = val;
                  },
                },
                _plates_max: {
                  get: function () {
                    return _plates_max;
                  },
                  set: function (val) {
                    _plates_max = val;
                  },
                },
                _top_label_text_area: {
                  get: function () {
                    return _top_label_text_area;
                  },
                  set: function (val) {
                    _top_label_text_area = val;
                  },
                },
                _cam_position_z: {
                  get: function () {
                    return _cam_position_z;
                  },
                  set: function (val) {
                    _cam_position_z = val;
                  },
                },
                _plates_group: {
                  get: function () {
                    return _plates_group;
                  },
                  set: function (val) {
                    _plates_group = val;
                  },
                },
                _cam_state: {
                  get: function () {
                    return _cam_state;
                  },
                  set: function (val) {
                    _cam_state = val;
                  },
                },
                _plates_row_limit: {
                  get: function () {
                    return _plates_row_limit;
                  },
                  set: function (val) {
                    _plates_row_limit = val;
                  },
                },
                _basic_temp_emptyes: {
                  get: function () {
                    return _basic_temp_emptyes;
                  },
                  set: function (val) {
                    _basic_temp_emptyes = val;
                  },
                },
                _counter: {
                  get: function () {
                    return _counter;
                  },
                  set: function (val) {
                    _counter = val;
                  },
                },
                _temp_module: {
                  get: function () {
                    return _temp_module;
                  },
                  set: function (val) {
                    _temp_module = val;
                  },
                },
              }
            );

            setMorphFactor(i, "engraving_plate", 1);
          }
        }
        for (var i_index4 in _basic_modules_arr) {
          let i = _basic_modules_arr[i_index4];
          var VARS = Object.defineProperties(
            {},
            {
              _name: {
                get: function () {
                  return _name;
                },
                set: function (val) {
                  _name = val;
                },
              },
              _plates_amount: {
                get: function () {
                  return _plates_amount;
                },
                set: function (val) {
                  _plates_amount = val;
                },
              },
              x_position: {
                get: function () {
                  return x_position;
                },
                set: function (val) {
                  x_position = val;
                },
              },
              _plates_basic_arr: {
                get: function () {
                  return _plates_basic_arr;
                },
                set: function (val) {
                  _plates_basic_arr = val;
                },
              },
              _place_type: {
                get: function () {
                  return _place_type;
                },
                set: function (val) {
                  _place_type = val;
                },
              },
              _G_step_hor: {
                get: function () {
                  return _G_step_hor;
                },
                set: function (val) {
                  _G_step_hor = val;
                },
              },
              mailbox_obj: {
                get: function () {
                  return mailbox_obj;
                },
                set: function (val) {
                  mailbox_obj = val;
                },
              },
              _top_lable_x_pos: {
                get: function () {
                  return _top_lable_x_pos;
                },
                set: function (val) {
                  _top_lable_x_pos = val;
                },
              },
              _cam_update_requests: {
                get: function () {
                  return _cam_update_requests;
                },
                set: function (val) {
                  _cam_update_requests = val;
                },
              },
              columns: {
                get: function () {
                  return columns;
                },
                set: function (val) {
                  columns = val;
                },
              },
              row: {
                get: function () {
                  return row;
                },
                set: function (val) {
                  row = val;
                },
              },
              col: {
                get: function () {
                  return col;
                },
                set: function (val) {
                  col = val;
                },
              },
              parent: {
                get: function () {
                  return parent2;
                },
                set: function (val) {
                  parent2 = val;
                },
              },
              template: {
                get: function () {
                  return template;
                },
                set: function (val) {
                  template = val;
                },
              },
              where: {
                get: function () {
                  return where;
                },
                set: function (val) {
                  where = val;
                },
              },
              num: {
                get: function () {
                  return num;
                },
                set: function (val) {
                  num = val;
                },
              },
              promise: {
                get: function () {
                  return promise;
                },
                set: function (val) {
                  promise = val;
                },
              },
              ruler_object_top: {
                get: function () {
                  return ruler_object_top;
                },
                set: function (val) {
                  ruler_object_top = val;
                },
              },
              callback: {
                get: function () {
                  return callback;
                },
                set: function (val) {
                  callback = val;
                },
              },
              visible: {
                get: function () {
                  return visible;
                },
                set: function (val) {
                  visible = val;
                },
              },
              show_ruler: {
                get: function () {
                  return show_ruler;
                },
                set: function (val) {
                  show_ruler = val;
                },
              },
              _name_obj: {
                get: function () {
                  return _name_obj;
                },
                set: function (val) {
                  _name_obj = val;
                },
              },
              _plates_template: {
                get: function () {
                  return _plates_template;
                },
                set: function (val) {
                  _plates_template = val;
                },
              },
              z_position: {
                get: function () {
                  return z_position;
                },
                set: function (val) {
                  z_position = val;
                },
              },
              _plates_basic_template: {
                get: function () {
                  return _plates_basic_template;
                },
                set: function (val) {
                  _plates_basic_template = val;
                },
              },
              _place_key: {
                get: function () {
                  return _place_key;
                },
                set: function (val) {
                  _place_key = val;
                },
              },
              _G_step_vert: {
                get: function () {
                  return _G_step_vert;
                },
                set: function (val) {
                  _G_step_vert = val;
                },
              },
              _leg_mouting_offset: {
                get: function () {
                  return _leg_mouting_offset;
                },
                set: function (val) {
                  _leg_mouting_offset = val;
                },
              },
              _STATE_skeleton: {
                get: function () {
                  return _STATE_skeleton;
                },
                set: function (val) {
                  _STATE_skeleton = val;
                },
              },
              _top_lable_y_pos: {
                get: function () {
                  return _top_lable_y_pos;
                },
                set: function (val) {
                  _top_lable_y_pos = val;
                },
              },
              _cam_update_counter: {
                get: function () {
                  return _cam_update_counter;
                },
                set: function (val) {
                  _cam_update_counter = val;
                },
              },
              j: {
                get: function () {
                  return j;
                },
                set: function (val) {
                  j = val;
                },
              },
              _zoom_step: {
                get: function () {
                  return _zoom_step;
                },
                set: function (val) {
                  _zoom_step = val;
                },
              },
              ruler_object_left: {
                get: function () {
                  return ruler_object_left;
                },
                set: function (val) {
                  ruler_object_left = val;
                },
              },
              _name_basic: {
                get: function () {
                  return _name_basic;
                },
                set: function (val) {
                  _name_basic = val;
                },
              },
              _plates_x_position: {
                get: function () {
                  return _plates_x_position;
                },
                set: function (val) {
                  _plates_x_position = val;
                },
              },
              i: {
                get: function () {
                  return i;
                },
                set: function (val) {
                  i = val;
                },
              },
              _plates_basic_group: {
                get: function () {
                  return _plates_basic_group;
                },
                set: function (val) {
                  _plates_basic_group = val;
                },
              },
              _place_configuration: {
                get: function () {
                  return _place_configuration;
                },
                set: function (val) {
                  _place_configuration = val;
                },
              },
              _basic_modules_arr: {
                get: function () {
                  return _basic_modules_arr;
                },
                set: function (val) {
                  _basic_modules_arr = val;
                },
              },
              _top_lable_z_pos: {
                get: function () {
                  return _top_lable_z_pos;
                },
                set: function (val) {
                  _top_lable_z_pos = val;
                },
              },
              _anim_running: {
                get: function () {
                  return _anim_running;
                },
                set: function (val) {
                  _anim_running = val;
                },
              },
              _JSON_placement_rules: {
                get: function () {
                  return _JSON_placement_rules;
                },
                set: function (val) {
                  _JSON_placement_rules = val;
                },
              },
              ruler_object_bottom: {
                get: function () {
                  return ruler_object_bottom;
                },
                set: function (val) {
                  ruler_object_bottom = val;
                },
              },
              _name_obj_basic: {
                get: function () {
                  return _name_obj_basic;
                },
                set: function (val) {
                  _name_obj_basic = val;
                },
              },
              _plates_z_position: {
                get: function () {
                  return _plates_z_position;
                },
                set: function (val) {
                  _plates_z_position = val;
                },
              },
              _place_direction: {
                get: function () {
                  return _place_direction;
                },
                set: function (val) {
                  _place_direction = val;
                },
              },
              placeholder_modules_arr: {
                get: function () {
                  return placeholder_modules_arr;
                },
                set: function (val) {
                  placeholder_modules_arr = val;
                },
              },
              _STATE_addon_module: {
                get: function () {
                  return _STATE_addon_module;
                },
                set: function (val) {
                  _STATE_addon_module = val;
                },
              },
              _STATE_top_lable: {
                get: function () {
                  return _STATE_top_lable;
                },
                set: function (val) {
                  _STATE_top_lable = val;
                },
              },
              _top_lable_xyz_scale: {
                get: function () {
                  return _top_lable_xyz_scale;
                },
                set: function (val) {
                  _top_lable_xyz_scale = val;
                },
              },
              _cam_shift: {
                get: function () {
                  return _cam_shift;
                },
                set: function (val) {
                  _cam_shift = val;
                },
              },
              _basic_module_id: {
                get: function () {
                  return _basic_module_id;
                },
                set: function (val) {
                  _basic_module_id = val;
                },
              },
              _temp_text: {
                get: function () {
                  return _temp_text;
                },
                set: function (val) {
                  _temp_text = val;
                },
              },
              _plates_temp: {
                get: function () {
                  return _plates_temp;
                },
                set: function (val) {
                  _plates_temp = val;
                },
              },
              _STATE_scene: {
                get: function () {
                  return _STATE_scene;
                },
                set: function (val) {
                  _STATE_scene = val;
                },
              },
              _STATE_basic_module: {
                get: function () {
                  return _STATE_basic_module;
                },
                set: function (val) {
                  _STATE_basic_module = val;
                },
              },
              calculated_width: {
                get: function () {
                  return calculated_width;
                },
                set: function (val) {
                  calculated_width = val;
                },
              },
              ruler_points: {
                get: function () {
                  return ruler_points;
                },
                set: function (val) {
                  ruler_points = val;
                },
              },
              _plates_arr: {
                get: function () {
                  return _plates_arr;
                },
                set: function (val) {
                  _plates_arr = val;
                },
              },
              _STATE_addon_plates: {
                get: function () {
                  return _STATE_addon_plates;
                },
                set: function (val) {
                  _STATE_addon_plates = val;
                },
              },
              _place_shift: {
                get: function () {
                  return _place_shift;
                },
                set: function (val) {
                  _place_shift = val;
                },
              },
              _plaсe_shift_z: {
                get: function () {
                  return _pla_D1_81e_shift_z;
                },
                set: function (val) {
                  _pla_D1_81e_shift_z = val;
                },
              },
              _character_number: {
                get: function () {
                  return _character_number;
                },
                set: function (val) {
                  _character_number = val;
                },
              },
              _JSON_font_path: {
                get: function () {
                  return _JSON_font_path;
                },
                set: function (val) {
                  _JSON_font_path = val;
                },
              },
              calculated_height: {
                get: function () {
                  return calculated_height;
                },
                set: function (val) {
                  calculated_height = val;
                },
              },
              LEG_WIDTH: {
                get: function () {
                  return LEG_WIDTH;
                },
                set: function (val) {
                  LEG_WIDTH = val;
                },
              },
              _plates_height_limit: {
                get: function () {
                  return _plates_height_limit;
                },
                set: function (val) {
                  _plates_height_limit = val;
                },
              },
              _STATE_basic_plates: {
                get: function () {
                  return _STATE_basic_plates;
                },
                set: function (val) {
                  _STATE_basic_plates = val;
                },
              },
              _top_label_single_char: {
                get: function () {
                  return _top_label_single_char;
                },
                set: function (val) {
                  _top_label_single_char = val;
                },
              },
              _cam_module_target_position_x: {
                get: function () {
                  return _cam_module_target_position_x;
                },
                set: function (val) {
                  _cam_module_target_position_x = val;
                },
              },
              calculated_depth: {
                get: function () {
                  return calculated_depth;
                },
                set: function (val) {
                  calculated_depth = val;
                },
              },
              DISTANCE_TO_FLOOR: {
                get: function () {
                  return DISTANCE_TO_FLOOR;
                },
                set: function (val) {
                  DISTANCE_TO_FLOOR = val;
                },
              },
              _plates_z_step: {
                get: function () {
                  return _plates_z_step;
                },
                set: function (val) {
                  _plates_z_step = val;
                },
              },
              _3_15_exeption: {
                get: function () {
                  return _3_15_exeption;
                },
                set: function (val) {
                  _3_15_exeption = val;
                },
              },
              _cam_module_target_position_z: {
                get: function () {
                  return _cam_module_target_position_z;
                },
                set: function (val) {
                  _cam_module_target_position_z = val;
                },
              },
              ONE_BOX_WIDTH: {
                get: function () {
                  return ONE_BOX_WIDTH;
                },
                set: function (val) {
                  ONE_BOX_WIDTH = val;
                },
              },
              _plates_x_step: {
                get: function () {
                  return _plates_x_step;
                },
                set: function (val) {
                  _plates_x_step = val;
                },
              },
              ONE_BOX_HEIGHT: {
                get: function () {
                  return ONE_BOX_HEIGHT;
                },
                set: function (val) {
                  ONE_BOX_HEIGHT = val;
                },
              },
              _plates_shift: {
                get: function () {
                  return _plates_shift;
                },
                set: function (val) {
                  _plates_shift = val;
                },
              },
              _cam_position_x: {
                get: function () {
                  return _cam_position_x;
                },
                set: function (val) {
                  _cam_position_x = val;
                },
              },
              TOP_LABLE_HEIGHT: {
                get: function () {
                  return TOP_LABLE_HEIGHT;
                },
                set: function (val) {
                  TOP_LABLE_HEIGHT = val;
                },
              },
              _plates_max: {
                get: function () {
                  return _plates_max;
                },
                set: function (val) {
                  _plates_max = val;
                },
              },
              _top_label_text_area: {
                get: function () {
                  return _top_label_text_area;
                },
                set: function (val) {
                  _top_label_text_area = val;
                },
              },
              _cam_position_z: {
                get: function () {
                  return _cam_position_z;
                },
                set: function (val) {
                  _cam_position_z = val;
                },
              },
              _plates_group: {
                get: function () {
                  return _plates_group;
                },
                set: function (val) {
                  _plates_group = val;
                },
              },
              _cam_state: {
                get: function () {
                  return _cam_state;
                },
                set: function (val) {
                  _cam_state = val;
                },
              },
              _plates_row_limit: {
                get: function () {
                  return _plates_row_limit;
                },
                set: function (val) {
                  _plates_row_limit = val;
                },
              },
              _basic_temp_emptyes: {
                get: function () {
                  return _basic_temp_emptyes;
                },
                set: function (val) {
                  _basic_temp_emptyes = val;
                },
              },
              _counter: {
                get: function () {
                  return _counter;
                },
                set: function (val) {
                  _counter = val;
                },
              },
              _temp_module: {
                get: function () {
                  return _temp_module;
                },
                set: function (val) {
                  _temp_module = val;
                },
              },
            }
          );

          _plates_basic_group = [
            "plate_group_",
            _basic_modules_arr.indexOf(i) + 1,
            "_basic",
          ].join("");
          createObject(
            "EMPTY",
            _plates_basic_group,
            0,
            0,
            0,
            0,
            0,
            0,
            "PERSPECTIVE",
            "AMBIENT",
            0
          );
          clone_group(
            _plates_basic_group,
            _plates_basic_template,
            "_basic",
            _basic_modules_arr.indexOf(i) + 1
          );
          setObjTransform(
            _plates_basic_group,
            false,
            "position",
            [
              getObjTransform(i, false, "position", "x"),
              getObjTransform(i, false, "position", "y"),
              getObjTransform(i, false, "position", "z"),
            ],
            false
          );
          _plates_basic_arr.push(_plates_basic_group);
        }
      }
    }

    // show and hide puzzles
    function changeVis(objSelector, bool) {
      var objNames = retrieveObjectNames(objSelector);

      for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i];
        if (!objName) continue;
        var obj = getObjectByName(objName);
        if (!obj) continue;
        obj.visible = bool;
        obj.resolveMultiMaterial().forEach(function (objR) {
          objR.visible = bool;
        });
      }
    }

    // Describe this function...
    function configure_addon_plates() {
      /* zero */
      for (let i = 0; i <= 12; i++) {
        var VARS = Object.defineProperties(
          {},
          {
            _name: {
              get: function () {
                return _name;
              },
              set: function (val) {
                _name = val;
              },
            },
            _plates_amount: {
              get: function () {
                return _plates_amount;
              },
              set: function (val) {
                _plates_amount = val;
              },
            },
            x_position: {
              get: function () {
                return x_position;
              },
              set: function (val) {
                x_position = val;
              },
            },
            _plates_basic_arr: {
              get: function () {
                return _plates_basic_arr;
              },
              set: function (val) {
                _plates_basic_arr = val;
              },
            },
            _place_type: {
              get: function () {
                return _place_type;
              },
              set: function (val) {
                _place_type = val;
              },
            },
            _G_step_hor: {
              get: function () {
                return _G_step_hor;
              },
              set: function (val) {
                _G_step_hor = val;
              },
            },
            mailbox_obj: {
              get: function () {
                return mailbox_obj;
              },
              set: function (val) {
                mailbox_obj = val;
              },
            },
            _top_lable_x_pos: {
              get: function () {
                return _top_lable_x_pos;
              },
              set: function (val) {
                _top_lable_x_pos = val;
              },
            },
            _cam_update_requests: {
              get: function () {
                return _cam_update_requests;
              },
              set: function (val) {
                _cam_update_requests = val;
              },
            },
            columns: {
              get: function () {
                return columns;
              },
              set: function (val) {
                columns = val;
              },
            },
            row: {
              get: function () {
                return row;
              },
              set: function (val) {
                row = val;
              },
            },
            col: {
              get: function () {
                return col;
              },
              set: function (val) {
                col = val;
              },
            },
            parent: {
              get: function () {
                return parent2;
              },
              set: function (val) {
                parent2 = val;
              },
            },
            template: {
              get: function () {
                return template;
              },
              set: function (val) {
                template = val;
              },
            },
            where: {
              get: function () {
                return where;
              },
              set: function (val) {
                where = val;
              },
            },
            num: {
              get: function () {
                return num;
              },
              set: function (val) {
                num = val;
              },
            },
            promise: {
              get: function () {
                return promise;
              },
              set: function (val) {
                promise = val;
              },
            },
            ruler_object_top: {
              get: function () {
                return ruler_object_top;
              },
              set: function (val) {
                ruler_object_top = val;
              },
            },
            callback: {
              get: function () {
                return callback;
              },
              set: function (val) {
                callback = val;
              },
            },
            visible: {
              get: function () {
                return visible;
              },
              set: function (val) {
                visible = val;
              },
            },
            show_ruler: {
              get: function () {
                return show_ruler;
              },
              set: function (val) {
                show_ruler = val;
              },
            },
            _name_obj: {
              get: function () {
                return _name_obj;
              },
              set: function (val) {
                _name_obj = val;
              },
            },
            _plates_template: {
              get: function () {
                return _plates_template;
              },
              set: function (val) {
                _plates_template = val;
              },
            },
            z_position: {
              get: function () {
                return z_position;
              },
              set: function (val) {
                z_position = val;
              },
            },
            _plates_basic_template: {
              get: function () {
                return _plates_basic_template;
              },
              set: function (val) {
                _plates_basic_template = val;
              },
            },
            _place_key: {
              get: function () {
                return _place_key;
              },
              set: function (val) {
                _place_key = val;
              },
            },
            _G_step_vert: {
              get: function () {
                return _G_step_vert;
              },
              set: function (val) {
                _G_step_vert = val;
              },
            },
            _leg_mouting_offset: {
              get: function () {
                return _leg_mouting_offset;
              },
              set: function (val) {
                _leg_mouting_offset = val;
              },
            },
            _STATE_skeleton: {
              get: function () {
                return _STATE_skeleton;
              },
              set: function (val) {
                _STATE_skeleton = val;
              },
            },
            _top_lable_y_pos: {
              get: function () {
                return _top_lable_y_pos;
              },
              set: function (val) {
                _top_lable_y_pos = val;
              },
            },
            _cam_update_counter: {
              get: function () {
                return _cam_update_counter;
              },
              set: function (val) {
                _cam_update_counter = val;
              },
            },
            j: {
              get: function () {
                return j;
              },
              set: function (val) {
                j = val;
              },
            },
            _zoom_step: {
              get: function () {
                return _zoom_step;
              },
              set: function (val) {
                _zoom_step = val;
              },
            },
            ruler_object_left: {
              get: function () {
                return ruler_object_left;
              },
              set: function (val) {
                ruler_object_left = val;
              },
            },
            _name_basic: {
              get: function () {
                return _name_basic;
              },
              set: function (val) {
                _name_basic = val;
              },
            },
            _plates_x_position: {
              get: function () {
                return _plates_x_position;
              },
              set: function (val) {
                _plates_x_position = val;
              },
            },
            i: {
              get: function () {
                return i;
              },
              set: function (val) {
                i = val;
              },
            },
            _plates_basic_group: {
              get: function () {
                return _plates_basic_group;
              },
              set: function (val) {
                _plates_basic_group = val;
              },
            },
            _place_configuration: {
              get: function () {
                return _place_configuration;
              },
              set: function (val) {
                _place_configuration = val;
              },
            },
            _basic_modules_arr: {
              get: function () {
                return _basic_modules_arr;
              },
              set: function (val) {
                _basic_modules_arr = val;
              },
            },
            _top_lable_z_pos: {
              get: function () {
                return _top_lable_z_pos;
              },
              set: function (val) {
                _top_lable_z_pos = val;
              },
            },
            _anim_running: {
              get: function () {
                return _anim_running;
              },
              set: function (val) {
                _anim_running = val;
              },
            },
            _JSON_placement_rules: {
              get: function () {
                return _JSON_placement_rules;
              },
              set: function (val) {
                _JSON_placement_rules = val;
              },
            },
            ruler_object_bottom: {
              get: function () {
                return ruler_object_bottom;
              },
              set: function (val) {
                ruler_object_bottom = val;
              },
            },
            _name_obj_basic: {
              get: function () {
                return _name_obj_basic;
              },
              set: function (val) {
                _name_obj_basic = val;
              },
            },
            _plates_z_position: {
              get: function () {
                return _plates_z_position;
              },
              set: function (val) {
                _plates_z_position = val;
              },
            },
            _place_direction: {
              get: function () {
                return _place_direction;
              },
              set: function (val) {
                _place_direction = val;
              },
            },
            placeholder_modules_arr: {
              get: function () {
                return placeholder_modules_arr;
              },
              set: function (val) {
                placeholder_modules_arr = val;
              },
            },
            _STATE_addon_module: {
              get: function () {
                return _STATE_addon_module;
              },
              set: function (val) {
                _STATE_addon_module = val;
              },
            },
            _STATE_top_lable: {
              get: function () {
                return _STATE_top_lable;
              },
              set: function (val) {
                _STATE_top_lable = val;
              },
            },
            _top_lable_xyz_scale: {
              get: function () {
                return _top_lable_xyz_scale;
              },
              set: function (val) {
                _top_lable_xyz_scale = val;
              },
            },
            _cam_shift: {
              get: function () {
                return _cam_shift;
              },
              set: function (val) {
                _cam_shift = val;
              },
            },
            _basic_module_id: {
              get: function () {
                return _basic_module_id;
              },
              set: function (val) {
                _basic_module_id = val;
              },
            },
            _temp_text: {
              get: function () {
                return _temp_text;
              },
              set: function (val) {
                _temp_text = val;
              },
            },
            _plates_temp: {
              get: function () {
                return _plates_temp;
              },
              set: function (val) {
                _plates_temp = val;
              },
            },
            _STATE_scene: {
              get: function () {
                return _STATE_scene;
              },
              set: function (val) {
                _STATE_scene = val;
              },
            },
            _STATE_basic_module: {
              get: function () {
                return _STATE_basic_module;
              },
              set: function (val) {
                _STATE_basic_module = val;
              },
            },
            calculated_width: {
              get: function () {
                return calculated_width;
              },
              set: function (val) {
                calculated_width = val;
              },
            },
            ruler_points: {
              get: function () {
                return ruler_points;
              },
              set: function (val) {
                ruler_points = val;
              },
            },
            _plates_arr: {
              get: function () {
                return _plates_arr;
              },
              set: function (val) {
                _plates_arr = val;
              },
            },
            _STATE_addon_plates: {
              get: function () {
                return _STATE_addon_plates;
              },
              set: function (val) {
                _STATE_addon_plates = val;
              },
            },
            _place_shift: {
              get: function () {
                return _place_shift;
              },
              set: function (val) {
                _place_shift = val;
              },
            },
            _plaсe_shift_z: {
              get: function () {
                return _pla_D1_81e_shift_z;
              },
              set: function (val) {
                _pla_D1_81e_shift_z = val;
              },
            },
            _character_number: {
              get: function () {
                return _character_number;
              },
              set: function (val) {
                _character_number = val;
              },
            },
            _JSON_font_path: {
              get: function () {
                return _JSON_font_path;
              },
              set: function (val) {
                _JSON_font_path = val;
              },
            },
            calculated_height: {
              get: function () {
                return calculated_height;
              },
              set: function (val) {
                calculated_height = val;
              },
            },
            LEG_WIDTH: {
              get: function () {
                return LEG_WIDTH;
              },
              set: function (val) {
                LEG_WIDTH = val;
              },
            },
            _plates_height_limit: {
              get: function () {
                return _plates_height_limit;
              },
              set: function (val) {
                _plates_height_limit = val;
              },
            },
            _STATE_basic_plates: {
              get: function () {
                return _STATE_basic_plates;
              },
              set: function (val) {
                _STATE_basic_plates = val;
              },
            },
            _top_label_single_char: {
              get: function () {
                return _top_label_single_char;
              },
              set: function (val) {
                _top_label_single_char = val;
              },
            },
            _cam_module_target_position_x: {
              get: function () {
                return _cam_module_target_position_x;
              },
              set: function (val) {
                _cam_module_target_position_x = val;
              },
            },
            calculated_depth: {
              get: function () {
                return calculated_depth;
              },
              set: function (val) {
                calculated_depth = val;
              },
            },
            DISTANCE_TO_FLOOR: {
              get: function () {
                return DISTANCE_TO_FLOOR;
              },
              set: function (val) {
                DISTANCE_TO_FLOOR = val;
              },
            },
            _plates_z_step: {
              get: function () {
                return _plates_z_step;
              },
              set: function (val) {
                _plates_z_step = val;
              },
            },
            _3_15_exeption: {
              get: function () {
                return _3_15_exeption;
              },
              set: function (val) {
                _3_15_exeption = val;
              },
            },
            _cam_module_target_position_z: {
              get: function () {
                return _cam_module_target_position_z;
              },
              set: function (val) {
                _cam_module_target_position_z = val;
              },
            },
            ONE_BOX_WIDTH: {
              get: function () {
                return ONE_BOX_WIDTH;
              },
              set: function (val) {
                ONE_BOX_WIDTH = val;
              },
            },
            _plates_x_step: {
              get: function () {
                return _plates_x_step;
              },
              set: function (val) {
                _plates_x_step = val;
              },
            },
            ONE_BOX_HEIGHT: {
              get: function () {
                return ONE_BOX_HEIGHT;
              },
              set: function (val) {
                ONE_BOX_HEIGHT = val;
              },
            },
            _plates_shift: {
              get: function () {
                return _plates_shift;
              },
              set: function (val) {
                _plates_shift = val;
              },
            },
            _cam_position_x: {
              get: function () {
                return _cam_position_x;
              },
              set: function (val) {
                _cam_position_x = val;
              },
            },
            TOP_LABLE_HEIGHT: {
              get: function () {
                return TOP_LABLE_HEIGHT;
              },
              set: function (val) {
                TOP_LABLE_HEIGHT = val;
              },
            },
            _plates_max: {
              get: function () {
                return _plates_max;
              },
              set: function (val) {
                _plates_max = val;
              },
            },
            _top_label_text_area: {
              get: function () {
                return _top_label_text_area;
              },
              set: function (val) {
                _top_label_text_area = val;
              },
            },
            _cam_position_z: {
              get: function () {
                return _cam_position_z;
              },
              set: function (val) {
                _cam_position_z = val;
              },
            },
            _plates_group: {
              get: function () {
                return _plates_group;
              },
              set: function (val) {
                _plates_group = val;
              },
            },
            _cam_state: {
              get: function () {
                return _cam_state;
              },
              set: function (val) {
                _cam_state = val;
              },
            },
            _plates_row_limit: {
              get: function () {
                return _plates_row_limit;
              },
              set: function (val) {
                _plates_row_limit = val;
              },
            },
            _basic_temp_emptyes: {
              get: function () {
                return _basic_temp_emptyes;
              },
              set: function (val) {
                _basic_temp_emptyes = val;
              },
            },
            _counter: {
              get: function () {
                return _counter;
              },
              set: function (val) {
                _counter = val;
              },
            },
            _temp_module: {
              get: function () {
                return _temp_module;
              },
              set: function (val) {
                _temp_module = val;
              },
            },
          }
        );

        setMorphFactor("addon_module", "engraving_" + String(i), 0);
        setMorphFactor("ring_buttons_module", "engraving_" + String(i), 0);
      }
      for (var i_index5 in _plates_arr) {
        let i = _plates_arr[i_index5];
        var VARS = Object.defineProperties(
          {},
          {
            _name: {
              get: function () {
                return _name;
              },
              set: function (val) {
                _name = val;
              },
            },
            _plates_amount: {
              get: function () {
                return _plates_amount;
              },
              set: function (val) {
                _plates_amount = val;
              },
            },
            x_position: {
              get: function () {
                return x_position;
              },
              set: function (val) {
                x_position = val;
              },
            },
            _plates_basic_arr: {
              get: function () {
                return _plates_basic_arr;
              },
              set: function (val) {
                _plates_basic_arr = val;
              },
            },
            _place_type: {
              get: function () {
                return _place_type;
              },
              set: function (val) {
                _place_type = val;
              },
            },
            _G_step_hor: {
              get: function () {
                return _G_step_hor;
              },
              set: function (val) {
                _G_step_hor = val;
              },
            },
            mailbox_obj: {
              get: function () {
                return mailbox_obj;
              },
              set: function (val) {
                mailbox_obj = val;
              },
            },
            _top_lable_x_pos: {
              get: function () {
                return _top_lable_x_pos;
              },
              set: function (val) {
                _top_lable_x_pos = val;
              },
            },
            _cam_update_requests: {
              get: function () {
                return _cam_update_requests;
              },
              set: function (val) {
                _cam_update_requests = val;
              },
            },
            columns: {
              get: function () {
                return columns;
              },
              set: function (val) {
                columns = val;
              },
            },
            row: {
              get: function () {
                return row;
              },
              set: function (val) {
                row = val;
              },
            },
            col: {
              get: function () {
                return col;
              },
              set: function (val) {
                col = val;
              },
            },
            parent: {
              get: function () {
                return parent2;
              },
              set: function (val) {
                parent2 = val;
              },
            },
            template: {
              get: function () {
                return template;
              },
              set: function (val) {
                template = val;
              },
            },
            where: {
              get: function () {
                return where;
              },
              set: function (val) {
                where = val;
              },
            },
            num: {
              get: function () {
                return num;
              },
              set: function (val) {
                num = val;
              },
            },
            promise: {
              get: function () {
                return promise;
              },
              set: function (val) {
                promise = val;
              },
            },
            ruler_object_top: {
              get: function () {
                return ruler_object_top;
              },
              set: function (val) {
                ruler_object_top = val;
              },
            },
            callback: {
              get: function () {
                return callback;
              },
              set: function (val) {
                callback = val;
              },
            },
            visible: {
              get: function () {
                return visible;
              },
              set: function (val) {
                visible = val;
              },
            },
            show_ruler: {
              get: function () {
                return show_ruler;
              },
              set: function (val) {
                show_ruler = val;
              },
            },
            _name_obj: {
              get: function () {
                return _name_obj;
              },
              set: function (val) {
                _name_obj = val;
              },
            },
            _plates_template: {
              get: function () {
                return _plates_template;
              },
              set: function (val) {
                _plates_template = val;
              },
            },
            z_position: {
              get: function () {
                return z_position;
              },
              set: function (val) {
                z_position = val;
              },
            },
            _plates_basic_template: {
              get: function () {
                return _plates_basic_template;
              },
              set: function (val) {
                _plates_basic_template = val;
              },
            },
            _place_key: {
              get: function () {
                return _place_key;
              },
              set: function (val) {
                _place_key = val;
              },
            },
            _G_step_vert: {
              get: function () {
                return _G_step_vert;
              },
              set: function (val) {
                _G_step_vert = val;
              },
            },
            _leg_mouting_offset: {
              get: function () {
                return _leg_mouting_offset;
              },
              set: function (val) {
                _leg_mouting_offset = val;
              },
            },
            _STATE_skeleton: {
              get: function () {
                return _STATE_skeleton;
              },
              set: function (val) {
                _STATE_skeleton = val;
              },
            },
            _top_lable_y_pos: {
              get: function () {
                return _top_lable_y_pos;
              },
              set: function (val) {
                _top_lable_y_pos = val;
              },
            },
            _cam_update_counter: {
              get: function () {
                return _cam_update_counter;
              },
              set: function (val) {
                _cam_update_counter = val;
              },
            },
            j: {
              get: function () {
                return j;
              },
              set: function (val) {
                j = val;
              },
            },
            _zoom_step: {
              get: function () {
                return _zoom_step;
              },
              set: function (val) {
                _zoom_step = val;
              },
            },
            ruler_object_left: {
              get: function () {
                return ruler_object_left;
              },
              set: function (val) {
                ruler_object_left = val;
              },
            },
            _name_basic: {
              get: function () {
                return _name_basic;
              },
              set: function (val) {
                _name_basic = val;
              },
            },
            _plates_x_position: {
              get: function () {
                return _plates_x_position;
              },
              set: function (val) {
                _plates_x_position = val;
              },
            },
            i: {
              get: function () {
                return i;
              },
              set: function (val) {
                i = val;
              },
            },
            _plates_basic_group: {
              get: function () {
                return _plates_basic_group;
              },
              set: function (val) {
                _plates_basic_group = val;
              },
            },
            _place_configuration: {
              get: function () {
                return _place_configuration;
              },
              set: function (val) {
                _place_configuration = val;
              },
            },
            _basic_modules_arr: {
              get: function () {
                return _basic_modules_arr;
              },
              set: function (val) {
                _basic_modules_arr = val;
              },
            },
            _top_lable_z_pos: {
              get: function () {
                return _top_lable_z_pos;
              },
              set: function (val) {
                _top_lable_z_pos = val;
              },
            },
            _anim_running: {
              get: function () {
                return _anim_running;
              },
              set: function (val) {
                _anim_running = val;
              },
            },
            _JSON_placement_rules: {
              get: function () {
                return _JSON_placement_rules;
              },
              set: function (val) {
                _JSON_placement_rules = val;
              },
            },
            ruler_object_bottom: {
              get: function () {
                return ruler_object_bottom;
              },
              set: function (val) {
                ruler_object_bottom = val;
              },
            },
            _name_obj_basic: {
              get: function () {
                return _name_obj_basic;
              },
              set: function (val) {
                _name_obj_basic = val;
              },
            },
            _plates_z_position: {
              get: function () {
                return _plates_z_position;
              },
              set: function (val) {
                _plates_z_position = val;
              },
            },
            _place_direction: {
              get: function () {
                return _place_direction;
              },
              set: function (val) {
                _place_direction = val;
              },
            },
            placeholder_modules_arr: {
              get: function () {
                return placeholder_modules_arr;
              },
              set: function (val) {
                placeholder_modules_arr = val;
              },
            },
            _STATE_addon_module: {
              get: function () {
                return _STATE_addon_module;
              },
              set: function (val) {
                _STATE_addon_module = val;
              },
            },
            _STATE_top_lable: {
              get: function () {
                return _STATE_top_lable;
              },
              set: function (val) {
                _STATE_top_lable = val;
              },
            },
            _top_lable_xyz_scale: {
              get: function () {
                return _top_lable_xyz_scale;
              },
              set: function (val) {
                _top_lable_xyz_scale = val;
              },
            },
            _cam_shift: {
              get: function () {
                return _cam_shift;
              },
              set: function (val) {
                _cam_shift = val;
              },
            },
            _basic_module_id: {
              get: function () {
                return _basic_module_id;
              },
              set: function (val) {
                _basic_module_id = val;
              },
            },
            _temp_text: {
              get: function () {
                return _temp_text;
              },
              set: function (val) {
                _temp_text = val;
              },
            },
            _plates_temp: {
              get: function () {
                return _plates_temp;
              },
              set: function (val) {
                _plates_temp = val;
              },
            },
            _STATE_scene: {
              get: function () {
                return _STATE_scene;
              },
              set: function (val) {
                _STATE_scene = val;
              },
            },
            _STATE_basic_module: {
              get: function () {
                return _STATE_basic_module;
              },
              set: function (val) {
                _STATE_basic_module = val;
              },
            },
            calculated_width: {
              get: function () {
                return calculated_width;
              },
              set: function (val) {
                calculated_width = val;
              },
            },
            ruler_points: {
              get: function () {
                return ruler_points;
              },
              set: function (val) {
                ruler_points = val;
              },
            },
            _plates_arr: {
              get: function () {
                return _plates_arr;
              },
              set: function (val) {
                _plates_arr = val;
              },
            },
            _STATE_addon_plates: {
              get: function () {
                return _STATE_addon_plates;
              },
              set: function (val) {
                _STATE_addon_plates = val;
              },
            },
            _place_shift: {
              get: function () {
                return _place_shift;
              },
              set: function (val) {
                _place_shift = val;
              },
            },
            _plaсe_shift_z: {
              get: function () {
                return _pla_D1_81e_shift_z;
              },
              set: function (val) {
                _pla_D1_81e_shift_z = val;
              },
            },
            _character_number: {
              get: function () {
                return _character_number;
              },
              set: function (val) {
                _character_number = val;
              },
            },
            _JSON_font_path: {
              get: function () {
                return _JSON_font_path;
              },
              set: function (val) {
                _JSON_font_path = val;
              },
            },
            calculated_height: {
              get: function () {
                return calculated_height;
              },
              set: function (val) {
                calculated_height = val;
              },
            },
            LEG_WIDTH: {
              get: function () {
                return LEG_WIDTH;
              },
              set: function (val) {
                LEG_WIDTH = val;
              },
            },
            _plates_height_limit: {
              get: function () {
                return _plates_height_limit;
              },
              set: function (val) {
                _plates_height_limit = val;
              },
            },
            _STATE_basic_plates: {
              get: function () {
                return _STATE_basic_plates;
              },
              set: function (val) {
                _STATE_basic_plates = val;
              },
            },
            _top_label_single_char: {
              get: function () {
                return _top_label_single_char;
              },
              set: function (val) {
                _top_label_single_char = val;
              },
            },
            _cam_module_target_position_x: {
              get: function () {
                return _cam_module_target_position_x;
              },
              set: function (val) {
                _cam_module_target_position_x = val;
              },
            },
            calculated_depth: {
              get: function () {
                return calculated_depth;
              },
              set: function (val) {
                calculated_depth = val;
              },
            },
            DISTANCE_TO_FLOOR: {
              get: function () {
                return DISTANCE_TO_FLOOR;
              },
              set: function (val) {
                DISTANCE_TO_FLOOR = val;
              },
            },
            _plates_z_step: {
              get: function () {
                return _plates_z_step;
              },
              set: function (val) {
                _plates_z_step = val;
              },
            },
            _3_15_exeption: {
              get: function () {
                return _3_15_exeption;
              },
              set: function (val) {
                _3_15_exeption = val;
              },
            },
            _cam_module_target_position_z: {
              get: function () {
                return _cam_module_target_position_z;
              },
              set: function (val) {
                _cam_module_target_position_z = val;
              },
            },
            ONE_BOX_WIDTH: {
              get: function () {
                return ONE_BOX_WIDTH;
              },
              set: function (val) {
                ONE_BOX_WIDTH = val;
              },
            },
            _plates_x_step: {
              get: function () {
                return _plates_x_step;
              },
              set: function (val) {
                _plates_x_step = val;
              },
            },
            ONE_BOX_HEIGHT: {
              get: function () {
                return ONE_BOX_HEIGHT;
              },
              set: function (val) {
                ONE_BOX_HEIGHT = val;
              },
            },
            _plates_shift: {
              get: function () {
                return _plates_shift;
              },
              set: function (val) {
                _plates_shift = val;
              },
            },
            _cam_position_x: {
              get: function () {
                return _cam_position_x;
              },
              set: function (val) {
                _cam_position_x = val;
              },
            },
            TOP_LABLE_HEIGHT: {
              get: function () {
                return TOP_LABLE_HEIGHT;
              },
              set: function (val) {
                TOP_LABLE_HEIGHT = val;
              },
            },
            _plates_max: {
              get: function () {
                return _plates_max;
              },
              set: function (val) {
                _plates_max = val;
              },
            },
            _top_label_text_area: {
              get: function () {
                return _top_label_text_area;
              },
              set: function (val) {
                _top_label_text_area = val;
              },
            },
            _cam_position_z: {
              get: function () {
                return _cam_position_z;
              },
              set: function (val) {
                _cam_position_z = val;
              },
            },
            _plates_group: {
              get: function () {
                return _plates_group;
              },
              set: function (val) {
                _plates_group = val;
              },
            },
            _cam_state: {
              get: function () {
                return _cam_state;
              },
              set: function (val) {
                _cam_state = val;
              },
            },
            _plates_row_limit: {
              get: function () {
                return _plates_row_limit;
              },
              set: function (val) {
                _plates_row_limit = val;
              },
            },
            _basic_temp_emptyes: {
              get: function () {
                return _basic_temp_emptyes;
              },
              set: function (val) {
                _basic_temp_emptyes = val;
              },
            },
            _counter: {
              get: function () {
                return _counter;
              },
              set: function (val) {
                _counter = val;
              },
            },
            _temp_module: {
              get: function () {
                return _temp_module;
              },
              set: function (val) {
                _temp_module = val;
              },
            },
          }
        );

        removeObject(getObjectsFrom(i, "MESH"));
        removeObject(i);
      }
      _plates_arr = [];
      changeVis("light_ring", false);
      /* configure addon plates */
      if (dictGet(_STATE_addon_plates, "visible")) {
        if (_3_15_exeption != true) {
          if (dictGet(_STATE_addon_plates, "custom")) {
            _plates_amount = dictGet(_STATE_addon_plates, "amount");
          } else {
            _plates_amount = dictGet(_STATE_skeleton, "amount");
          }
          if (dictGet(_STATE_addon_plates, "type") == "plate") {
            _plates_template = "plate_group";
            _plates_x_position = -0.1585;
            _plates_z_position = -0.147;
            _plates_height_limit = 5;
            _plates_z_step = -0.03;
            _plates_x_step = 0.12;
            _plates_max = 15;
            _plates_row_limit = 3;
          } else if (dictGet(_STATE_addon_plates, "type") == "engrave") {
            _plates_template = "engrave_group";
            _plates_x_position = -0.169;
            _plates_z_position = -0.148;
            _plates_height_limit = 4;
            _plates_z_step = -0.035;
            _plates_x_step = 0.122;
            _plates_max = 12;
            _plates_row_limit = 3;
            var i_inc = 1;
            if (0 > _plates_amount) {
              i_inc = -i_inc;
            }
            for (
              let i = 0;
              i_inc >= 0 ? i <= _plates_amount : i >= _plates_amount;
              i += i_inc
            ) {
              var VARS = Object.defineProperties(
                {},
                {
                  _name: {
                    get: function () {
                      return _name;
                    },
                    set: function (val) {
                      _name = val;
                    },
                  },
                  _plates_amount: {
                    get: function () {
                      return _plates_amount;
                    },
                    set: function (val) {
                      _plates_amount = val;
                    },
                  },
                  x_position: {
                    get: function () {
                      return x_position;
                    },
                    set: function (val) {
                      x_position = val;
                    },
                  },
                  _plates_basic_arr: {
                    get: function () {
                      return _plates_basic_arr;
                    },
                    set: function (val) {
                      _plates_basic_arr = val;
                    },
                  },
                  _place_type: {
                    get: function () {
                      return _place_type;
                    },
                    set: function (val) {
                      _place_type = val;
                    },
                  },
                  _G_step_hor: {
                    get: function () {
                      return _G_step_hor;
                    },
                    set: function (val) {
                      _G_step_hor = val;
                    },
                  },
                  mailbox_obj: {
                    get: function () {
                      return mailbox_obj;
                    },
                    set: function (val) {
                      mailbox_obj = val;
                    },
                  },
                  _top_lable_x_pos: {
                    get: function () {
                      return _top_lable_x_pos;
                    },
                    set: function (val) {
                      _top_lable_x_pos = val;
                    },
                  },
                  _cam_update_requests: {
                    get: function () {
                      return _cam_update_requests;
                    },
                    set: function (val) {
                      _cam_update_requests = val;
                    },
                  },
                  columns: {
                    get: function () {
                      return columns;
                    },
                    set: function (val) {
                      columns = val;
                    },
                  },
                  row: {
                    get: function () {
                      return row;
                    },
                    set: function (val) {
                      row = val;
                    },
                  },
                  col: {
                    get: function () {
                      return col;
                    },
                    set: function (val) {
                      col = val;
                    },
                  },
                  parent: {
                    get: function () {
                      return parent2;
                    },
                    set: function (val) {
                      parent2 = val;
                    },
                  },
                  template: {
                    get: function () {
                      return template;
                    },
                    set: function (val) {
                      template = val;
                    },
                  },
                  where: {
                    get: function () {
                      return where;
                    },
                    set: function (val) {
                      where = val;
                    },
                  },
                  num: {
                    get: function () {
                      return num;
                    },
                    set: function (val) {
                      num = val;
                    },
                  },
                  promise: {
                    get: function () {
                      return promise;
                    },
                    set: function (val) {
                      promise = val;
                    },
                  },
                  ruler_object_top: {
                    get: function () {
                      return ruler_object_top;
                    },
                    set: function (val) {
                      ruler_object_top = val;
                    },
                  },
                  callback: {
                    get: function () {
                      return callback;
                    },
                    set: function (val) {
                      callback = val;
                    },
                  },
                  visible: {
                    get: function () {
                      return visible;
                    },
                    set: function (val) {
                      visible = val;
                    },
                  },
                  show_ruler: {
                    get: function () {
                      return show_ruler;
                    },
                    set: function (val) {
                      show_ruler = val;
                    },
                  },
                  _name_obj: {
                    get: function () {
                      return _name_obj;
                    },
                    set: function (val) {
                      _name_obj = val;
                    },
                  },
                  _plates_template: {
                    get: function () {
                      return _plates_template;
                    },
                    set: function (val) {
                      _plates_template = val;
                    },
                  },
                  z_position: {
                    get: function () {
                      return z_position;
                    },
                    set: function (val) {
                      z_position = val;
                    },
                  },
                  _plates_basic_template: {
                    get: function () {
                      return _plates_basic_template;
                    },
                    set: function (val) {
                      _plates_basic_template = val;
                    },
                  },
                  _place_key: {
                    get: function () {
                      return _place_key;
                    },
                    set: function (val) {
                      _place_key = val;
                    },
                  },
                  _G_step_vert: {
                    get: function () {
                      return _G_step_vert;
                    },
                    set: function (val) {
                      _G_step_vert = val;
                    },
                  },
                  _leg_mouting_offset: {
                    get: function () {
                      return _leg_mouting_offset;
                    },
                    set: function (val) {
                      _leg_mouting_offset = val;
                    },
                  },
                  _STATE_skeleton: {
                    get: function () {
                      return _STATE_skeleton;
                    },
                    set: function (val) {
                      _STATE_skeleton = val;
                    },
                  },
                  _top_lable_y_pos: {
                    get: function () {
                      return _top_lable_y_pos;
                    },
                    set: function (val) {
                      _top_lable_y_pos = val;
                    },
                  },
                  _cam_update_counter: {
                    get: function () {
                      return _cam_update_counter;
                    },
                    set: function (val) {
                      _cam_update_counter = val;
                    },
                  },
                  j: {
                    get: function () {
                      return j;
                    },
                    set: function (val) {
                      j = val;
                    },
                  },
                  _zoom_step: {
                    get: function () {
                      return _zoom_step;
                    },
                    set: function (val) {
                      _zoom_step = val;
                    },
                  },
                  ruler_object_left: {
                    get: function () {
                      return ruler_object_left;
                    },
                    set: function (val) {
                      ruler_object_left = val;
                    },
                  },
                  _name_basic: {
                    get: function () {
                      return _name_basic;
                    },
                    set: function (val) {
                      _name_basic = val;
                    },
                  },
                  _plates_x_position: {
                    get: function () {
                      return _plates_x_position;
                    },
                    set: function (val) {
                      _plates_x_position = val;
                    },
                  },
                  i: {
                    get: function () {
                      return i;
                    },
                    set: function (val) {
                      i = val;
                    },
                  },
                  _plates_basic_group: {
                    get: function () {
                      return _plates_basic_group;
                    },
                    set: function (val) {
                      _plates_basic_group = val;
                    },
                  },
                  _place_configuration: {
                    get: function () {
                      return _place_configuration;
                    },
                    set: function (val) {
                      _place_configuration = val;
                    },
                  },
                  _basic_modules_arr: {
                    get: function () {
                      return _basic_modules_arr;
                    },
                    set: function (val) {
                      _basic_modules_arr = val;
                    },
                  },
                  _top_lable_z_pos: {
                    get: function () {
                      return _top_lable_z_pos;
                    },
                    set: function (val) {
                      _top_lable_z_pos = val;
                    },
                  },
                  _anim_running: {
                    get: function () {
                      return _anim_running;
                    },
                    set: function (val) {
                      _anim_running = val;
                    },
                  },
                  _JSON_placement_rules: {
                    get: function () {
                      return _JSON_placement_rules;
                    },
                    set: function (val) {
                      _JSON_placement_rules = val;
                    },
                  },
                  ruler_object_bottom: {
                    get: function () {
                      return ruler_object_bottom;
                    },
                    set: function (val) {
                      ruler_object_bottom = val;
                    },
                  },
                  _name_obj_basic: {
                    get: function () {
                      return _name_obj_basic;
                    },
                    set: function (val) {
                      _name_obj_basic = val;
                    },
                  },
                  _plates_z_position: {
                    get: function () {
                      return _plates_z_position;
                    },
                    set: function (val) {
                      _plates_z_position = val;
                    },
                  },
                  _place_direction: {
                    get: function () {
                      return _place_direction;
                    },
                    set: function (val) {
                      _place_direction = val;
                    },
                  },
                  placeholder_modules_arr: {
                    get: function () {
                      return placeholder_modules_arr;
                    },
                    set: function (val) {
                      placeholder_modules_arr = val;
                    },
                  },
                  _STATE_addon_module: {
                    get: function () {
                      return _STATE_addon_module;
                    },
                    set: function (val) {
                      _STATE_addon_module = val;
                    },
                  },
                  _STATE_top_lable: {
                    get: function () {
                      return _STATE_top_lable;
                    },
                    set: function (val) {
                      _STATE_top_lable = val;
                    },
                  },
                  _top_lable_xyz_scale: {
                    get: function () {
                      return _top_lable_xyz_scale;
                    },
                    set: function (val) {
                      _top_lable_xyz_scale = val;
                    },
                  },
                  _cam_shift: {
                    get: function () {
                      return _cam_shift;
                    },
                    set: function (val) {
                      _cam_shift = val;
                    },
                  },
                  _basic_module_id: {
                    get: function () {
                      return _basic_module_id;
                    },
                    set: function (val) {
                      _basic_module_id = val;
                    },
                  },
                  _temp_text: {
                    get: function () {
                      return _temp_text;
                    },
                    set: function (val) {
                      _temp_text = val;
                    },
                  },
                  _plates_temp: {
                    get: function () {
                      return _plates_temp;
                    },
                    set: function (val) {
                      _plates_temp = val;
                    },
                  },
                  _STATE_scene: {
                    get: function () {
                      return _STATE_scene;
                    },
                    set: function (val) {
                      _STATE_scene = val;
                    },
                  },
                  _STATE_basic_module: {
                    get: function () {
                      return _STATE_basic_module;
                    },
                    set: function (val) {
                      _STATE_basic_module = val;
                    },
                  },
                  calculated_width: {
                    get: function () {
                      return calculated_width;
                    },
                    set: function (val) {
                      calculated_width = val;
                    },
                  },
                  ruler_points: {
                    get: function () {
                      return ruler_points;
                    },
                    set: function (val) {
                      ruler_points = val;
                    },
                  },
                  _plates_arr: {
                    get: function () {
                      return _plates_arr;
                    },
                    set: function (val) {
                      _plates_arr = val;
                    },
                  },
                  _STATE_addon_plates: {
                    get: function () {
                      return _STATE_addon_plates;
                    },
                    set: function (val) {
                      _STATE_addon_plates = val;
                    },
                  },
                  _place_shift: {
                    get: function () {
                      return _place_shift;
                    },
                    set: function (val) {
                      _place_shift = val;
                    },
                  },
                  _plaсe_shift_z: {
                    get: function () {
                      return _pla_D1_81e_shift_z;
                    },
                    set: function (val) {
                      _pla_D1_81e_shift_z = val;
                    },
                  },
                  _character_number: {
                    get: function () {
                      return _character_number;
                    },
                    set: function (val) {
                      _character_number = val;
                    },
                  },
                  _JSON_font_path: {
                    get: function () {
                      return _JSON_font_path;
                    },
                    set: function (val) {
                      _JSON_font_path = val;
                    },
                  },
                  calculated_height: {
                    get: function () {
                      return calculated_height;
                    },
                    set: function (val) {
                      calculated_height = val;
                    },
                  },
                  LEG_WIDTH: {
                    get: function () {
                      return LEG_WIDTH;
                    },
                    set: function (val) {
                      LEG_WIDTH = val;
                    },
                  },
                  _plates_height_limit: {
                    get: function () {
                      return _plates_height_limit;
                    },
                    set: function (val) {
                      _plates_height_limit = val;
                    },
                  },
                  _STATE_basic_plates: {
                    get: function () {
                      return _STATE_basic_plates;
                    },
                    set: function (val) {
                      _STATE_basic_plates = val;
                    },
                  },
                  _top_label_single_char: {
                    get: function () {
                      return _top_label_single_char;
                    },
                    set: function (val) {
                      _top_label_single_char = val;
                    },
                  },
                  _cam_module_target_position_x: {
                    get: function () {
                      return _cam_module_target_position_x;
                    },
                    set: function (val) {
                      _cam_module_target_position_x = val;
                    },
                  },
                  calculated_depth: {
                    get: function () {
                      return calculated_depth;
                    },
                    set: function (val) {
                      calculated_depth = val;
                    },
                  },
                  DISTANCE_TO_FLOOR: {
                    get: function () {
                      return DISTANCE_TO_FLOOR;
                    },
                    set: function (val) {
                      DISTANCE_TO_FLOOR = val;
                    },
                  },
                  _plates_z_step: {
                    get: function () {
                      return _plates_z_step;
                    },
                    set: function (val) {
                      _plates_z_step = val;
                    },
                  },
                  _3_15_exeption: {
                    get: function () {
                      return _3_15_exeption;
                    },
                    set: function (val) {
                      _3_15_exeption = val;
                    },
                  },
                  _cam_module_target_position_z: {
                    get: function () {
                      return _cam_module_target_position_z;
                    },
                    set: function (val) {
                      _cam_module_target_position_z = val;
                    },
                  },
                  ONE_BOX_WIDTH: {
                    get: function () {
                      return ONE_BOX_WIDTH;
                    },
                    set: function (val) {
                      ONE_BOX_WIDTH = val;
                    },
                  },
                  _plates_x_step: {
                    get: function () {
                      return _plates_x_step;
                    },
                    set: function (val) {
                      _plates_x_step = val;
                    },
                  },
                  ONE_BOX_HEIGHT: {
                    get: function () {
                      return ONE_BOX_HEIGHT;
                    },
                    set: function (val) {
                      ONE_BOX_HEIGHT = val;
                    },
                  },
                  _plates_shift: {
                    get: function () {
                      return _plates_shift;
                    },
                    set: function (val) {
                      _plates_shift = val;
                    },
                  },
                  _cam_position_x: {
                    get: function () {
                      return _cam_position_x;
                    },
                    set: function (val) {
                      _cam_position_x = val;
                    },
                  },
                  TOP_LABLE_HEIGHT: {
                    get: function () {
                      return TOP_LABLE_HEIGHT;
                    },
                    set: function (val) {
                      TOP_LABLE_HEIGHT = val;
                    },
                  },
                  _plates_max: {
                    get: function () {
                      return _plates_max;
                    },
                    set: function (val) {
                      _plates_max = val;
                    },
                  },
                  _top_label_text_area: {
                    get: function () {
                      return _top_label_text_area;
                    },
                    set: function (val) {
                      _top_label_text_area = val;
                    },
                  },
                  _cam_position_z: {
                    get: function () {
                      return _cam_position_z;
                    },
                    set: function (val) {
                      _cam_position_z = val;
                    },
                  },
                  _plates_group: {
                    get: function () {
                      return _plates_group;
                    },
                    set: function (val) {
                      _plates_group = val;
                    },
                  },
                  _cam_state: {
                    get: function () {
                      return _cam_state;
                    },
                    set: function (val) {
                      _cam_state = val;
                    },
                  },
                  _plates_row_limit: {
                    get: function () {
                      return _plates_row_limit;
                    },
                    set: function (val) {
                      _plates_row_limit = val;
                    },
                  },
                  _basic_temp_emptyes: {
                    get: function () {
                      return _basic_temp_emptyes;
                    },
                    set: function (val) {
                      _basic_temp_emptyes = val;
                    },
                  },
                  _counter: {
                    get: function () {
                      return _counter;
                    },
                    set: function (val) {
                      _counter = val;
                    },
                  },
                  _temp_module: {
                    get: function () {
                      return _temp_module;
                    },
                    set: function (val) {
                      _temp_module = val;
                    },
                  },
                }
              );

              setMorphFactor("addon_module", "engraving_" + String(i), 1);
              setMorphFactor(
                "ring_buttons_module",
                "engraving_" + String(i),
                1
              );
            }
          }
          if (dictGet(_STATE_skeleton, "mirrored")) {
            _plates_shift =
              _G_step_hor * (dictGet(_place_configuration, "row_1").length - 1);
          } else {
            _plates_shift = 0;
          }
          var i_end = Math.min(Math.max(_plates_amount, 0), _plates_max);
          var i_inc2 = 1;
          if (1 > i_end) {
            i_inc2 = -i_inc2;
          }
          for (let i = 1; i_inc2 >= 0 ? i <= i_end : i >= i_end; i += i_inc2) {
            var VARS = Object.defineProperties(
              {},
              {
                _name: {
                  get: function () {
                    return _name;
                  },
                  set: function (val) {
                    _name = val;
                  },
                },
                _plates_amount: {
                  get: function () {
                    return _plates_amount;
                  },
                  set: function (val) {
                    _plates_amount = val;
                  },
                },
                x_position: {
                  get: function () {
                    return x_position;
                  },
                  set: function (val) {
                    x_position = val;
                  },
                },
                _plates_basic_arr: {
                  get: function () {
                    return _plates_basic_arr;
                  },
                  set: function (val) {
                    _plates_basic_arr = val;
                  },
                },
                _place_type: {
                  get: function () {
                    return _place_type;
                  },
                  set: function (val) {
                    _place_type = val;
                  },
                },
                _G_step_hor: {
                  get: function () {
                    return _G_step_hor;
                  },
                  set: function (val) {
                    _G_step_hor = val;
                  },
                },
                mailbox_obj: {
                  get: function () {
                    return mailbox_obj;
                  },
                  set: function (val) {
                    mailbox_obj = val;
                  },
                },
                _top_lable_x_pos: {
                  get: function () {
                    return _top_lable_x_pos;
                  },
                  set: function (val) {
                    _top_lable_x_pos = val;
                  },
                },
                _cam_update_requests: {
                  get: function () {
                    return _cam_update_requests;
                  },
                  set: function (val) {
                    _cam_update_requests = val;
                  },
                },
                columns: {
                  get: function () {
                    return columns;
                  },
                  set: function (val) {
                    columns = val;
                  },
                },
                row: {
                  get: function () {
                    return row;
                  },
                  set: function (val) {
                    row = val;
                  },
                },
                col: {
                  get: function () {
                    return col;
                  },
                  set: function (val) {
                    col = val;
                  },
                },
                parent: {
                  get: function () {
                    return parent2;
                  },
                  set: function (val) {
                    parent2 = val;
                  },
                },
                template: {
                  get: function () {
                    return template;
                  },
                  set: function (val) {
                    template = val;
                  },
                },
                where: {
                  get: function () {
                    return where;
                  },
                  set: function (val) {
                    where = val;
                  },
                },
                num: {
                  get: function () {
                    return num;
                  },
                  set: function (val) {
                    num = val;
                  },
                },
                promise: {
                  get: function () {
                    return promise;
                  },
                  set: function (val) {
                    promise = val;
                  },
                },
                ruler_object_top: {
                  get: function () {
                    return ruler_object_top;
                  },
                  set: function (val) {
                    ruler_object_top = val;
                  },
                },
                callback: {
                  get: function () {
                    return callback;
                  },
                  set: function (val) {
                    callback = val;
                  },
                },
                visible: {
                  get: function () {
                    return visible;
                  },
                  set: function (val) {
                    visible = val;
                  },
                },
                show_ruler: {
                  get: function () {
                    return show_ruler;
                  },
                  set: function (val) {
                    show_ruler = val;
                  },
                },
                _name_obj: {
                  get: function () {
                    return _name_obj;
                  },
                  set: function (val) {
                    _name_obj = val;
                  },
                },
                _plates_template: {
                  get: function () {
                    return _plates_template;
                  },
                  set: function (val) {
                    _plates_template = val;
                  },
                },
                z_position: {
                  get: function () {
                    return z_position;
                  },
                  set: function (val) {
                    z_position = val;
                  },
                },
                _plates_basic_template: {
                  get: function () {
                    return _plates_basic_template;
                  },
                  set: function (val) {
                    _plates_basic_template = val;
                  },
                },
                _place_key: {
                  get: function () {
                    return _place_key;
                  },
                  set: function (val) {
                    _place_key = val;
                  },
                },
                _G_step_vert: {
                  get: function () {
                    return _G_step_vert;
                  },
                  set: function (val) {
                    _G_step_vert = val;
                  },
                },
                _leg_mouting_offset: {
                  get: function () {
                    return _leg_mouting_offset;
                  },
                  set: function (val) {
                    _leg_mouting_offset = val;
                  },
                },
                _STATE_skeleton: {
                  get: function () {
                    return _STATE_skeleton;
                  },
                  set: function (val) {
                    _STATE_skeleton = val;
                  },
                },
                _top_lable_y_pos: {
                  get: function () {
                    return _top_lable_y_pos;
                  },
                  set: function (val) {
                    _top_lable_y_pos = val;
                  },
                },
                _cam_update_counter: {
                  get: function () {
                    return _cam_update_counter;
                  },
                  set: function (val) {
                    _cam_update_counter = val;
                  },
                },
                j: {
                  get: function () {
                    return j;
                  },
                  set: function (val) {
                    j = val;
                  },
                },
                _zoom_step: {
                  get: function () {
                    return _zoom_step;
                  },
                  set: function (val) {
                    _zoom_step = val;
                  },
                },
                ruler_object_left: {
                  get: function () {
                    return ruler_object_left;
                  },
                  set: function (val) {
                    ruler_object_left = val;
                  },
                },
                _name_basic: {
                  get: function () {
                    return _name_basic;
                  },
                  set: function (val) {
                    _name_basic = val;
                  },
                },
                _plates_x_position: {
                  get: function () {
                    return _plates_x_position;
                  },
                  set: function (val) {
                    _plates_x_position = val;
                  },
                },
                i: {
                  get: function () {
                    return i;
                  },
                  set: function (val) {
                    i = val;
                  },
                },
                _plates_basic_group: {
                  get: function () {
                    return _plates_basic_group;
                  },
                  set: function (val) {
                    _plates_basic_group = val;
                  },
                },
                _place_configuration: {
                  get: function () {
                    return _place_configuration;
                  },
                  set: function (val) {
                    _place_configuration = val;
                  },
                },
                _basic_modules_arr: {
                  get: function () {
                    return _basic_modules_arr;
                  },
                  set: function (val) {
                    _basic_modules_arr = val;
                  },
                },
                _top_lable_z_pos: {
                  get: function () {
                    return _top_lable_z_pos;
                  },
                  set: function (val) {
                    _top_lable_z_pos = val;
                  },
                },
                _anim_running: {
                  get: function () {
                    return _anim_running;
                  },
                  set: function (val) {
                    _anim_running = val;
                  },
                },
                _JSON_placement_rules: {
                  get: function () {
                    return _JSON_placement_rules;
                  },
                  set: function (val) {
                    _JSON_placement_rules = val;
                  },
                },
                ruler_object_bottom: {
                  get: function () {
                    return ruler_object_bottom;
                  },
                  set: function (val) {
                    ruler_object_bottom = val;
                  },
                },
                _name_obj_basic: {
                  get: function () {
                    return _name_obj_basic;
                  },
                  set: function (val) {
                    _name_obj_basic = val;
                  },
                },
                _plates_z_position: {
                  get: function () {
                    return _plates_z_position;
                  },
                  set: function (val) {
                    _plates_z_position = val;
                  },
                },
                _place_direction: {
                  get: function () {
                    return _place_direction;
                  },
                  set: function (val) {
                    _place_direction = val;
                  },
                },
                placeholder_modules_arr: {
                  get: function () {
                    return placeholder_modules_arr;
                  },
                  set: function (val) {
                    placeholder_modules_arr = val;
                  },
                },
                _STATE_addon_module: {
                  get: function () {
                    return _STATE_addon_module;
                  },
                  set: function (val) {
                    _STATE_addon_module = val;
                  },
                },
                _STATE_top_lable: {
                  get: function () {
                    return _STATE_top_lable;
                  },
                  set: function (val) {
                    _STATE_top_lable = val;
                  },
                },
                _top_lable_xyz_scale: {
                  get: function () {
                    return _top_lable_xyz_scale;
                  },
                  set: function (val) {
                    _top_lable_xyz_scale = val;
                  },
                },
                _cam_shift: {
                  get: function () {
                    return _cam_shift;
                  },
                  set: function (val) {
                    _cam_shift = val;
                  },
                },
                _basic_module_id: {
                  get: function () {
                    return _basic_module_id;
                  },
                  set: function (val) {
                    _basic_module_id = val;
                  },
                },
                _temp_text: {
                  get: function () {
                    return _temp_text;
                  },
                  set: function (val) {
                    _temp_text = val;
                  },
                },
                _plates_temp: {
                  get: function () {
                    return _plates_temp;
                  },
                  set: function (val) {
                    _plates_temp = val;
                  },
                },
                _STATE_scene: {
                  get: function () {
                    return _STATE_scene;
                  },
                  set: function (val) {
                    _STATE_scene = val;
                  },
                },
                _STATE_basic_module: {
                  get: function () {
                    return _STATE_basic_module;
                  },
                  set: function (val) {
                    _STATE_basic_module = val;
                  },
                },
                calculated_width: {
                  get: function () {
                    return calculated_width;
                  },
                  set: function (val) {
                    calculated_width = val;
                  },
                },
                ruler_points: {
                  get: function () {
                    return ruler_points;
                  },
                  set: function (val) {
                    ruler_points = val;
                  },
                },
                _plates_arr: {
                  get: function () {
                    return _plates_arr;
                  },
                  set: function (val) {
                    _plates_arr = val;
                  },
                },
                _STATE_addon_plates: {
                  get: function () {
                    return _STATE_addon_plates;
                  },
                  set: function (val) {
                    _STATE_addon_plates = val;
                  },
                },
                _place_shift: {
                  get: function () {
                    return _place_shift;
                  },
                  set: function (val) {
                    _place_shift = val;
                  },
                },
                _plaсe_shift_z: {
                  get: function () {
                    return _pla_D1_81e_shift_z;
                  },
                  set: function (val) {
                    _pla_D1_81e_shift_z = val;
                  },
                },
                _character_number: {
                  get: function () {
                    return _character_number;
                  },
                  set: function (val) {
                    _character_number = val;
                  },
                },
                _JSON_font_path: {
                  get: function () {
                    return _JSON_font_path;
                  },
                  set: function (val) {
                    _JSON_font_path = val;
                  },
                },
                calculated_height: {
                  get: function () {
                    return calculated_height;
                  },
                  set: function (val) {
                    calculated_height = val;
                  },
                },
                LEG_WIDTH: {
                  get: function () {
                    return LEG_WIDTH;
                  },
                  set: function (val) {
                    LEG_WIDTH = val;
                  },
                },
                _plates_height_limit: {
                  get: function () {
                    return _plates_height_limit;
                  },
                  set: function (val) {
                    _plates_height_limit = val;
                  },
                },
                _STATE_basic_plates: {
                  get: function () {
                    return _STATE_basic_plates;
                  },
                  set: function (val) {
                    _STATE_basic_plates = val;
                  },
                },
                _top_label_single_char: {
                  get: function () {
                    return _top_label_single_char;
                  },
                  set: function (val) {
                    _top_label_single_char = val;
                  },
                },
                _cam_module_target_position_x: {
                  get: function () {
                    return _cam_module_target_position_x;
                  },
                  set: function (val) {
                    _cam_module_target_position_x = val;
                  },
                },
                calculated_depth: {
                  get: function () {
                    return calculated_depth;
                  },
                  set: function (val) {
                    calculated_depth = val;
                  },
                },
                DISTANCE_TO_FLOOR: {
                  get: function () {
                    return DISTANCE_TO_FLOOR;
                  },
                  set: function (val) {
                    DISTANCE_TO_FLOOR = val;
                  },
                },
                _plates_z_step: {
                  get: function () {
                    return _plates_z_step;
                  },
                  set: function (val) {
                    _plates_z_step = val;
                  },
                },
                _3_15_exeption: {
                  get: function () {
                    return _3_15_exeption;
                  },
                  set: function (val) {
                    _3_15_exeption = val;
                  },
                },
                _cam_module_target_position_z: {
                  get: function () {
                    return _cam_module_target_position_z;
                  },
                  set: function (val) {
                    _cam_module_target_position_z = val;
                  },
                },
                ONE_BOX_WIDTH: {
                  get: function () {
                    return ONE_BOX_WIDTH;
                  },
                  set: function (val) {
                    ONE_BOX_WIDTH = val;
                  },
                },
                _plates_x_step: {
                  get: function () {
                    return _plates_x_step;
                  },
                  set: function (val) {
                    _plates_x_step = val;
                  },
                },
                ONE_BOX_HEIGHT: {
                  get: function () {
                    return ONE_BOX_HEIGHT;
                  },
                  set: function (val) {
                    ONE_BOX_HEIGHT = val;
                  },
                },
                _plates_shift: {
                  get: function () {
                    return _plates_shift;
                  },
                  set: function (val) {
                    _plates_shift = val;
                  },
                },
                _cam_position_x: {
                  get: function () {
                    return _cam_position_x;
                  },
                  set: function (val) {
                    _cam_position_x = val;
                  },
                },
                TOP_LABLE_HEIGHT: {
                  get: function () {
                    return TOP_LABLE_HEIGHT;
                  },
                  set: function (val) {
                    TOP_LABLE_HEIGHT = val;
                  },
                },
                _plates_max: {
                  get: function () {
                    return _plates_max;
                  },
                  set: function (val) {
                    _plates_max = val;
                  },
                },
                _top_label_text_area: {
                  get: function () {
                    return _top_label_text_area;
                  },
                  set: function (val) {
                    _top_label_text_area = val;
                  },
                },
                _cam_position_z: {
                  get: function () {
                    return _cam_position_z;
                  },
                  set: function (val) {
                    _cam_position_z = val;
                  },
                },
                _plates_group: {
                  get: function () {
                    return _plates_group;
                  },
                  set: function (val) {
                    _plates_group = val;
                  },
                },
                _cam_state: {
                  get: function () {
                    return _cam_state;
                  },
                  set: function (val) {
                    _cam_state = val;
                  },
                },
                _plates_row_limit: {
                  get: function () {
                    return _plates_row_limit;
                  },
                  set: function (val) {
                    _plates_row_limit = val;
                  },
                },
                _basic_temp_emptyes: {
                  get: function () {
                    return _basic_temp_emptyes;
                  },
                  set: function (val) {
                    _basic_temp_emptyes = val;
                  },
                },
                _counter: {
                  get: function () {
                    return _counter;
                  },
                  set: function (val) {
                    _counter = val;
                  },
                },
                _temp_module: {
                  get: function () {
                    return _temp_module;
                  },
                  set: function (val) {
                    _temp_module = val;
                  },
                },
              }
            );

            if (i <= _plates_row_limit) {
              x_position = i * _plates_x_step - _plates_x_step + _plates_shift;
              z_position = _plates_z_step - _pla_D1_81e_shift_z;
            } else if (i > _plates_row_limit && i <= _plates_row_limit * 2) {
              x_position =
                i * _plates_x_step - _plates_x_step * 4 + _plates_shift;
              z_position = _plates_z_step * 2 - _pla_D1_81e_shift_z;
            } else if (
              i > _plates_row_limit * 2 &&
              i <= _plates_row_limit * 3
            ) {
              x_position =
                i * _plates_x_step - _plates_x_step * 7 + _plates_shift;
              z_position = _plates_z_step * 3 - _pla_D1_81e_shift_z;
            } else if (
              i > _plates_row_limit * 3 &&
              i <= _plates_row_limit * 4
            ) {
              x_position =
                i * _plates_x_step - _plates_x_step * 10 + _plates_shift;
              z_position = _plates_z_step * 4 - _pla_D1_81e_shift_z;
            } else if (
              i > _plates_row_limit * 4 &&
              i <= _plates_row_limit * 5
            ) {
              x_position =
                i * _plates_x_step - _plates_x_step * 13 + _plates_shift;
              z_position = _plates_z_step * 5 - _pla_D1_81e_shift_z;
            }
            _plates_group = ["plate_group_", i, "_addon"].join("");
            createObject(
              "EMPTY",
              _plates_group,
              0,
              0,
              0,
              0,
              0,
              0,
              "PERSPECTIVE",
              "AMBIENT",
              0
            );
            clone_group(_plates_group, _plates_template, "_addon", i);
            setObjTransform(
              _plates_group,
              false,
              "position",
              [
                _plates_x_position + x_position,
                "",
                _plates_z_position + z_position,
              ],
              false
            );
            _plates_arr.push(_plates_group);
            /* light_ring */
            if (dictGet(_STATE_addon_plates, "light_ring")) {
              if (dictGet(_STATE_skeleton, "addon_module") == false) {
                if (i != _plates_max) {
                  if (i % 3 == 0) {
                    setObjTransform(
                      "light_ring",
                      false,
                      "position",
                      [
                        _plates_x_position + x_position - _plates_x_step * 2,
                        "",
                        _plates_z_position + z_position + _plates_z_step,
                      ],
                      false
                    );
                  } else {
                    setObjTransform(
                      "light_ring",
                      false,
                      "position",
                      [
                        _plates_x_position + x_position + _plates_x_step,
                        "",
                        _plates_z_position + z_position,
                      ],
                      false
                    );
                  }
                  changeVis("light_ring", true);
                } else {
                  changeVis("light_ring", false);
                }
              } else {
                changeVis("light_ring", false);
              }
            } else {
              changeVis("light_ring", false);
            }
          }
        }
      }
    }

    // Describe this function...
    function configure_addon_module() {
      if (dictGet(_STATE_skeleton, "addon_module")) {
        changeVis(["addon_module", "addon_module_panel"], true);
        if (dictGet(_STATE_addon_module, "light_button")) {
          setMorphFactor("addon_module_panel", "light_button_on", 1);
        } else {
          setMorphFactor("addon_module_panel", "light_button_on", 0);
        }
        if (dictGet(_STATE_addon_module, "camera")) {
          setMorphFactor("addon_module_panel", "camera_on", 1);
        } else {
          setMorphFactor("addon_module_panel", "camera_on", 0);
        }
        if (dictGet(_STATE_addon_module, "RFID")) {
          setMorphFactor("addon_module_panel", "rfid_on", 1);
        } else {
          setMorphFactor("addon_module_panel", "rfid_on", 0);
        }
        if (dictGet(_STATE_addon_module, "touch")) {
          setMorphFactor("addon_module_panel", "touch_display_on", 1);
        } else {
          setMorphFactor("addon_module_panel", "touch_display_on", 0);
        }
        if (dictGet(_STATE_addon_module, "audio")) {
          setMorphFactor("addon_module_panel", "audio", 1);
        } else {
          setMorphFactor("addon_module_panel", "audio", 0);
        }
      } else {
        changeVis(["addon_module", "addon_module_panel"], false);
      }
    }

    // assignMaterial puzzle
    function assignMat(objSelector, matName) {
      var objNames = retrieveObjectNames(objSelector);
      if (!matName) return;
      var mat = v3d.SceneUtils.getMaterialByName(appInstance, matName);
      if (!mat) return;
      for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i];
        if (!objName) continue;
        var obj = getObjectByName(objName);
        if (obj) {
          var firstSubmesh = obj.resolveMultiMaterial()[0];
          firstSubmesh.material = mat;
        }
      }
    }

    /**
     * Get a scene that contains the root of the given action.
     */
    function getSceneByAction(action) {
      var root = action.getRoot();
      var scene = root.type == "Scene" ? root : null;
      root.traverseAncestors(function (ancObj) {
        if (ancObj.type == "Scene") {
          scene = ancObj;
        }
      });
      return scene;
    }

    /**
     * Get the current scene's framerate.
     */
    function getSceneAnimFrameRate(scene) {
      if (scene && "animFrameRate" in scene.userData) {
        return scene.userData.animFrameRate;
      }
      return 24;
    }

    _pGlob.animMixerCallbacks = [];

    var initAnimationMixer = (function () {
      function onMixerFinished(e) {
        var cb = _pGlob.animMixerCallbacks;
        var found = [];
        for (var i = 0; i < cb.length; i++) {
          if (cb[i][0] == e.action) {
            cb[i][0] = null; // desactivate
            found.push(cb[i][1]);
          }
        }
        for (var i = 0; i < found.length; i++) {
          found[i]();
        }
      }

      return function initAnimationMixer() {
        if (
          appInstance.mixer &&
          !appInstance.mixer.hasEventListener("finished", onMixerFinished)
        ) {
          bindListener(appInstance.mixer, "finished", onMixerFinished);
        }
      };
    })();

    // animation puzzles
    function operateAnimation(
      operation,
      animations,
      from,
      to,
      loop,
      speed,
      callback,
      rev
    ) {
      if (!animations) return;
      // input can be either single obj or array of objects
      if (typeof animations == "string") animations = [animations];

      function processAnimation(animName) {
        var action = v3d.SceneUtils.getAnimationActionByName(
          appInstance,
          animName
        );
        if (!action) return;
        switch (operation) {
          case "PLAY":
            if (!action.isRunning()) {
              action.reset();
              if (loop && loop != "AUTO") action.loop = v3d[loop];
              var scene = getSceneByAction(action);
              var frameRate = getSceneAnimFrameRate(scene);

              action.repetitions = Infinity;

              var timeScale = Math.abs(parseFloat(speed));
              if (rev) timeScale *= -1;

              action.timeScale = timeScale;
              action.timeStart = from !== null ? from / frameRate : 0;
              if (to !== null) {
                action.getClip().duration = to / frameRate;
              } else {
                action.getClip().resetDuration();
              }
              action.time =
                timeScale >= 0 ? action.timeStart : action.getClip().duration;

              action.paused = false;
              action.play();

              // push unique callbacks only
              var callbacks = _pGlob.animMixerCallbacks;
              var found = false;

              for (var j = 0; j < callbacks.length; j++)
                if (callbacks[j][0] == action && callbacks[j][1] == callback)
                  found = true;

              if (!found) _pGlob.animMixerCallbacks.push([action, callback]);
            }
            break;
          case "STOP":
            action.stop();

            // remove callbacks
            var callbacks = _pGlob.animMixerCallbacks;
            for (var j = 0; j < callbacks.length; j++)
              if (callbacks[j][0] == action) {
                callbacks.splice(j, 1);
                j--;
              }

            break;
          case "PAUSE":
            action.paused = true;
            break;
          case "RESUME":
            action.paused = false;
            break;
          case "SET_FRAME":
            var scene = getSceneByAction(action);
            var frameRate = getSceneAnimFrameRate(scene);
            action.time = from ? from / frameRate : 0;
            action.play();
            action.paused = true;
            break;
          case "SET_SPEED":
            var timeScale = parseFloat(speed);
            action.timeScale = rev ? -timeScale : timeScale;
            break;
        }
      }

      for (var i = 0; i < animations.length; i++) {
        var animName = animations[i];
        if (animName) processAnimation(animName);
      }

      initAnimationMixer();
    }

    // Describe this function...
    function chenge_handle_color() {
      if (dictGet(_STATE_skeleton, "handle_color")) {
        assignMat(
          ["addon_module_panel", "basic_module", "ring_buttons_module"],
          "antracite_handle_mat"
        );
      } else {
        assignMat(
          ["addon_module_panel", "basic_module", "ring_buttons_module"],
          "brushed_steel_handle_mat"
        );

        operateAnimation(
          "SET_FRAME",
          "_material_store_steel",
          50,
          null,
          "AUTO",
          1,
          function () {},
          false
        );
      }
      cofigure_skeleton();
    }

    function findUniqueObjectName(name) {
      function objNameUsed(name) {
        return Boolean(getObjectByName(name));
      }
      while (objNameUsed(name)) {
        var r = name.match(/^(.*?)(\d+)$/);
        if (!r) {
          name += "2";
        } else {
          name = r[1] + (parseInt(r[2], 10) + 1);
        }
      }
      return name;
    }

    // cloneObject puzzle
    function cloneObject(objName) {
      if (!objName) return;
      var obj = getObjectByName(objName);
      if (!obj) return;
      var newObj = obj.clone();
      newObj.name = findUniqueObjectName(obj.name);
      appInstance.scene.add(newObj);
      return newObj.name;
    }

    // Describe this function...
    function cofigure_skeleton() {
      if (
        dictGet(_STATE_addon_plates, "visible") ||
        dictGet(_STATE_skeleton, "addon_module")
      ) {
        changeVis(["GROUP", "addon_module"], true);
        _place_type = "addon_module";
      } else {
        changeVis(["GROUP", "addon_module"], false);
        _place_type = "no_addon_module";
      }
      if (dictGet(_STATE_addon_plates, "visible")) {
        changeVis("ring_buttons_module", true);
        _pla_D1_81e_shift_z = -0.05;
      }
      if (dictGet(_STATE_skeleton, "addon_module")) {
        changeVis("ring_buttons_module", false);
        _pla_D1_81e_shift_z = 0;
      }
      _place_key = [
        dictGet(_STATE_skeleton, "rows"),
        "-",
        dictGet(_STATE_skeleton, "amount"),
      ].join("");
      if (_place_key == "3-15") {
        changeVis(["GROUP", "addon_module"], false);
        _3_15_exeption = true;
      } else {
        _3_15_exeption = false;
      }
      _place_configuration = dictGet(
        dictGet(_JSON_placement_rules, _place_type),
        _place_key
      );
      /* Set direction */
      if (dictGet(_STATE_skeleton, "mirrored")) {
        _place_direction = -1;
        _place_shift =
          _G_step_hor * (dictGet(_place_configuration, "row_1").length - 1);
      } else {
        _place_direction = 1;
        _place_shift = 0;
      }
      setObjTransform(
        "addon_module_group",
        false,
        "position",
        [_place_shift, "", ""],
        false
      );
      /* Clean modules */
      for (var i_index6 in _basic_modules_arr) {
        let i = _basic_modules_arr[i_index6];
        var VARS = Object.defineProperties(
          {},
          {
            _name: {
              get: function () {
                return _name;
              },
              set: function (val) {
                _name = val;
              },
            },
            _plates_amount: {
              get: function () {
                return _plates_amount;
              },
              set: function (val) {
                _plates_amount = val;
              },
            },
            x_position: {
              get: function () {
                return x_position;
              },
              set: function (val) {
                x_position = val;
              },
            },
            _plates_basic_arr: {
              get: function () {
                return _plates_basic_arr;
              },
              set: function (val) {
                _plates_basic_arr = val;
              },
            },
            _place_type: {
              get: function () {
                return _place_type;
              },
              set: function (val) {
                _place_type = val;
              },
            },
            _G_step_hor: {
              get: function () {
                return _G_step_hor;
              },
              set: function (val) {
                _G_step_hor = val;
              },
            },
            mailbox_obj: {
              get: function () {
                return mailbox_obj;
              },
              set: function (val) {
                mailbox_obj = val;
              },
            },
            _top_lable_x_pos: {
              get: function () {
                return _top_lable_x_pos;
              },
              set: function (val) {
                _top_lable_x_pos = val;
              },
            },
            _cam_update_requests: {
              get: function () {
                return _cam_update_requests;
              },
              set: function (val) {
                _cam_update_requests = val;
              },
            },
            columns: {
              get: function () {
                return columns;
              },
              set: function (val) {
                columns = val;
              },
            },
            row: {
              get: function () {
                return row;
              },
              set: function (val) {
                row = val;
              },
            },
            col: {
              get: function () {
                return col;
              },
              set: function (val) {
                col = val;
              },
            },
            parent: {
              get: function () {
                return parent2;
              },
              set: function (val) {
                parent2 = val;
              },
            },
            template: {
              get: function () {
                return template;
              },
              set: function (val) {
                template = val;
              },
            },
            where: {
              get: function () {
                return where;
              },
              set: function (val) {
                where = val;
              },
            },
            num: {
              get: function () {
                return num;
              },
              set: function (val) {
                num = val;
              },
            },
            promise: {
              get: function () {
                return promise;
              },
              set: function (val) {
                promise = val;
              },
            },
            ruler_object_top: {
              get: function () {
                return ruler_object_top;
              },
              set: function (val) {
                ruler_object_top = val;
              },
            },
            callback: {
              get: function () {
                return callback;
              },
              set: function (val) {
                callback = val;
              },
            },
            visible: {
              get: function () {
                return visible;
              },
              set: function (val) {
                visible = val;
              },
            },
            show_ruler: {
              get: function () {
                return show_ruler;
              },
              set: function (val) {
                show_ruler = val;
              },
            },
            _name_obj: {
              get: function () {
                return _name_obj;
              },
              set: function (val) {
                _name_obj = val;
              },
            },
            _plates_template: {
              get: function () {
                return _plates_template;
              },
              set: function (val) {
                _plates_template = val;
              },
            },
            z_position: {
              get: function () {
                return z_position;
              },
              set: function (val) {
                z_position = val;
              },
            },
            _plates_basic_template: {
              get: function () {
                return _plates_basic_template;
              },
              set: function (val) {
                _plates_basic_template = val;
              },
            },
            _place_key: {
              get: function () {
                return _place_key;
              },
              set: function (val) {
                _place_key = val;
              },
            },
            _G_step_vert: {
              get: function () {
                return _G_step_vert;
              },
              set: function (val) {
                _G_step_vert = val;
              },
            },
            _leg_mouting_offset: {
              get: function () {
                return _leg_mouting_offset;
              },
              set: function (val) {
                _leg_mouting_offset = val;
              },
            },
            _STATE_skeleton: {
              get: function () {
                return _STATE_skeleton;
              },
              set: function (val) {
                _STATE_skeleton = val;
              },
            },
            _top_lable_y_pos: {
              get: function () {
                return _top_lable_y_pos;
              },
              set: function (val) {
                _top_lable_y_pos = val;
              },
            },
            _cam_update_counter: {
              get: function () {
                return _cam_update_counter;
              },
              set: function (val) {
                _cam_update_counter = val;
              },
            },
            j: {
              get: function () {
                return j;
              },
              set: function (val) {
                j = val;
              },
            },
            _zoom_step: {
              get: function () {
                return _zoom_step;
              },
              set: function (val) {
                _zoom_step = val;
              },
            },
            ruler_object_left: {
              get: function () {
                return ruler_object_left;
              },
              set: function (val) {
                ruler_object_left = val;
              },
            },
            _name_basic: {
              get: function () {
                return _name_basic;
              },
              set: function (val) {
                _name_basic = val;
              },
            },
            _plates_x_position: {
              get: function () {
                return _plates_x_position;
              },
              set: function (val) {
                _plates_x_position = val;
              },
            },
            i: {
              get: function () {
                return i;
              },
              set: function (val) {
                i = val;
              },
            },
            _plates_basic_group: {
              get: function () {
                return _plates_basic_group;
              },
              set: function (val) {
                _plates_basic_group = val;
              },
            },
            _place_configuration: {
              get: function () {
                return _place_configuration;
              },
              set: function (val) {
                _place_configuration = val;
              },
            },
            _basic_modules_arr: {
              get: function () {
                return _basic_modules_arr;
              },
              set: function (val) {
                _basic_modules_arr = val;
              },
            },
            _top_lable_z_pos: {
              get: function () {
                return _top_lable_z_pos;
              },
              set: function (val) {
                _top_lable_z_pos = val;
              },
            },
            _anim_running: {
              get: function () {
                return _anim_running;
              },
              set: function (val) {
                _anim_running = val;
              },
            },
            _JSON_placement_rules: {
              get: function () {
                return _JSON_placement_rules;
              },
              set: function (val) {
                _JSON_placement_rules = val;
              },
            },
            ruler_object_bottom: {
              get: function () {
                return ruler_object_bottom;
              },
              set: function (val) {
                ruler_object_bottom = val;
              },
            },
            _name_obj_basic: {
              get: function () {
                return _name_obj_basic;
              },
              set: function (val) {
                _name_obj_basic = val;
              },
            },
            _plates_z_position: {
              get: function () {
                return _plates_z_position;
              },
              set: function (val) {
                _plates_z_position = val;
              },
            },
            _place_direction: {
              get: function () {
                return _place_direction;
              },
              set: function (val) {
                _place_direction = val;
              },
            },
            placeholder_modules_arr: {
              get: function () {
                return placeholder_modules_arr;
              },
              set: function (val) {
                placeholder_modules_arr = val;
              },
            },
            _STATE_addon_module: {
              get: function () {
                return _STATE_addon_module;
              },
              set: function (val) {
                _STATE_addon_module = val;
              },
            },
            _STATE_top_lable: {
              get: function () {
                return _STATE_top_lable;
              },
              set: function (val) {
                _STATE_top_lable = val;
              },
            },
            _top_lable_xyz_scale: {
              get: function () {
                return _top_lable_xyz_scale;
              },
              set: function (val) {
                _top_lable_xyz_scale = val;
              },
            },
            _cam_shift: {
              get: function () {
                return _cam_shift;
              },
              set: function (val) {
                _cam_shift = val;
              },
            },
            _basic_module_id: {
              get: function () {
                return _basic_module_id;
              },
              set: function (val) {
                _basic_module_id = val;
              },
            },
            _temp_text: {
              get: function () {
                return _temp_text;
              },
              set: function (val) {
                _temp_text = val;
              },
            },
            _plates_temp: {
              get: function () {
                return _plates_temp;
              },
              set: function (val) {
                _plates_temp = val;
              },
            },
            _STATE_scene: {
              get: function () {
                return _STATE_scene;
              },
              set: function (val) {
                _STATE_scene = val;
              },
            },
            _STATE_basic_module: {
              get: function () {
                return _STATE_basic_module;
              },
              set: function (val) {
                _STATE_basic_module = val;
              },
            },
            calculated_width: {
              get: function () {
                return calculated_width;
              },
              set: function (val) {
                calculated_width = val;
              },
            },
            ruler_points: {
              get: function () {
                return ruler_points;
              },
              set: function (val) {
                ruler_points = val;
              },
            },
            _plates_arr: {
              get: function () {
                return _plates_arr;
              },
              set: function (val) {
                _plates_arr = val;
              },
            },
            _STATE_addon_plates: {
              get: function () {
                return _STATE_addon_plates;
              },
              set: function (val) {
                _STATE_addon_plates = val;
              },
            },
            _place_shift: {
              get: function () {
                return _place_shift;
              },
              set: function (val) {
                _place_shift = val;
              },
            },
            _plaсe_shift_z: {
              get: function () {
                return _pla_D1_81e_shift_z;
              },
              set: function (val) {
                _pla_D1_81e_shift_z = val;
              },
            },
            _character_number: {
              get: function () {
                return _character_number;
              },
              set: function (val) {
                _character_number = val;
              },
            },
            _JSON_font_path: {
              get: function () {
                return _JSON_font_path;
              },
              set: function (val) {
                _JSON_font_path = val;
              },
            },
            calculated_height: {
              get: function () {
                return calculated_height;
              },
              set: function (val) {
                calculated_height = val;
              },
            },
            LEG_WIDTH: {
              get: function () {
                return LEG_WIDTH;
              },
              set: function (val) {
                LEG_WIDTH = val;
              },
            },
            _plates_height_limit: {
              get: function () {
                return _plates_height_limit;
              },
              set: function (val) {
                _plates_height_limit = val;
              },
            },
            _STATE_basic_plates: {
              get: function () {
                return _STATE_basic_plates;
              },
              set: function (val) {
                _STATE_basic_plates = val;
              },
            },
            _top_label_single_char: {
              get: function () {
                return _top_label_single_char;
              },
              set: function (val) {
                _top_label_single_char = val;
              },
            },
            _cam_module_target_position_x: {
              get: function () {
                return _cam_module_target_position_x;
              },
              set: function (val) {
                _cam_module_target_position_x = val;
              },
            },
            calculated_depth: {
              get: function () {
                return calculated_depth;
              },
              set: function (val) {
                calculated_depth = val;
              },
            },
            DISTANCE_TO_FLOOR: {
              get: function () {
                return DISTANCE_TO_FLOOR;
              },
              set: function (val) {
                DISTANCE_TO_FLOOR = val;
              },
            },
            _plates_z_step: {
              get: function () {
                return _plates_z_step;
              },
              set: function (val) {
                _plates_z_step = val;
              },
            },
            _3_15_exeption: {
              get: function () {
                return _3_15_exeption;
              },
              set: function (val) {
                _3_15_exeption = val;
              },
            },
            _cam_module_target_position_z: {
              get: function () {
                return _cam_module_target_position_z;
              },
              set: function (val) {
                _cam_module_target_position_z = val;
              },
            },
            ONE_BOX_WIDTH: {
              get: function () {
                return ONE_BOX_WIDTH;
              },
              set: function (val) {
                ONE_BOX_WIDTH = val;
              },
            },
            _plates_x_step: {
              get: function () {
                return _plates_x_step;
              },
              set: function (val) {
                _plates_x_step = val;
              },
            },
            ONE_BOX_HEIGHT: {
              get: function () {
                return ONE_BOX_HEIGHT;
              },
              set: function (val) {
                ONE_BOX_HEIGHT = val;
              },
            },
            _plates_shift: {
              get: function () {
                return _plates_shift;
              },
              set: function (val) {
                _plates_shift = val;
              },
            },
            _cam_position_x: {
              get: function () {
                return _cam_position_x;
              },
              set: function (val) {
                _cam_position_x = val;
              },
            },
            TOP_LABLE_HEIGHT: {
              get: function () {
                return TOP_LABLE_HEIGHT;
              },
              set: function (val) {
                TOP_LABLE_HEIGHT = val;
              },
            },
            _plates_max: {
              get: function () {
                return _plates_max;
              },
              set: function (val) {
                _plates_max = val;
              },
            },
            _top_label_text_area: {
              get: function () {
                return _top_label_text_area;
              },
              set: function (val) {
                _top_label_text_area = val;
              },
            },
            _cam_position_z: {
              get: function () {
                return _cam_position_z;
              },
              set: function (val) {
                _cam_position_z = val;
              },
            },
            _plates_group: {
              get: function () {
                return _plates_group;
              },
              set: function (val) {
                _plates_group = val;
              },
            },
            _cam_state: {
              get: function () {
                return _cam_state;
              },
              set: function (val) {
                _cam_state = val;
              },
            },
            _plates_row_limit: {
              get: function () {
                return _plates_row_limit;
              },
              set: function (val) {
                _plates_row_limit = val;
              },
            },
            _basic_temp_emptyes: {
              get: function () {
                return _basic_temp_emptyes;
              },
              set: function (val) {
                _basic_temp_emptyes = val;
              },
            },
            _counter: {
              get: function () {
                return _counter;
              },
              set: function (val) {
                _counter = val;
              },
            },
            _temp_module: {
              get: function () {
                return _temp_module;
              },
              set: function (val) {
                _temp_module = val;
              },
            },
          }
        );

        removeObject(i);
      }
      _basic_modules_arr = [];
      for (var i_index7 in placeholder_modules_arr) {
        let i = placeholder_modules_arr[i_index7];
        var VARS = Object.defineProperties(
          {},
          {
            _name: {
              get: function () {
                return _name;
              },
              set: function (val) {
                _name = val;
              },
            },
            _plates_amount: {
              get: function () {
                return _plates_amount;
              },
              set: function (val) {
                _plates_amount = val;
              },
            },
            x_position: {
              get: function () {
                return x_position;
              },
              set: function (val) {
                x_position = val;
              },
            },
            _plates_basic_arr: {
              get: function () {
                return _plates_basic_arr;
              },
              set: function (val) {
                _plates_basic_arr = val;
              },
            },
            _place_type: {
              get: function () {
                return _place_type;
              },
              set: function (val) {
                _place_type = val;
              },
            },
            _G_step_hor: {
              get: function () {
                return _G_step_hor;
              },
              set: function (val) {
                _G_step_hor = val;
              },
            },
            mailbox_obj: {
              get: function () {
                return mailbox_obj;
              },
              set: function (val) {
                mailbox_obj = val;
              },
            },
            _top_lable_x_pos: {
              get: function () {
                return _top_lable_x_pos;
              },
              set: function (val) {
                _top_lable_x_pos = val;
              },
            },
            _cam_update_requests: {
              get: function () {
                return _cam_update_requests;
              },
              set: function (val) {
                _cam_update_requests = val;
              },
            },
            columns: {
              get: function () {
                return columns;
              },
              set: function (val) {
                columns = val;
              },
            },
            row: {
              get: function () {
                return row;
              },
              set: function (val) {
                row = val;
              },
            },
            col: {
              get: function () {
                return col;
              },
              set: function (val) {
                col = val;
              },
            },
            parent: {
              get: function () {
                return parent2;
              },
              set: function (val) {
                parent2 = val;
              },
            },
            template: {
              get: function () {
                return template;
              },
              set: function (val) {
                template = val;
              },
            },
            where: {
              get: function () {
                return where;
              },
              set: function (val) {
                where = val;
              },
            },
            num: {
              get: function () {
                return num;
              },
              set: function (val) {
                num = val;
              },
            },
            promise: {
              get: function () {
                return promise;
              },
              set: function (val) {
                promise = val;
              },
            },
            ruler_object_top: {
              get: function () {
                return ruler_object_top;
              },
              set: function (val) {
                ruler_object_top = val;
              },
            },
            callback: {
              get: function () {
                return callback;
              },
              set: function (val) {
                callback = val;
              },
            },
            visible: {
              get: function () {
                return visible;
              },
              set: function (val) {
                visible = val;
              },
            },
            show_ruler: {
              get: function () {
                return show_ruler;
              },
              set: function (val) {
                show_ruler = val;
              },
            },
            _name_obj: {
              get: function () {
                return _name_obj;
              },
              set: function (val) {
                _name_obj = val;
              },
            },
            _plates_template: {
              get: function () {
                return _plates_template;
              },
              set: function (val) {
                _plates_template = val;
              },
            },
            z_position: {
              get: function () {
                return z_position;
              },
              set: function (val) {
                z_position = val;
              },
            },
            _plates_basic_template: {
              get: function () {
                return _plates_basic_template;
              },
              set: function (val) {
                _plates_basic_template = val;
              },
            },
            _place_key: {
              get: function () {
                return _place_key;
              },
              set: function (val) {
                _place_key = val;
              },
            },
            _G_step_vert: {
              get: function () {
                return _G_step_vert;
              },
              set: function (val) {
                _G_step_vert = val;
              },
            },
            _leg_mouting_offset: {
              get: function () {
                return _leg_mouting_offset;
              },
              set: function (val) {
                _leg_mouting_offset = val;
              },
            },
            _STATE_skeleton: {
              get: function () {
                return _STATE_skeleton;
              },
              set: function (val) {
                _STATE_skeleton = val;
              },
            },
            _top_lable_y_pos: {
              get: function () {
                return _top_lable_y_pos;
              },
              set: function (val) {
                _top_lable_y_pos = val;
              },
            },
            _cam_update_counter: {
              get: function () {
                return _cam_update_counter;
              },
              set: function (val) {
                _cam_update_counter = val;
              },
            },
            j: {
              get: function () {
                return j;
              },
              set: function (val) {
                j = val;
              },
            },
            _zoom_step: {
              get: function () {
                return _zoom_step;
              },
              set: function (val) {
                _zoom_step = val;
              },
            },
            ruler_object_left: {
              get: function () {
                return ruler_object_left;
              },
              set: function (val) {
                ruler_object_left = val;
              },
            },
            _name_basic: {
              get: function () {
                return _name_basic;
              },
              set: function (val) {
                _name_basic = val;
              },
            },
            _plates_x_position: {
              get: function () {
                return _plates_x_position;
              },
              set: function (val) {
                _plates_x_position = val;
              },
            },
            i: {
              get: function () {
                return i;
              },
              set: function (val) {
                i = val;
              },
            },
            _plates_basic_group: {
              get: function () {
                return _plates_basic_group;
              },
              set: function (val) {
                _plates_basic_group = val;
              },
            },
            _place_configuration: {
              get: function () {
                return _place_configuration;
              },
              set: function (val) {
                _place_configuration = val;
              },
            },
            _basic_modules_arr: {
              get: function () {
                return _basic_modules_arr;
              },
              set: function (val) {
                _basic_modules_arr = val;
              },
            },
            _top_lable_z_pos: {
              get: function () {
                return _top_lable_z_pos;
              },
              set: function (val) {
                _top_lable_z_pos = val;
              },
            },
            _anim_running: {
              get: function () {
                return _anim_running;
              },
              set: function (val) {
                _anim_running = val;
              },
            },
            _JSON_placement_rules: {
              get: function () {
                return _JSON_placement_rules;
              },
              set: function (val) {
                _JSON_placement_rules = val;
              },
            },
            ruler_object_bottom: {
              get: function () {
                return ruler_object_bottom;
              },
              set: function (val) {
                ruler_object_bottom = val;
              },
            },
            _name_obj_basic: {
              get: function () {
                return _name_obj_basic;
              },
              set: function (val) {
                _name_obj_basic = val;
              },
            },
            _plates_z_position: {
              get: function () {
                return _plates_z_position;
              },
              set: function (val) {
                _plates_z_position = val;
              },
            },
            _place_direction: {
              get: function () {
                return _place_direction;
              },
              set: function (val) {
                _place_direction = val;
              },
            },
            placeholder_modules_arr: {
              get: function () {
                return placeholder_modules_arr;
              },
              set: function (val) {
                placeholder_modules_arr = val;
              },
            },
            _STATE_addon_module: {
              get: function () {
                return _STATE_addon_module;
              },
              set: function (val) {
                _STATE_addon_module = val;
              },
            },
            _STATE_top_lable: {
              get: function () {
                return _STATE_top_lable;
              },
              set: function (val) {
                _STATE_top_lable = val;
              },
            },
            _top_lable_xyz_scale: {
              get: function () {
                return _top_lable_xyz_scale;
              },
              set: function (val) {
                _top_lable_xyz_scale = val;
              },
            },
            _cam_shift: {
              get: function () {
                return _cam_shift;
              },
              set: function (val) {
                _cam_shift = val;
              },
            },
            _basic_module_id: {
              get: function () {
                return _basic_module_id;
              },
              set: function (val) {
                _basic_module_id = val;
              },
            },
            _temp_text: {
              get: function () {
                return _temp_text;
              },
              set: function (val) {
                _temp_text = val;
              },
            },
            _plates_temp: {
              get: function () {
                return _plates_temp;
              },
              set: function (val) {
                _plates_temp = val;
              },
            },
            _STATE_scene: {
              get: function () {
                return _STATE_scene;
              },
              set: function (val) {
                _STATE_scene = val;
              },
            },
            _STATE_basic_module: {
              get: function () {
                return _STATE_basic_module;
              },
              set: function (val) {
                _STATE_basic_module = val;
              },
            },
            calculated_width: {
              get: function () {
                return calculated_width;
              },
              set: function (val) {
                calculated_width = val;
              },
            },
            ruler_points: {
              get: function () {
                return ruler_points;
              },
              set: function (val) {
                ruler_points = val;
              },
            },
            _plates_arr: {
              get: function () {
                return _plates_arr;
              },
              set: function (val) {
                _plates_arr = val;
              },
            },
            _STATE_addon_plates: {
              get: function () {
                return _STATE_addon_plates;
              },
              set: function (val) {
                _STATE_addon_plates = val;
              },
            },
            _place_shift: {
              get: function () {
                return _place_shift;
              },
              set: function (val) {
                _place_shift = val;
              },
            },
            _plaсe_shift_z: {
              get: function () {
                return _pla_D1_81e_shift_z;
              },
              set: function (val) {
                _pla_D1_81e_shift_z = val;
              },
            },
            _character_number: {
              get: function () {
                return _character_number;
              },
              set: function (val) {
                _character_number = val;
              },
            },
            _JSON_font_path: {
              get: function () {
                return _JSON_font_path;
              },
              set: function (val) {
                _JSON_font_path = val;
              },
            },
            calculated_height: {
              get: function () {
                return calculated_height;
              },
              set: function (val) {
                calculated_height = val;
              },
            },
            LEG_WIDTH: {
              get: function () {
                return LEG_WIDTH;
              },
              set: function (val) {
                LEG_WIDTH = val;
              },
            },
            _plates_height_limit: {
              get: function () {
                return _plates_height_limit;
              },
              set: function (val) {
                _plates_height_limit = val;
              },
            },
            _STATE_basic_plates: {
              get: function () {
                return _STATE_basic_plates;
              },
              set: function (val) {
                _STATE_basic_plates = val;
              },
            },
            _top_label_single_char: {
              get: function () {
                return _top_label_single_char;
              },
              set: function (val) {
                _top_label_single_char = val;
              },
            },
            _cam_module_target_position_x: {
              get: function () {
                return _cam_module_target_position_x;
              },
              set: function (val) {
                _cam_module_target_position_x = val;
              },
            },
            calculated_depth: {
              get: function () {
                return calculated_depth;
              },
              set: function (val) {
                calculated_depth = val;
              },
            },
            DISTANCE_TO_FLOOR: {
              get: function () {
                return DISTANCE_TO_FLOOR;
              },
              set: function (val) {
                DISTANCE_TO_FLOOR = val;
              },
            },
            _plates_z_step: {
              get: function () {
                return _plates_z_step;
              },
              set: function (val) {
                _plates_z_step = val;
              },
            },
            _3_15_exeption: {
              get: function () {
                return _3_15_exeption;
              },
              set: function (val) {
                _3_15_exeption = val;
              },
            },
            _cam_module_target_position_z: {
              get: function () {
                return _cam_module_target_position_z;
              },
              set: function (val) {
                _cam_module_target_position_z = val;
              },
            },
            ONE_BOX_WIDTH: {
              get: function () {
                return ONE_BOX_WIDTH;
              },
              set: function (val) {
                ONE_BOX_WIDTH = val;
              },
            },
            _plates_x_step: {
              get: function () {
                return _plates_x_step;
              },
              set: function (val) {
                _plates_x_step = val;
              },
            },
            ONE_BOX_HEIGHT: {
              get: function () {
                return ONE_BOX_HEIGHT;
              },
              set: function (val) {
                ONE_BOX_HEIGHT = val;
              },
            },
            _plates_shift: {
              get: function () {
                return _plates_shift;
              },
              set: function (val) {
                _plates_shift = val;
              },
            },
            _cam_position_x: {
              get: function () {
                return _cam_position_x;
              },
              set: function (val) {
                _cam_position_x = val;
              },
            },
            TOP_LABLE_HEIGHT: {
              get: function () {
                return TOP_LABLE_HEIGHT;
              },
              set: function (val) {
                TOP_LABLE_HEIGHT = val;
              },
            },
            _plates_max: {
              get: function () {
                return _plates_max;
              },
              set: function (val) {
                _plates_max = val;
              },
            },
            _top_label_text_area: {
              get: function () {
                return _top_label_text_area;
              },
              set: function (val) {
                _top_label_text_area = val;
              },
            },
            _cam_position_z: {
              get: function () {
                return _cam_position_z;
              },
              set: function (val) {
                _cam_position_z = val;
              },
            },
            _plates_group: {
              get: function () {
                return _plates_group;
              },
              set: function (val) {
                _plates_group = val;
              },
            },
            _cam_state: {
              get: function () {
                return _cam_state;
              },
              set: function (val) {
                _cam_state = val;
              },
            },
            _plates_row_limit: {
              get: function () {
                return _plates_row_limit;
              },
              set: function (val) {
                _plates_row_limit = val;
              },
            },
            _basic_temp_emptyes: {
              get: function () {
                return _basic_temp_emptyes;
              },
              set: function (val) {
                _basic_temp_emptyes = val;
              },
            },
            _counter: {
              get: function () {
                return _counter;
              },
              set: function (val) {
                _counter = val;
              },
            },
            _temp_module: {
              get: function () {
                return _temp_module;
              },
              set: function (val) {
                _temp_module = val;
              },
            },
          }
        );

        removeObject(i);
      }
      placeholder_modules_arr = [];
      _basic_temp_emptyes = [];
      /* Place modules */
      for (let i = 1; i <= 3; i++) {
        var VARS = Object.defineProperties(
          {},
          {
            _name: {
              get: function () {
                return _name;
              },
              set: function (val) {
                _name = val;
              },
            },
            _plates_amount: {
              get: function () {
                return _plates_amount;
              },
              set: function (val) {
                _plates_amount = val;
              },
            },
            x_position: {
              get: function () {
                return x_position;
              },
              set: function (val) {
                x_position = val;
              },
            },
            _plates_basic_arr: {
              get: function () {
                return _plates_basic_arr;
              },
              set: function (val) {
                _plates_basic_arr = val;
              },
            },
            _place_type: {
              get: function () {
                return _place_type;
              },
              set: function (val) {
                _place_type = val;
              },
            },
            _G_step_hor: {
              get: function () {
                return _G_step_hor;
              },
              set: function (val) {
                _G_step_hor = val;
              },
            },
            mailbox_obj: {
              get: function () {
                return mailbox_obj;
              },
              set: function (val) {
                mailbox_obj = val;
              },
            },
            _top_lable_x_pos: {
              get: function () {
                return _top_lable_x_pos;
              },
              set: function (val) {
                _top_lable_x_pos = val;
              },
            },
            _cam_update_requests: {
              get: function () {
                return _cam_update_requests;
              },
              set: function (val) {
                _cam_update_requests = val;
              },
            },
            columns: {
              get: function () {
                return columns;
              },
              set: function (val) {
                columns = val;
              },
            },
            row: {
              get: function () {
                return row;
              },
              set: function (val) {
                row = val;
              },
            },
            col: {
              get: function () {
                return col;
              },
              set: function (val) {
                col = val;
              },
            },
            parent: {
              get: function () {
                return parent2;
              },
              set: function (val) {
                parent2 = val;
              },
            },
            template: {
              get: function () {
                return template;
              },
              set: function (val) {
                template = val;
              },
            },
            where: {
              get: function () {
                return where;
              },
              set: function (val) {
                where = val;
              },
            },
            num: {
              get: function () {
                return num;
              },
              set: function (val) {
                num = val;
              },
            },
            promise: {
              get: function () {
                return promise;
              },
              set: function (val) {
                promise = val;
              },
            },
            ruler_object_top: {
              get: function () {
                return ruler_object_top;
              },
              set: function (val) {
                ruler_object_top = val;
              },
            },
            callback: {
              get: function () {
                return callback;
              },
              set: function (val) {
                callback = val;
              },
            },
            visible: {
              get: function () {
                return visible;
              },
              set: function (val) {
                visible = val;
              },
            },
            show_ruler: {
              get: function () {
                return show_ruler;
              },
              set: function (val) {
                show_ruler = val;
              },
            },
            _name_obj: {
              get: function () {
                return _name_obj;
              },
              set: function (val) {
                _name_obj = val;
              },
            },
            _plates_template: {
              get: function () {
                return _plates_template;
              },
              set: function (val) {
                _plates_template = val;
              },
            },
            z_position: {
              get: function () {
                return z_position;
              },
              set: function (val) {
                z_position = val;
              },
            },
            _plates_basic_template: {
              get: function () {
                return _plates_basic_template;
              },
              set: function (val) {
                _plates_basic_template = val;
              },
            },
            _place_key: {
              get: function () {
                return _place_key;
              },
              set: function (val) {
                _place_key = val;
              },
            },
            _G_step_vert: {
              get: function () {
                return _G_step_vert;
              },
              set: function (val) {
                _G_step_vert = val;
              },
            },
            _leg_mouting_offset: {
              get: function () {
                return _leg_mouting_offset;
              },
              set: function (val) {
                _leg_mouting_offset = val;
              },
            },
            _STATE_skeleton: {
              get: function () {
                return _STATE_skeleton;
              },
              set: function (val) {
                _STATE_skeleton = val;
              },
            },
            _top_lable_y_pos: {
              get: function () {
                return _top_lable_y_pos;
              },
              set: function (val) {
                _top_lable_y_pos = val;
              },
            },
            _cam_update_counter: {
              get: function () {
                return _cam_update_counter;
              },
              set: function (val) {
                _cam_update_counter = val;
              },
            },
            j: {
              get: function () {
                return j;
              },
              set: function (val) {
                j = val;
              },
            },
            _zoom_step: {
              get: function () {
                return _zoom_step;
              },
              set: function (val) {
                _zoom_step = val;
              },
            },
            ruler_object_left: {
              get: function () {
                return ruler_object_left;
              },
              set: function (val) {
                ruler_object_left = val;
              },
            },
            _name_basic: {
              get: function () {
                return _name_basic;
              },
              set: function (val) {
                _name_basic = val;
              },
            },
            _plates_x_position: {
              get: function () {
                return _plates_x_position;
              },
              set: function (val) {
                _plates_x_position = val;
              },
            },
            i: {
              get: function () {
                return i;
              },
              set: function (val) {
                i = val;
              },
            },
            _plates_basic_group: {
              get: function () {
                return _plates_basic_group;
              },
              set: function (val) {
                _plates_basic_group = val;
              },
            },
            _place_configuration: {
              get: function () {
                return _place_configuration;
              },
              set: function (val) {
                _place_configuration = val;
              },
            },
            _basic_modules_arr: {
              get: function () {
                return _basic_modules_arr;
              },
              set: function (val) {
                _basic_modules_arr = val;
              },
            },
            _top_lable_z_pos: {
              get: function () {
                return _top_lable_z_pos;
              },
              set: function (val) {
                _top_lable_z_pos = val;
              },
            },
            _anim_running: {
              get: function () {
                return _anim_running;
              },
              set: function (val) {
                _anim_running = val;
              },
            },
            _JSON_placement_rules: {
              get: function () {
                return _JSON_placement_rules;
              },
              set: function (val) {
                _JSON_placement_rules = val;
              },
            },
            ruler_object_bottom: {
              get: function () {
                return ruler_object_bottom;
              },
              set: function (val) {
                ruler_object_bottom = val;
              },
            },
            _name_obj_basic: {
              get: function () {
                return _name_obj_basic;
              },
              set: function (val) {
                _name_obj_basic = val;
              },
            },
            _plates_z_position: {
              get: function () {
                return _plates_z_position;
              },
              set: function (val) {
                _plates_z_position = val;
              },
            },
            _place_direction: {
              get: function () {
                return _place_direction;
              },
              set: function (val) {
                _place_direction = val;
              },
            },
            placeholder_modules_arr: {
              get: function () {
                return placeholder_modules_arr;
              },
              set: function (val) {
                placeholder_modules_arr = val;
              },
            },
            _STATE_addon_module: {
              get: function () {
                return _STATE_addon_module;
              },
              set: function (val) {
                _STATE_addon_module = val;
              },
            },
            _STATE_top_lable: {
              get: function () {
                return _STATE_top_lable;
              },
              set: function (val) {
                _STATE_top_lable = val;
              },
            },
            _top_lable_xyz_scale: {
              get: function () {
                return _top_lable_xyz_scale;
              },
              set: function (val) {
                _top_lable_xyz_scale = val;
              },
            },
            _cam_shift: {
              get: function () {
                return _cam_shift;
              },
              set: function (val) {
                _cam_shift = val;
              },
            },
            _basic_module_id: {
              get: function () {
                return _basic_module_id;
              },
              set: function (val) {
                _basic_module_id = val;
              },
            },
            _temp_text: {
              get: function () {
                return _temp_text;
              },
              set: function (val) {
                _temp_text = val;
              },
            },
            _plates_temp: {
              get: function () {
                return _plates_temp;
              },
              set: function (val) {
                _plates_temp = val;
              },
            },
            _STATE_scene: {
              get: function () {
                return _STATE_scene;
              },
              set: function (val) {
                _STATE_scene = val;
              },
            },
            _STATE_basic_module: {
              get: function () {
                return _STATE_basic_module;
              },
              set: function (val) {
                _STATE_basic_module = val;
              },
            },
            calculated_width: {
              get: function () {
                return calculated_width;
              },
              set: function (val) {
                calculated_width = val;
              },
            },
            ruler_points: {
              get: function () {
                return ruler_points;
              },
              set: function (val) {
                ruler_points = val;
              },
            },
            _plates_arr: {
              get: function () {
                return _plates_arr;
              },
              set: function (val) {
                _plates_arr = val;
              },
            },
            _STATE_addon_plates: {
              get: function () {
                return _STATE_addon_plates;
              },
              set: function (val) {
                _STATE_addon_plates = val;
              },
            },
            _place_shift: {
              get: function () {
                return _place_shift;
              },
              set: function (val) {
                _place_shift = val;
              },
            },
            _plaсe_shift_z: {
              get: function () {
                return _pla_D1_81e_shift_z;
              },
              set: function (val) {
                _pla_D1_81e_shift_z = val;
              },
            },
            _character_number: {
              get: function () {
                return _character_number;
              },
              set: function (val) {
                _character_number = val;
              },
            },
            _JSON_font_path: {
              get: function () {
                return _JSON_font_path;
              },
              set: function (val) {
                _JSON_font_path = val;
              },
            },
            calculated_height: {
              get: function () {
                return calculated_height;
              },
              set: function (val) {
                calculated_height = val;
              },
            },
            LEG_WIDTH: {
              get: function () {
                return LEG_WIDTH;
              },
              set: function (val) {
                LEG_WIDTH = val;
              },
            },
            _plates_height_limit: {
              get: function () {
                return _plates_height_limit;
              },
              set: function (val) {
                _plates_height_limit = val;
              },
            },
            _STATE_basic_plates: {
              get: function () {
                return _STATE_basic_plates;
              },
              set: function (val) {
                _STATE_basic_plates = val;
              },
            },
            _top_label_single_char: {
              get: function () {
                return _top_label_single_char;
              },
              set: function (val) {
                _top_label_single_char = val;
              },
            },
            _cam_module_target_position_x: {
              get: function () {
                return _cam_module_target_position_x;
              },
              set: function (val) {
                _cam_module_target_position_x = val;
              },
            },
            calculated_depth: {
              get: function () {
                return calculated_depth;
              },
              set: function (val) {
                calculated_depth = val;
              },
            },
            DISTANCE_TO_FLOOR: {
              get: function () {
                return DISTANCE_TO_FLOOR;
              },
              set: function (val) {
                DISTANCE_TO_FLOOR = val;
              },
            },
            _plates_z_step: {
              get: function () {
                return _plates_z_step;
              },
              set: function (val) {
                _plates_z_step = val;
              },
            },
            _3_15_exeption: {
              get: function () {
                return _3_15_exeption;
              },
              set: function (val) {
                _3_15_exeption = val;
              },
            },
            _cam_module_target_position_z: {
              get: function () {
                return _cam_module_target_position_z;
              },
              set: function (val) {
                _cam_module_target_position_z = val;
              },
            },
            ONE_BOX_WIDTH: {
              get: function () {
                return ONE_BOX_WIDTH;
              },
              set: function (val) {
                ONE_BOX_WIDTH = val;
              },
            },
            _plates_x_step: {
              get: function () {
                return _plates_x_step;
              },
              set: function (val) {
                _plates_x_step = val;
              },
            },
            ONE_BOX_HEIGHT: {
              get: function () {
                return ONE_BOX_HEIGHT;
              },
              set: function (val) {
                ONE_BOX_HEIGHT = val;
              },
            },
            _plates_shift: {
              get: function () {
                return _plates_shift;
              },
              set: function (val) {
                _plates_shift = val;
              },
            },
            _cam_position_x: {
              get: function () {
                return _cam_position_x;
              },
              set: function (val) {
                _cam_position_x = val;
              },
            },
            TOP_LABLE_HEIGHT: {
              get: function () {
                return TOP_LABLE_HEIGHT;
              },
              set: function (val) {
                TOP_LABLE_HEIGHT = val;
              },
            },
            _plates_max: {
              get: function () {
                return _plates_max;
              },
              set: function (val) {
                _plates_max = val;
              },
            },
            _top_label_text_area: {
              get: function () {
                return _top_label_text_area;
              },
              set: function (val) {
                _top_label_text_area = val;
              },
            },
            _cam_position_z: {
              get: function () {
                return _cam_position_z;
              },
              set: function (val) {
                _cam_position_z = val;
              },
            },
            _plates_group: {
              get: function () {
                return _plates_group;
              },
              set: function (val) {
                _plates_group = val;
              },
            },
            _cam_state: {
              get: function () {
                return _cam_state;
              },
              set: function (val) {
                _cam_state = val;
              },
            },
            _plates_row_limit: {
              get: function () {
                return _plates_row_limit;
              },
              set: function (val) {
                _plates_row_limit = val;
              },
            },
            _basic_temp_emptyes: {
              get: function () {
                return _basic_temp_emptyes;
              },
              set: function (val) {
                _basic_temp_emptyes = val;
              },
            },
            _counter: {
              get: function () {
                return _counter;
              },
              set: function (val) {
                _counter = val;
              },
            },
            _temp_module: {
              get: function () {
                return _temp_module;
              },
              set: function (val) {
                _temp_module = val;
              },
            },
          }
        );

        _counter = 0;
        var j_list = dictGet(_place_configuration, "row_" + String(i));
        for (var j_index in j_list) {
          let j = j_list[j_index];
          var VARS = Object.defineProperties(
            {},
            {
              _name: {
                get: function () {
                  return _name;
                },
                set: function (val) {
                  _name = val;
                },
              },
              _plates_amount: {
                get: function () {
                  return _plates_amount;
                },
                set: function (val) {
                  _plates_amount = val;
                },
              },
              x_position: {
                get: function () {
                  return x_position;
                },
                set: function (val) {
                  x_position = val;
                },
              },
              _plates_basic_arr: {
                get: function () {
                  return _plates_basic_arr;
                },
                set: function (val) {
                  _plates_basic_arr = val;
                },
              },
              _place_type: {
                get: function () {
                  return _place_type;
                },
                set: function (val) {
                  _place_type = val;
                },
              },
              _G_step_hor: {
                get: function () {
                  return _G_step_hor;
                },
                set: function (val) {
                  _G_step_hor = val;
                },
              },
              mailbox_obj: {
                get: function () {
                  return mailbox_obj;
                },
                set: function (val) {
                  mailbox_obj = val;
                },
              },
              _top_lable_x_pos: {
                get: function () {
                  return _top_lable_x_pos;
                },
                set: function (val) {
                  _top_lable_x_pos = val;
                },
              },
              _cam_update_requests: {
                get: function () {
                  return _cam_update_requests;
                },
                set: function (val) {
                  _cam_update_requests = val;
                },
              },
              columns: {
                get: function () {
                  return columns;
                },
                set: function (val) {
                  columns = val;
                },
              },
              row: {
                get: function () {
                  return row;
                },
                set: function (val) {
                  row = val;
                },
              },
              col: {
                get: function () {
                  return col;
                },
                set: function (val) {
                  col = val;
                },
              },
              parent: {
                get: function () {
                  return parent2;
                },
                set: function (val) {
                  parent2 = val;
                },
              },
              template: {
                get: function () {
                  return template;
                },
                set: function (val) {
                  template = val;
                },
              },
              where: {
                get: function () {
                  return where;
                },
                set: function (val) {
                  where = val;
                },
              },
              num: {
                get: function () {
                  return num;
                },
                set: function (val) {
                  num = val;
                },
              },
              promise: {
                get: function () {
                  return promise;
                },
                set: function (val) {
                  promise = val;
                },
              },
              ruler_object_top: {
                get: function () {
                  return ruler_object_top;
                },
                set: function (val) {
                  ruler_object_top = val;
                },
              },
              callback: {
                get: function () {
                  return callback;
                },
                set: function (val) {
                  callback = val;
                },
              },
              visible: {
                get: function () {
                  return visible;
                },
                set: function (val) {
                  visible = val;
                },
              },
              show_ruler: {
                get: function () {
                  return show_ruler;
                },
                set: function (val) {
                  show_ruler = val;
                },
              },
              _name_obj: {
                get: function () {
                  return _name_obj;
                },
                set: function (val) {
                  _name_obj = val;
                },
              },
              _plates_template: {
                get: function () {
                  return _plates_template;
                },
                set: function (val) {
                  _plates_template = val;
                },
              },
              z_position: {
                get: function () {
                  return z_position;
                },
                set: function (val) {
                  z_position = val;
                },
              },
              _plates_basic_template: {
                get: function () {
                  return _plates_basic_template;
                },
                set: function (val) {
                  _plates_basic_template = val;
                },
              },
              _place_key: {
                get: function () {
                  return _place_key;
                },
                set: function (val) {
                  _place_key = val;
                },
              },
              _G_step_vert: {
                get: function () {
                  return _G_step_vert;
                },
                set: function (val) {
                  _G_step_vert = val;
                },
              },
              _leg_mouting_offset: {
                get: function () {
                  return _leg_mouting_offset;
                },
                set: function (val) {
                  _leg_mouting_offset = val;
                },
              },
              _STATE_skeleton: {
                get: function () {
                  return _STATE_skeleton;
                },
                set: function (val) {
                  _STATE_skeleton = val;
                },
              },
              _top_lable_y_pos: {
                get: function () {
                  return _top_lable_y_pos;
                },
                set: function (val) {
                  _top_lable_y_pos = val;
                },
              },
              _cam_update_counter: {
                get: function () {
                  return _cam_update_counter;
                },
                set: function (val) {
                  _cam_update_counter = val;
                },
              },
              j: {
                get: function () {
                  return j;
                },
                set: function (val) {
                  j = val;
                },
              },
              _zoom_step: {
                get: function () {
                  return _zoom_step;
                },
                set: function (val) {
                  _zoom_step = val;
                },
              },
              ruler_object_left: {
                get: function () {
                  return ruler_object_left;
                },
                set: function (val) {
                  ruler_object_left = val;
                },
              },
              _name_basic: {
                get: function () {
                  return _name_basic;
                },
                set: function (val) {
                  _name_basic = val;
                },
              },
              _plates_x_position: {
                get: function () {
                  return _plates_x_position;
                },
                set: function (val) {
                  _plates_x_position = val;
                },
              },
              i: {
                get: function () {
                  return i;
                },
                set: function (val) {
                  i = val;
                },
              },
              _plates_basic_group: {
                get: function () {
                  return _plates_basic_group;
                },
                set: function (val) {
                  _plates_basic_group = val;
                },
              },
              _place_configuration: {
                get: function () {
                  return _place_configuration;
                },
                set: function (val) {
                  _place_configuration = val;
                },
              },
              _basic_modules_arr: {
                get: function () {
                  return _basic_modules_arr;
                },
                set: function (val) {
                  _basic_modules_arr = val;
                },
              },
              _top_lable_z_pos: {
                get: function () {
                  return _top_lable_z_pos;
                },
                set: function (val) {
                  _top_lable_z_pos = val;
                },
              },
              _anim_running: {
                get: function () {
                  return _anim_running;
                },
                set: function (val) {
                  _anim_running = val;
                },
              },
              _JSON_placement_rules: {
                get: function () {
                  return _JSON_placement_rules;
                },
                set: function (val) {
                  _JSON_placement_rules = val;
                },
              },
              ruler_object_bottom: {
                get: function () {
                  return ruler_object_bottom;
                },
                set: function (val) {
                  ruler_object_bottom = val;
                },
              },
              _name_obj_basic: {
                get: function () {
                  return _name_obj_basic;
                },
                set: function (val) {
                  _name_obj_basic = val;
                },
              },
              _plates_z_position: {
                get: function () {
                  return _plates_z_position;
                },
                set: function (val) {
                  _plates_z_position = val;
                },
              },
              _place_direction: {
                get: function () {
                  return _place_direction;
                },
                set: function (val) {
                  _place_direction = val;
                },
              },
              placeholder_modules_arr: {
                get: function () {
                  return placeholder_modules_arr;
                },
                set: function (val) {
                  placeholder_modules_arr = val;
                },
              },
              _STATE_addon_module: {
                get: function () {
                  return _STATE_addon_module;
                },
                set: function (val) {
                  _STATE_addon_module = val;
                },
              },
              _STATE_top_lable: {
                get: function () {
                  return _STATE_top_lable;
                },
                set: function (val) {
                  _STATE_top_lable = val;
                },
              },
              _top_lable_xyz_scale: {
                get: function () {
                  return _top_lable_xyz_scale;
                },
                set: function (val) {
                  _top_lable_xyz_scale = val;
                },
              },
              _cam_shift: {
                get: function () {
                  return _cam_shift;
                },
                set: function (val) {
                  _cam_shift = val;
                },
              },
              _basic_module_id: {
                get: function () {
                  return _basic_module_id;
                },
                set: function (val) {
                  _basic_module_id = val;
                },
              },
              _temp_text: {
                get: function () {
                  return _temp_text;
                },
                set: function (val) {
                  _temp_text = val;
                },
              },
              _plates_temp: {
                get: function () {
                  return _plates_temp;
                },
                set: function (val) {
                  _plates_temp = val;
                },
              },
              _STATE_scene: {
                get: function () {
                  return _STATE_scene;
                },
                set: function (val) {
                  _STATE_scene = val;
                },
              },
              _STATE_basic_module: {
                get: function () {
                  return _STATE_basic_module;
                },
                set: function (val) {
                  _STATE_basic_module = val;
                },
              },
              calculated_width: {
                get: function () {
                  return calculated_width;
                },
                set: function (val) {
                  calculated_width = val;
                },
              },
              ruler_points: {
                get: function () {
                  return ruler_points;
                },
                set: function (val) {
                  ruler_points = val;
                },
              },
              _plates_arr: {
                get: function () {
                  return _plates_arr;
                },
                set: function (val) {
                  _plates_arr = val;
                },
              },
              _STATE_addon_plates: {
                get: function () {
                  return _STATE_addon_plates;
                },
                set: function (val) {
                  _STATE_addon_plates = val;
                },
              },
              _place_shift: {
                get: function () {
                  return _place_shift;
                },
                set: function (val) {
                  _place_shift = val;
                },
              },
              _plaсe_shift_z: {
                get: function () {
                  return _pla_D1_81e_shift_z;
                },
                set: function (val) {
                  _pla_D1_81e_shift_z = val;
                },
              },
              _character_number: {
                get: function () {
                  return _character_number;
                },
                set: function (val) {
                  _character_number = val;
                },
              },
              _JSON_font_path: {
                get: function () {
                  return _JSON_font_path;
                },
                set: function (val) {
                  _JSON_font_path = val;
                },
              },
              calculated_height: {
                get: function () {
                  return calculated_height;
                },
                set: function (val) {
                  calculated_height = val;
                },
              },
              LEG_WIDTH: {
                get: function () {
                  return LEG_WIDTH;
                },
                set: function (val) {
                  LEG_WIDTH = val;
                },
              },
              _plates_height_limit: {
                get: function () {
                  return _plates_height_limit;
                },
                set: function (val) {
                  _plates_height_limit = val;
                },
              },
              _STATE_basic_plates: {
                get: function () {
                  return _STATE_basic_plates;
                },
                set: function (val) {
                  _STATE_basic_plates = val;
                },
              },
              _top_label_single_char: {
                get: function () {
                  return _top_label_single_char;
                },
                set: function (val) {
                  _top_label_single_char = val;
                },
              },
              _cam_module_target_position_x: {
                get: function () {
                  return _cam_module_target_position_x;
                },
                set: function (val) {
                  _cam_module_target_position_x = val;
                },
              },
              calculated_depth: {
                get: function () {
                  return calculated_depth;
                },
                set: function (val) {
                  calculated_depth = val;
                },
              },
              DISTANCE_TO_FLOOR: {
                get: function () {
                  return DISTANCE_TO_FLOOR;
                },
                set: function (val) {
                  DISTANCE_TO_FLOOR = val;
                },
              },
              _plates_z_step: {
                get: function () {
                  return _plates_z_step;
                },
                set: function (val) {
                  _plates_z_step = val;
                },
              },
              _3_15_exeption: {
                get: function () {
                  return _3_15_exeption;
                },
                set: function (val) {
                  _3_15_exeption = val;
                },
              },
              _cam_module_target_position_z: {
                get: function () {
                  return _cam_module_target_position_z;
                },
                set: function (val) {
                  _cam_module_target_position_z = val;
                },
              },
              ONE_BOX_WIDTH: {
                get: function () {
                  return ONE_BOX_WIDTH;
                },
                set: function (val) {
                  ONE_BOX_WIDTH = val;
                },
              },
              _plates_x_step: {
                get: function () {
                  return _plates_x_step;
                },
                set: function (val) {
                  _plates_x_step = val;
                },
              },
              ONE_BOX_HEIGHT: {
                get: function () {
                  return ONE_BOX_HEIGHT;
                },
                set: function (val) {
                  ONE_BOX_HEIGHT = val;
                },
              },
              _plates_shift: {
                get: function () {
                  return _plates_shift;
                },
                set: function (val) {
                  _plates_shift = val;
                },
              },
              _cam_position_x: {
                get: function () {
                  return _cam_position_x;
                },
                set: function (val) {
                  _cam_position_x = val;
                },
              },
              TOP_LABLE_HEIGHT: {
                get: function () {
                  return TOP_LABLE_HEIGHT;
                },
                set: function (val) {
                  TOP_LABLE_HEIGHT = val;
                },
              },
              _plates_max: {
                get: function () {
                  return _plates_max;
                },
                set: function (val) {
                  _plates_max = val;
                },
              },
              _top_label_text_area: {
                get: function () {
                  return _top_label_text_area;
                },
                set: function (val) {
                  _top_label_text_area = val;
                },
              },
              _cam_position_z: {
                get: function () {
                  return _cam_position_z;
                },
                set: function (val) {
                  _cam_position_z = val;
                },
              },
              _plates_group: {
                get: function () {
                  return _plates_group;
                },
                set: function (val) {
                  _plates_group = val;
                },
              },
              _cam_state: {
                get: function () {
                  return _cam_state;
                },
                set: function (val) {
                  _cam_state = val;
                },
              },
              _plates_row_limit: {
                get: function () {
                  return _plates_row_limit;
                },
                set: function (val) {
                  _plates_row_limit = val;
                },
              },
              _basic_temp_emptyes: {
                get: function () {
                  return _basic_temp_emptyes;
                },
                set: function (val) {
                  _basic_temp_emptyes = val;
                },
              },
              _counter: {
                get: function () {
                  return _counter;
                },
                set: function (val) {
                  _counter = val;
                },
              },
              _temp_module: {
                get: function () {
                  return _temp_module;
                },
                set: function (val) {
                  _temp_module = val;
                },
              },
            }
          );

          if (j == "B") {
            _temp_module = cloneObject("basic_module");
            setObjTransform(
              _temp_module,
              false,
              "position",
              [
                _place_shift + _counter * _G_step_hor * _place_direction,
                "",
                (i - 1) * _G_step_vert,
              ],
              false
            );
            changeVis(_temp_module, true);
            _basic_modules_arr.push(_temp_module);
          } else if (j == "P") {
            _temp_module = cloneObject("placeholder_module");
            setObjTransform(
              _temp_module,
              false,
              "position",
              [
                _place_shift + _counter * _G_step_hor * _place_direction,
                "",
                (i - 1) * _G_step_vert,
              ],
              false
            );
            changeVis(_temp_module, true);
            placeholder_modules_arr.push(_temp_module);
          }
          _counter = (typeof _counter === "number" ? _counter : 0) + 1;
        }
      }
      if (dictGet(_STATE_skeleton, "addon_module") != true) {
        changeVis(["addon_module", "addon_module_panel"], false);
      }
      /* mounting */
      if (dictGet(_STATE_skeleton, "mounting")) {
        setMorphFactor(
          "frame_wall_mounting",
          "width",
          dictGet(_place_configuration, "row_1").length - 1
        );
        setMorphFactor(
          "frame_wall_mounting",
          "height",
          dictGet(_STATE_skeleton, "rows") - 1
        );
      } else {
        setMorphFactor(
          "leg_mounting",
          "width",
          dictGet(_place_configuration, "row_1").length - 1
        );
        setMorphFactor(
          "leg_mounting",
          "height",
          dictGet(_STATE_skeleton, "rows") - 1
        );
      }
      configure_addon_plates();
      configure_basic_plates();
      up_camera(
        dictGet(_STATE_skeleton, "rows"),
        dictGet(_place_configuration, "row_1").length
      );
      configure_top_lable(dictGet(_place_configuration, "row_1").length);
      add_ruler();
    }

    // Describe this function...
    function configure_mounting() {
      setMorphFactor("leg_mounting", "stend_mounting", 0);
      if (dictGet(_STATE_skeleton, "mounting")) {
        changeVis("frame_wall_mounting", true);
        for (var i_index8 in mailbox_obj) {
          let i = mailbox_obj[i_index8];
          var VARS = Object.defineProperties(
            {},
            {
              _name: {
                get: function () {
                  return _name;
                },
                set: function (val) {
                  _name = val;
                },
              },
              _plates_amount: {
                get: function () {
                  return _plates_amount;
                },
                set: function (val) {
                  _plates_amount = val;
                },
              },
              x_position: {
                get: function () {
                  return x_position;
                },
                set: function (val) {
                  x_position = val;
                },
              },
              _plates_basic_arr: {
                get: function () {
                  return _plates_basic_arr;
                },
                set: function (val) {
                  _plates_basic_arr = val;
                },
              },
              _place_type: {
                get: function () {
                  return _place_type;
                },
                set: function (val) {
                  _place_type = val;
                },
              },
              _G_step_hor: {
                get: function () {
                  return _G_step_hor;
                },
                set: function (val) {
                  _G_step_hor = val;
                },
              },
              mailbox_obj: {
                get: function () {
                  return mailbox_obj;
                },
                set: function (val) {
                  mailbox_obj = val;
                },
              },
              _top_lable_x_pos: {
                get: function () {
                  return _top_lable_x_pos;
                },
                set: function (val) {
                  _top_lable_x_pos = val;
                },
              },
              _cam_update_requests: {
                get: function () {
                  return _cam_update_requests;
                },
                set: function (val) {
                  _cam_update_requests = val;
                },
              },
              columns: {
                get: function () {
                  return columns;
                },
                set: function (val) {
                  columns = val;
                },
              },
              row: {
                get: function () {
                  return row;
                },
                set: function (val) {
                  row = val;
                },
              },
              col: {
                get: function () {
                  return col;
                },
                set: function (val) {
                  col = val;
                },
              },
              parent: {
                get: function () {
                  return parent2;
                },
                set: function (val) {
                  parent2 = val;
                },
              },
              template: {
                get: function () {
                  return template;
                },
                set: function (val) {
                  template = val;
                },
              },
              where: {
                get: function () {
                  return where;
                },
                set: function (val) {
                  where = val;
                },
              },
              num: {
                get: function () {
                  return num;
                },
                set: function (val) {
                  num = val;
                },
              },
              promise: {
                get: function () {
                  return promise;
                },
                set: function (val) {
                  promise = val;
                },
              },
              ruler_object_top: {
                get: function () {
                  return ruler_object_top;
                },
                set: function (val) {
                  ruler_object_top = val;
                },
              },
              callback: {
                get: function () {
                  return callback;
                },
                set: function (val) {
                  callback = val;
                },
              },
              visible: {
                get: function () {
                  return visible;
                },
                set: function (val) {
                  visible = val;
                },
              },
              show_ruler: {
                get: function () {
                  return show_ruler;
                },
                set: function (val) {
                  show_ruler = val;
                },
              },
              _name_obj: {
                get: function () {
                  return _name_obj;
                },
                set: function (val) {
                  _name_obj = val;
                },
              },
              _plates_template: {
                get: function () {
                  return _plates_template;
                },
                set: function (val) {
                  _plates_template = val;
                },
              },
              z_position: {
                get: function () {
                  return z_position;
                },
                set: function (val) {
                  z_position = val;
                },
              },
              _plates_basic_template: {
                get: function () {
                  return _plates_basic_template;
                },
                set: function (val) {
                  _plates_basic_template = val;
                },
              },
              _place_key: {
                get: function () {
                  return _place_key;
                },
                set: function (val) {
                  _place_key = val;
                },
              },
              _G_step_vert: {
                get: function () {
                  return _G_step_vert;
                },
                set: function (val) {
                  _G_step_vert = val;
                },
              },
              _leg_mouting_offset: {
                get: function () {
                  return _leg_mouting_offset;
                },
                set: function (val) {
                  _leg_mouting_offset = val;
                },
              },
              _STATE_skeleton: {
                get: function () {
                  return _STATE_skeleton;
                },
                set: function (val) {
                  _STATE_skeleton = val;
                },
              },
              _top_lable_y_pos: {
                get: function () {
                  return _top_lable_y_pos;
                },
                set: function (val) {
                  _top_lable_y_pos = val;
                },
              },
              _cam_update_counter: {
                get: function () {
                  return _cam_update_counter;
                },
                set: function (val) {
                  _cam_update_counter = val;
                },
              },
              j: {
                get: function () {
                  return j;
                },
                set: function (val) {
                  j = val;
                },
              },
              _zoom_step: {
                get: function () {
                  return _zoom_step;
                },
                set: function (val) {
                  _zoom_step = val;
                },
              },
              ruler_object_left: {
                get: function () {
                  return ruler_object_left;
                },
                set: function (val) {
                  ruler_object_left = val;
                },
              },
              _name_basic: {
                get: function () {
                  return _name_basic;
                },
                set: function (val) {
                  _name_basic = val;
                },
              },
              _plates_x_position: {
                get: function () {
                  return _plates_x_position;
                },
                set: function (val) {
                  _plates_x_position = val;
                },
              },
              i: {
                get: function () {
                  return i;
                },
                set: function (val) {
                  i = val;
                },
              },
              _plates_basic_group: {
                get: function () {
                  return _plates_basic_group;
                },
                set: function (val) {
                  _plates_basic_group = val;
                },
              },
              _place_configuration: {
                get: function () {
                  return _place_configuration;
                },
                set: function (val) {
                  _place_configuration = val;
                },
              },
              _basic_modules_arr: {
                get: function () {
                  return _basic_modules_arr;
                },
                set: function (val) {
                  _basic_modules_arr = val;
                },
              },
              _top_lable_z_pos: {
                get: function () {
                  return _top_lable_z_pos;
                },
                set: function (val) {
                  _top_lable_z_pos = val;
                },
              },
              _anim_running: {
                get: function () {
                  return _anim_running;
                },
                set: function (val) {
                  _anim_running = val;
                },
              },
              _JSON_placement_rules: {
                get: function () {
                  return _JSON_placement_rules;
                },
                set: function (val) {
                  _JSON_placement_rules = val;
                },
              },
              ruler_object_bottom: {
                get: function () {
                  return ruler_object_bottom;
                },
                set: function (val) {
                  ruler_object_bottom = val;
                },
              },
              _name_obj_basic: {
                get: function () {
                  return _name_obj_basic;
                },
                set: function (val) {
                  _name_obj_basic = val;
                },
              },
              _plates_z_position: {
                get: function () {
                  return _plates_z_position;
                },
                set: function (val) {
                  _plates_z_position = val;
                },
              },
              _place_direction: {
                get: function () {
                  return _place_direction;
                },
                set: function (val) {
                  _place_direction = val;
                },
              },
              placeholder_modules_arr: {
                get: function () {
                  return placeholder_modules_arr;
                },
                set: function (val) {
                  placeholder_modules_arr = val;
                },
              },
              _STATE_addon_module: {
                get: function () {
                  return _STATE_addon_module;
                },
                set: function (val) {
                  _STATE_addon_module = val;
                },
              },
              _STATE_top_lable: {
                get: function () {
                  return _STATE_top_lable;
                },
                set: function (val) {
                  _STATE_top_lable = val;
                },
              },
              _top_lable_xyz_scale: {
                get: function () {
                  return _top_lable_xyz_scale;
                },
                set: function (val) {
                  _top_lable_xyz_scale = val;
                },
              },
              _cam_shift: {
                get: function () {
                  return _cam_shift;
                },
                set: function (val) {
                  _cam_shift = val;
                },
              },
              _basic_module_id: {
                get: function () {
                  return _basic_module_id;
                },
                set: function (val) {
                  _basic_module_id = val;
                },
              },
              _temp_text: {
                get: function () {
                  return _temp_text;
                },
                set: function (val) {
                  _temp_text = val;
                },
              },
              _plates_temp: {
                get: function () {
                  return _plates_temp;
                },
                set: function (val) {
                  _plates_temp = val;
                },
              },
              _STATE_scene: {
                get: function () {
                  return _STATE_scene;
                },
                set: function (val) {
                  _STATE_scene = val;
                },
              },
              _STATE_basic_module: {
                get: function () {
                  return _STATE_basic_module;
                },
                set: function (val) {
                  _STATE_basic_module = val;
                },
              },
              calculated_width: {
                get: function () {
                  return calculated_width;
                },
                set: function (val) {
                  calculated_width = val;
                },
              },
              ruler_points: {
                get: function () {
                  return ruler_points;
                },
                set: function (val) {
                  ruler_points = val;
                },
              },
              _plates_arr: {
                get: function () {
                  return _plates_arr;
                },
                set: function (val) {
                  _plates_arr = val;
                },
              },
              _STATE_addon_plates: {
                get: function () {
                  return _STATE_addon_plates;
                },
                set: function (val) {
                  _STATE_addon_plates = val;
                },
              },
              _place_shift: {
                get: function () {
                  return _place_shift;
                },
                set: function (val) {
                  _place_shift = val;
                },
              },
              _plaсe_shift_z: {
                get: function () {
                  return _pla_D1_81e_shift_z;
                },
                set: function (val) {
                  _pla_D1_81e_shift_z = val;
                },
              },
              _character_number: {
                get: function () {
                  return _character_number;
                },
                set: function (val) {
                  _character_number = val;
                },
              },
              _JSON_font_path: {
                get: function () {
                  return _JSON_font_path;
                },
                set: function (val) {
                  _JSON_font_path = val;
                },
              },
              calculated_height: {
                get: function () {
                  return calculated_height;
                },
                set: function (val) {
                  calculated_height = val;
                },
              },
              LEG_WIDTH: {
                get: function () {
                  return LEG_WIDTH;
                },
                set: function (val) {
                  LEG_WIDTH = val;
                },
              },
              _plates_height_limit: {
                get: function () {
                  return _plates_height_limit;
                },
                set: function (val) {
                  _plates_height_limit = val;
                },
              },
              _STATE_basic_plates: {
                get: function () {
                  return _STATE_basic_plates;
                },
                set: function (val) {
                  _STATE_basic_plates = val;
                },
              },
              _top_label_single_char: {
                get: function () {
                  return _top_label_single_char;
                },
                set: function (val) {
                  _top_label_single_char = val;
                },
              },
              _cam_module_target_position_x: {
                get: function () {
                  return _cam_module_target_position_x;
                },
                set: function (val) {
                  _cam_module_target_position_x = val;
                },
              },
              calculated_depth: {
                get: function () {
                  return calculated_depth;
                },
                set: function (val) {
                  calculated_depth = val;
                },
              },
              DISTANCE_TO_FLOOR: {
                get: function () {
                  return DISTANCE_TO_FLOOR;
                },
                set: function (val) {
                  DISTANCE_TO_FLOOR = val;
                },
              },
              _plates_z_step: {
                get: function () {
                  return _plates_z_step;
                },
                set: function (val) {
                  _plates_z_step = val;
                },
              },
              _3_15_exeption: {
                get: function () {
                  return _3_15_exeption;
                },
                set: function (val) {
                  _3_15_exeption = val;
                },
              },
              _cam_module_target_position_z: {
                get: function () {
                  return _cam_module_target_position_z;
                },
                set: function (val) {
                  _cam_module_target_position_z = val;
                },
              },
              ONE_BOX_WIDTH: {
                get: function () {
                  return ONE_BOX_WIDTH;
                },
                set: function (val) {
                  ONE_BOX_WIDTH = val;
                },
              },
              _plates_x_step: {
                get: function () {
                  return _plates_x_step;
                },
                set: function (val) {
                  _plates_x_step = val;
                },
              },
              ONE_BOX_HEIGHT: {
                get: function () {
                  return ONE_BOX_HEIGHT;
                },
                set: function (val) {
                  ONE_BOX_HEIGHT = val;
                },
              },
              _plates_shift: {
                get: function () {
                  return _plates_shift;
                },
                set: function (val) {
                  _plates_shift = val;
                },
              },
              _cam_position_x: {
                get: function () {
                  return _cam_position_x;
                },
                set: function (val) {
                  _cam_position_x = val;
                },
              },
              TOP_LABLE_HEIGHT: {
                get: function () {
                  return TOP_LABLE_HEIGHT;
                },
                set: function (val) {
                  TOP_LABLE_HEIGHT = val;
                },
              },
              _plates_max: {
                get: function () {
                  return _plates_max;
                },
                set: function (val) {
                  _plates_max = val;
                },
              },
              _top_label_text_area: {
                get: function () {
                  return _top_label_text_area;
                },
                set: function (val) {
                  _top_label_text_area = val;
                },
              },
              _cam_position_z: {
                get: function () {
                  return _cam_position_z;
                },
                set: function (val) {
                  _cam_position_z = val;
                },
              },
              _plates_group: {
                get: function () {
                  return _plates_group;
                },
                set: function (val) {
                  _plates_group = val;
                },
              },
              _cam_state: {
                get: function () {
                  return _cam_state;
                },
                set: function (val) {
                  _cam_state = val;
                },
              },
              _plates_row_limit: {
                get: function () {
                  return _plates_row_limit;
                },
                set: function (val) {
                  _plates_row_limit = val;
                },
              },
              _basic_temp_emptyes: {
                get: function () {
                  return _basic_temp_emptyes;
                },
                set: function (val) {
                  _basic_temp_emptyes = val;
                },
              },
              _counter: {
                get: function () {
                  return _counter;
                },
                set: function (val) {
                  _counter = val;
                },
              },
              _temp_module: {
                get: function () {
                  return _temp_module;
                },
                set: function (val) {
                  _temp_module = val;
                },
              },
            }
          );

          setObjTransform(i, false, "position", ["", 0, ""], false);
        }
        changeVis("leg_mounting", false);
        _top_lable_y_pos = -0.058819;
      } else {
        changeVis("leg_mounting", true);
        for (var i_index9 in mailbox_obj) {
          let i = mailbox_obj[i_index9];
          var VARS = Object.defineProperties(
            {},
            {
              _name: {
                get: function () {
                  return _name;
                },
                set: function (val) {
                  _name = val;
                },
              },
              _plates_amount: {
                get: function () {
                  return _plates_amount;
                },
                set: function (val) {
                  _plates_amount = val;
                },
              },
              x_position: {
                get: function () {
                  return x_position;
                },
                set: function (val) {
                  x_position = val;
                },
              },
              _plates_basic_arr: {
                get: function () {
                  return _plates_basic_arr;
                },
                set: function (val) {
                  _plates_basic_arr = val;
                },
              },
              _place_type: {
                get: function () {
                  return _place_type;
                },
                set: function (val) {
                  _place_type = val;
                },
              },
              _G_step_hor: {
                get: function () {
                  return _G_step_hor;
                },
                set: function (val) {
                  _G_step_hor = val;
                },
              },
              mailbox_obj: {
                get: function () {
                  return mailbox_obj;
                },
                set: function (val) {
                  mailbox_obj = val;
                },
              },
              _top_lable_x_pos: {
                get: function () {
                  return _top_lable_x_pos;
                },
                set: function (val) {
                  _top_lable_x_pos = val;
                },
              },
              _cam_update_requests: {
                get: function () {
                  return _cam_update_requests;
                },
                set: function (val) {
                  _cam_update_requests = val;
                },
              },
              columns: {
                get: function () {
                  return columns;
                },
                set: function (val) {
                  columns = val;
                },
              },
              row: {
                get: function () {
                  return row;
                },
                set: function (val) {
                  row = val;
                },
              },
              col: {
                get: function () {
                  return col;
                },
                set: function (val) {
                  col = val;
                },
              },
              parent: {
                get: function () {
                  return parent2;
                },
                set: function (val) {
                  parent2 = val;
                },
              },
              template: {
                get: function () {
                  return template;
                },
                set: function (val) {
                  template = val;
                },
              },
              where: {
                get: function () {
                  return where;
                },
                set: function (val) {
                  where = val;
                },
              },
              num: {
                get: function () {
                  return num;
                },
                set: function (val) {
                  num = val;
                },
              },
              promise: {
                get: function () {
                  return promise;
                },
                set: function (val) {
                  promise = val;
                },
              },
              ruler_object_top: {
                get: function () {
                  return ruler_object_top;
                },
                set: function (val) {
                  ruler_object_top = val;
                },
              },
              callback: {
                get: function () {
                  return callback;
                },
                set: function (val) {
                  callback = val;
                },
              },
              visible: {
                get: function () {
                  return visible;
                },
                set: function (val) {
                  visible = val;
                },
              },
              show_ruler: {
                get: function () {
                  return show_ruler;
                },
                set: function (val) {
                  show_ruler = val;
                },
              },
              _name_obj: {
                get: function () {
                  return _name_obj;
                },
                set: function (val) {
                  _name_obj = val;
                },
              },
              _plates_template: {
                get: function () {
                  return _plates_template;
                },
                set: function (val) {
                  _plates_template = val;
                },
              },
              z_position: {
                get: function () {
                  return z_position;
                },
                set: function (val) {
                  z_position = val;
                },
              },
              _plates_basic_template: {
                get: function () {
                  return _plates_basic_template;
                },
                set: function (val) {
                  _plates_basic_template = val;
                },
              },
              _place_key: {
                get: function () {
                  return _place_key;
                },
                set: function (val) {
                  _place_key = val;
                },
              },
              _G_step_vert: {
                get: function () {
                  return _G_step_vert;
                },
                set: function (val) {
                  _G_step_vert = val;
                },
              },
              _leg_mouting_offset: {
                get: function () {
                  return _leg_mouting_offset;
                },
                set: function (val) {
                  _leg_mouting_offset = val;
                },
              },
              _STATE_skeleton: {
                get: function () {
                  return _STATE_skeleton;
                },
                set: function (val) {
                  _STATE_skeleton = val;
                },
              },
              _top_lable_y_pos: {
                get: function () {
                  return _top_lable_y_pos;
                },
                set: function (val) {
                  _top_lable_y_pos = val;
                },
              },
              _cam_update_counter: {
                get: function () {
                  return _cam_update_counter;
                },
                set: function (val) {
                  _cam_update_counter = val;
                },
              },
              j: {
                get: function () {
                  return j;
                },
                set: function (val) {
                  j = val;
                },
              },
              _zoom_step: {
                get: function () {
                  return _zoom_step;
                },
                set: function (val) {
                  _zoom_step = val;
                },
              },
              ruler_object_left: {
                get: function () {
                  return ruler_object_left;
                },
                set: function (val) {
                  ruler_object_left = val;
                },
              },
              _name_basic: {
                get: function () {
                  return _name_basic;
                },
                set: function (val) {
                  _name_basic = val;
                },
              },
              _plates_x_position: {
                get: function () {
                  return _plates_x_position;
                },
                set: function (val) {
                  _plates_x_position = val;
                },
              },
              i: {
                get: function () {
                  return i;
                },
                set: function (val) {
                  i = val;
                },
              },
              _plates_basic_group: {
                get: function () {
                  return _plates_basic_group;
                },
                set: function (val) {
                  _plates_basic_group = val;
                },
              },
              _place_configuration: {
                get: function () {
                  return _place_configuration;
                },
                set: function (val) {
                  _place_configuration = val;
                },
              },
              _basic_modules_arr: {
                get: function () {
                  return _basic_modules_arr;
                },
                set: function (val) {
                  _basic_modules_arr = val;
                },
              },
              _top_lable_z_pos: {
                get: function () {
                  return _top_lable_z_pos;
                },
                set: function (val) {
                  _top_lable_z_pos = val;
                },
              },
              _anim_running: {
                get: function () {
                  return _anim_running;
                },
                set: function (val) {
                  _anim_running = val;
                },
              },
              _JSON_placement_rules: {
                get: function () {
                  return _JSON_placement_rules;
                },
                set: function (val) {
                  _JSON_placement_rules = val;
                },
              },
              ruler_object_bottom: {
                get: function () {
                  return ruler_object_bottom;
                },
                set: function (val) {
                  ruler_object_bottom = val;
                },
              },
              _name_obj_basic: {
                get: function () {
                  return _name_obj_basic;
                },
                set: function (val) {
                  _name_obj_basic = val;
                },
              },
              _plates_z_position: {
                get: function () {
                  return _plates_z_position;
                },
                set: function (val) {
                  _plates_z_position = val;
                },
              },
              _place_direction: {
                get: function () {
                  return _place_direction;
                },
                set: function (val) {
                  _place_direction = val;
                },
              },
              placeholder_modules_arr: {
                get: function () {
                  return placeholder_modules_arr;
                },
                set: function (val) {
                  placeholder_modules_arr = val;
                },
              },
              _STATE_addon_module: {
                get: function () {
                  return _STATE_addon_module;
                },
                set: function (val) {
                  _STATE_addon_module = val;
                },
              },
              _STATE_top_lable: {
                get: function () {
                  return _STATE_top_lable;
                },
                set: function (val) {
                  _STATE_top_lable = val;
                },
              },
              _top_lable_xyz_scale: {
                get: function () {
                  return _top_lable_xyz_scale;
                },
                set: function (val) {
                  _top_lable_xyz_scale = val;
                },
              },
              _cam_shift: {
                get: function () {
                  return _cam_shift;
                },
                set: function (val) {
                  _cam_shift = val;
                },
              },
              _basic_module_id: {
                get: function () {
                  return _basic_module_id;
                },
                set: function (val) {
                  _basic_module_id = val;
                },
              },
              _temp_text: {
                get: function () {
                  return _temp_text;
                },
                set: function (val) {
                  _temp_text = val;
                },
              },
              _plates_temp: {
                get: function () {
                  return _plates_temp;
                },
                set: function (val) {
                  _plates_temp = val;
                },
              },
              _STATE_scene: {
                get: function () {
                  return _STATE_scene;
                },
                set: function (val) {
                  _STATE_scene = val;
                },
              },
              _STATE_basic_module: {
                get: function () {
                  return _STATE_basic_module;
                },
                set: function (val) {
                  _STATE_basic_module = val;
                },
              },
              calculated_width: {
                get: function () {
                  return calculated_width;
                },
                set: function (val) {
                  calculated_width = val;
                },
              },
              ruler_points: {
                get: function () {
                  return ruler_points;
                },
                set: function (val) {
                  ruler_points = val;
                },
              },
              _plates_arr: {
                get: function () {
                  return _plates_arr;
                },
                set: function (val) {
                  _plates_arr = val;
                },
              },
              _STATE_addon_plates: {
                get: function () {
                  return _STATE_addon_plates;
                },
                set: function (val) {
                  _STATE_addon_plates = val;
                },
              },
              _place_shift: {
                get: function () {
                  return _place_shift;
                },
                set: function (val) {
                  _place_shift = val;
                },
              },
              _plaсe_shift_z: {
                get: function () {
                  return _pla_D1_81e_shift_z;
                },
                set: function (val) {
                  _pla_D1_81e_shift_z = val;
                },
              },
              _character_number: {
                get: function () {
                  return _character_number;
                },
                set: function (val) {
                  _character_number = val;
                },
              },
              _JSON_font_path: {
                get: function () {
                  return _JSON_font_path;
                },
                set: function (val) {
                  _JSON_font_path = val;
                },
              },
              calculated_height: {
                get: function () {
                  return calculated_height;
                },
                set: function (val) {
                  calculated_height = val;
                },
              },
              LEG_WIDTH: {
                get: function () {
                  return LEG_WIDTH;
                },
                set: function (val) {
                  LEG_WIDTH = val;
                },
              },
              _plates_height_limit: {
                get: function () {
                  return _plates_height_limit;
                },
                set: function (val) {
                  _plates_height_limit = val;
                },
              },
              _STATE_basic_plates: {
                get: function () {
                  return _STATE_basic_plates;
                },
                set: function (val) {
                  _STATE_basic_plates = val;
                },
              },
              _top_label_single_char: {
                get: function () {
                  return _top_label_single_char;
                },
                set: function (val) {
                  _top_label_single_char = val;
                },
              },
              _cam_module_target_position_x: {
                get: function () {
                  return _cam_module_target_position_x;
                },
                set: function (val) {
                  _cam_module_target_position_x = val;
                },
              },
              calculated_depth: {
                get: function () {
                  return calculated_depth;
                },
                set: function (val) {
                  calculated_depth = val;
                },
              },
              DISTANCE_TO_FLOOR: {
                get: function () {
                  return DISTANCE_TO_FLOOR;
                },
                set: function (val) {
                  DISTANCE_TO_FLOOR = val;
                },
              },
              _plates_z_step: {
                get: function () {
                  return _plates_z_step;
                },
                set: function (val) {
                  _plates_z_step = val;
                },
              },
              _3_15_exeption: {
                get: function () {
                  return _3_15_exeption;
                },
                set: function (val) {
                  _3_15_exeption = val;
                },
              },
              _cam_module_target_position_z: {
                get: function () {
                  return _cam_module_target_position_z;
                },
                set: function (val) {
                  _cam_module_target_position_z = val;
                },
              },
              ONE_BOX_WIDTH: {
                get: function () {
                  return ONE_BOX_WIDTH;
                },
                set: function (val) {
                  ONE_BOX_WIDTH = val;
                },
              },
              _plates_x_step: {
                get: function () {
                  return _plates_x_step;
                },
                set: function (val) {
                  _plates_x_step = val;
                },
              },
              ONE_BOX_HEIGHT: {
                get: function () {
                  return ONE_BOX_HEIGHT;
                },
                set: function (val) {
                  ONE_BOX_HEIGHT = val;
                },
              },
              _plates_shift: {
                get: function () {
                  return _plates_shift;
                },
                set: function (val) {
                  _plates_shift = val;
                },
              },
              _cam_position_x: {
                get: function () {
                  return _cam_position_x;
                },
                set: function (val) {
                  _cam_position_x = val;
                },
              },
              TOP_LABLE_HEIGHT: {
                get: function () {
                  return TOP_LABLE_HEIGHT;
                },
                set: function (val) {
                  TOP_LABLE_HEIGHT = val;
                },
              },
              _plates_max: {
                get: function () {
                  return _plates_max;
                },
                set: function (val) {
                  _plates_max = val;
                },
              },
              _top_label_text_area: {
                get: function () {
                  return _top_label_text_area;
                },
                set: function (val) {
                  _top_label_text_area = val;
                },
              },
              _cam_position_z: {
                get: function () {
                  return _cam_position_z;
                },
                set: function (val) {
                  _cam_position_z = val;
                },
              },
              _plates_group: {
                get: function () {
                  return _plates_group;
                },
                set: function (val) {
                  _plates_group = val;
                },
              },
              _cam_state: {
                get: function () {
                  return _cam_state;
                },
                set: function (val) {
                  _cam_state = val;
                },
              },
              _plates_row_limit: {
                get: function () {
                  return _plates_row_limit;
                },
                set: function (val) {
                  _plates_row_limit = val;
                },
              },
              _basic_temp_emptyes: {
                get: function () {
                  return _basic_temp_emptyes;
                },
                set: function (val) {
                  _basic_temp_emptyes = val;
                },
              },
              _counter: {
                get: function () {
                  return _counter;
                },
                set: function (val) {
                  _counter = val;
                },
              },
              _temp_module: {
                get: function () {
                  return _temp_module;
                },
                set: function (val) {
                  _temp_module = val;
                },
              },
            }
          );

          setObjTransform(
            i,
            false,
            "position",
            ["", _leg_mouting_offset, ""],
            false
          );
        }
        changeVis("frame_wall_mounting", false);
        _top_lable_y_pos = -0.058819 + _leg_mouting_offset;
        if (dictGet(_STATE_skeleton, "screws")) {
          setMorphFactor("leg_mounting", "stend_mounting", 1);
        }
      }
      cofigure_skeleton();
    }

    function matGetValues(matName) {
      var mat = v3d.SceneUtils.getMaterialByName(appInstance, matName);
      if (!mat) return [];

      if (mat.isMeshNodeMaterial) return Object.keys(mat.nodeValueMap);
      else if (mat.isMeshStandardMaterial)
        return [
          "metalness",
          "roughness",
          "bumpScale",
          "emissiveIntensity",
          "envMapIntensity",
        ];
      else return [];
    }

    // setMaterialValue puzzle
    function setMaterialValue(matName, valName, value) {
      var values = matGetValues(matName);
      if (values.indexOf(valName) < 0) return;

      var mats = v3d.SceneUtils.getMaterialsByName(appInstance, matName);

      for (var i = 0; i < mats.length; i++) {
        var mat = mats[i];

        if (mat.isMeshNodeMaterial) {
          var valIdx = mat.nodeValueMap[valName];
          mat.nodeValue[valIdx] = Number(value);
        } else mat[valName] = Number(value);

        if (appInstance.scene !== null) {
          if (mat === appInstance.scene.worldMaterial) {
            appInstance.updateEnvironment(mat);
          }
        }
      }
    }

    function matGetColors(matName) {
      var mat = v3d.SceneUtils.getMaterialByName(appInstance, matName);
      if (!mat) return [];

      if (mat.isMeshNodeMaterial) return Object.keys(mat.nodeRGBMap);
      else if (mat.isMeshStandardMaterial) return ["color", "emissive"];
      else return [];
    }

    // setMaterialColor puzzle
    function setMaterialColor(matName, colName, r, g, b, cssCode) {
      var colors = matGetColors(matName);

      if (colors.indexOf(colName) < 0) return;

      if (cssCode) {
        var color = new v3d.Color(cssCode);
        color.convertSRGBToLinear();
        r = color.r;
        g = color.g;
        b = color.b;
      }

      var mats = v3d.SceneUtils.getMaterialsByName(appInstance, matName);

      for (var i = 0; i < mats.length; i++) {
        var mat = mats[i];

        if (mat.isMeshNodeMaterial) {
          var rgbIdx = mat.nodeRGBMap[colName];
          mat.nodeRGB[rgbIdx].x = r;
          mat.nodeRGB[rgbIdx].y = g;
          mat.nodeRGB[rgbIdx].z = b;
        } else {
          mat[colName].r = r;
          mat[colName].g = g;
          mat[colName].b = b;
        }
        mat.needsUpdate = true;

        if (appInstance.scene !== null) {
          if (mat === appInstance.scene.worldMaterial) {
            appInstance.updateEnvironment(mat);
          }
        }
      }
    }

    // Describe this function...
    function light_on() {
      /* addon_plates_light */
      if (dictGet(_STATE_addon_plates, "light_on")) {
        setMaterialValue("light_mat", "light_on", 2);
      } else {
        setMaterialValue("light_mat", "light_on", 0);
      }
      /* ring_button_light */
      if (dictGet(_STATE_addon_plates, "light_ring_on")) {
        setMaterialValue("button_light_mat", "light_on", 4);
        setMaterialColor(
          "button_light_mat",
          "RGB_buttons_light ",
          0,
          0,
          0,
          dictGet(_STATE_addon_plates, "light_ring_color")
        );
      } else {
        setMaterialValue("button_light_mat", "light_on", 0);
      }
      /* top_lable_light */
      if (dictGet(_STATE_top_lable, "light_on")) {
        setMaterialValue("top_lable_light_mat", "light_on", 4);
      } else {
        setMaterialValue("top_lable_light_mat", "light_on", 0);
      }
    }

    // Describe this function...
    function configure_top_lable_name() {
      if (dictGet(_STATE_top_lable, "name")) {
        updateTextObj(
          [
            ["GROUP", "top_lable"],
            ["GROUP", "top_lable_mirrored"],
            ["GROUP", "top_lable_center"],
          ],
          dictGet(_STATE_top_lable, "name")
        );
      } else {
        updateTextObj(
          [
            ["GROUP", "top_lable"],
            ["GROUP", "top_lable_mirrored"],
            ["GROUP", "top_lable_center"],
          ],
          dictGet(_STATE_top_lable, "default_name")
        );
      }
    }

    // Describe this function...
    function configure_top_lable(columns) {
      /* Zero */
      setMorphFactor("leg_mounting", "top_lable", 0);
      setMorphFactor("frame_wall_mounting", "top_lable", 0);
      changeVis(["GROUP", "top_lable"], false);
      changeVis(["GROUP", "top_lable_mirrored"], false);
      changeVis(["GROUP", "top_lable_center"], false);
      /* Configure */
      _character_number = dictGet(_STATE_top_lable, "name").length;
      _top_label_text_area = 0.385 * columns;
      _top_lable_xyz_scale = Math.min(
        Math.max(
          _top_label_text_area / _character_number / _top_label_single_char,
          1
        ),
        3.8
      );
      if (dictGet(_STATE_top_lable, "top_lable")) {
        setMorphFactor("leg_mounting", "top_lable", 1);
        setMorphFactor("frame_wall_mounting", "top_lable", 1);
        if (dictGet(_STATE_top_lable, "top_text") == "right") {
          changeVis(["GROUP", "top_lable_mirrored"], true);
          changeVis(["GROUP", "top_lable"], false);
          changeVis(["GROUP", "top_lable_center"], false);
          setObjTransform(
            "name_text_group_mirrored",
            false,
            "position",
            [
              (columns - 1) * 0.385 + _top_lable_x_pos + 0.36,
              _top_lable_y_pos,
              _top_lable_z_pos,
            ],
            false
          );
          if (columns >= 1) {
            setObjTransform(
              "name_text_group_mirrored",
              false,
              "scale",
              [
                _top_lable_xyz_scale,
                _top_lable_xyz_scale,
                _top_lable_xyz_scale,
              ],
              false
            );
          }
        } else if (dictGet(_STATE_top_lable, "top_text") == "left") {
          changeVis(["GROUP", "top_lable"], true);
          setObjTransform(
            "name_text_group",
            false,
            "position",
            [_top_lable_x_pos, _top_lable_y_pos, _top_lable_z_pos],
            false
          );
          if (columns >= 1) {
            setObjTransform(
              "name_text_group",
              false,
              "scale",
              [
                _top_lable_xyz_scale,
                _top_lable_xyz_scale,
                _top_lable_xyz_scale,
              ],
              false
            );
          }
          changeVis(["GROUP", "top_lable_mirrored"], false);
          changeVis(["GROUP", "top_lable_center"], false);
        } else if (dictGet(_STATE_top_lable, "top_text") == "center") {
          changeVis(["GROUP", "top_lable_center"], true);
          setObjTransform(
            "name_text_group_center",
            false,
            "position",
            [
              (columns - 1) * 0.192 + _top_lable_x_pos + 0.18,
              _top_lable_y_pos,
              _top_lable_z_pos,
            ],
            false
          );
          if (columns >= 1) {
            setObjTransform(
              "name_text_group_center",
              false,
              "scale",
              [
                _top_lable_xyz_scale,
                _top_lable_xyz_scale,
                _top_lable_xyz_scale,
              ],
              false
            );
          }
          changeVis(["GROUP", "top_lable_mirrored"], false);
          changeVis(["GROUP", "top_lable"], false);
        }
      }
      configure_top_lable_name();
    }

    // Describe this function...
    function up_camera(row, col) {
      _cam_update_requests.push([col, row]);
      _cam_update_counter.push([col]);
    }

    // setCameraParam puzzle
    function setCameraParam(type, objSelector, param) {
      var objNames = retrieveObjectNames(objSelector);

      objNames.forEach(function (objName) {
        if (!objName) return;

        var obj = getObjectByName(objName);
        if (!obj || !obj.isCamera) return;

        if (!(obj.isPerspectiveCamera || obj.isOrthographicCamera)) {
          console.error(
            "setCameraParam: Incompatible camera type, have to be perspective or orthographic"
          );
          return;
        }

        let isSetOrbitParam = false;
        switch (type) {
          case "ORBIT_MIN_DISTANCE_PERSP":
          case "ORBIT_MAX_DISTANCE_PERSP":
          case "ORBIT_MIN_ZOOM_ORTHO":
          case "ORBIT_MAX_ZOOM_ORTHO":
          case "ORBIT_MIN_VERTICAL_ANGLE":
          case "ORBIT_MAX_VERTICAL_ANGLE":
          case "ORBIT_MIN_HORIZONTAL_ANGLE":
          case "ORBIT_MAX_HORIZONTAL_ANGLE":
          case "ORBIT_ALLOW_TURNOVER":
            isSetOrbitParam = true;
            break;
        }
        let isSetControlsParam =
          [
            "ROTATION_SPEED",
            "MOVEMENT_SPEED",
            "ALLOW_PANNING",
            "ALLOW_ZOOM",
            "KEYBOARD_CONTROLS",
          ].includes(type) || isSetOrbitParam;
        if (isSetControlsParam) {
          if (!obj.controls) {
            console.error(
              'setCameraParam: The "' + objName + '" camera has no controller'
            );
            return;
          } else if (isSetOrbitParam && obj.controls.type != "ORBIT") {
            console.error("setCameraParam: Incompatible camera controller");
            return;
          }
        }

        switch (type) {
          case "FIELD_OF_VIEW":
            if (obj.isPerspectiveCamera) {
              obj.fov = param;
              obj.updateProjectionMatrix();
            } else {
              console.error(
                "setCameraParam: Incompatible camera type, have to be perspective"
              );
              return;
            }
            break;
          case "ORTHO_SCALE":
            if (obj.isOrthographicCamera) {
              obj.zoom = param;
              obj.updateProjectionMatrix();
            } else {
              console.error(
                "setCameraParam: Incompatible camera type, have to be orthographic"
              );
              return;
            }
            break;
          case "ROTATION_SPEED":
            obj.controls.rotateSpeed = param;
            break;
          case "MOVEMENT_SPEED":
            obj.controls.moveSpeed = param;
            break;
          case "ALLOW_PANNING":
            obj.controls.enablePan = param;
            break;
          case "ALLOW_ZOOM":
            obj.controls.enableZoom = param;
            break;
          case "KEYBOARD_CONTROLS":
            obj.controls.enableKeys = param;
            break;
          case "ORBIT_MIN_DISTANCE_PERSP":
            if (obj.isPerspectiveCamera) {
              obj.controls.orbitMinDistance = param;
            } else {
              console.error(
                "setCameraParam: Incompatible camera type, have to be perspective"
              );
              return;
            }
            break;
          case "ORBIT_MAX_DISTANCE_PERSP":
            if (obj.isPerspectiveCamera) {
              obj.controls.orbitMaxDistance = param;
            } else {
              console.error(
                "setCameraParam: Incompatible camera type, have to be perspective"
              );
              return;
            }
            break;
          case "ORBIT_MIN_ZOOM_ORTHO":
            if (obj.isOrthographicCamera) {
              obj.controls.orbitMinZoom = param;
            } else {
              console.error(
                "setCameraParam: Incompatible camera type, have to be orthographic"
              );
              return;
            }
            break;
          case "ORBIT_MAX_ZOOM_ORTHO":
            if (obj.isOrthographicCamera) {
              obj.controls.orbitMaxZoom = param;
            } else {
              console.error(
                "setCameraParam: Incompatible camera type, have to be orthographic"
              );
              return;
            }
            break;
          case "ORBIT_MIN_VERTICAL_ANGLE":
            obj.controls.orbitMinPolarAngle = v3d.MathUtils.degToRad(param);
            break;
          case "ORBIT_MAX_VERTICAL_ANGLE":
            obj.controls.orbitMaxPolarAngle = v3d.MathUtils.degToRad(param);
            break;
          case "ORBIT_MIN_HORIZONTAL_ANGLE":
            obj.controls.orbitMinAzimuthAngle = v3d.MathUtils.degToRad(param);
            break;
          case "ORBIT_MAX_HORIZONTAL_ANGLE":
            obj.controls.orbitMaxAzimuthAngle = v3d.MathUtils.degToRad(param);
            break;
          case "ORBIT_ALLOW_TURNOVER":
            obj.controls.orbitEnableTurnover = param;
            break;
          case "CLIP_START":
            obj.near = param;
            obj.updateProjectionMatrix();
            break;
          case "CLIP_END":
            obj.far = param;
            obj.updateProjectionMatrix();
            break;
        }

        if (isSetControlsParam) appInstance.enableControls();
      });
    }

    // tweenCamera puzzle
    function tweenCamera(
      posOrObj,
      targetOrObj,
      duration,
      doSlot,
      movementType
    ) {
      var camera = appInstance.getCamera();

      if (Array.isArray(posOrObj)) {
        var worldPos = _pGlob.vec3Tmp.fromArray(posOrObj);
        worldPos = coordsTransform(worldPos, getCoordSystem(), "Y_UP_RIGHT");
      } else if (posOrObj) {
        var posObj = getObjectByName(posOrObj);
        if (!posObj) return;
        var worldPos = posObj.getWorldPosition(_pGlob.vec3Tmp);
      } else {
        // empty input means: don't change the position
        var worldPos = camera.getWorldPosition(_pGlob.vec3Tmp);
      }

      if (Array.isArray(targetOrObj)) {
        var worldTarget = _pGlob.vec3Tmp2.fromArray(targetOrObj);
        worldTarget = coordsTransform(
          worldTarget,
          getCoordSystem(),
          "Y_UP_RIGHT"
        );
      } else {
        var targObj = getObjectByName(targetOrObj);
        if (!targObj) return;
        var worldTarget = targObj.getWorldPosition(_pGlob.vec3Tmp2);
      }

      duration = Math.max(0, duration);

      if (appInstance.controls && appInstance.controls.tween) {
        // orbit and flying cameras
        if (!appInstance.controls.inTween) {
          appInstance.controls.tween(
            worldPos,
            worldTarget,
            duration,
            doSlot,
            movementType
          );
        }
      } else {
        // TODO: static camera, just position it for now
        if (camera.parent) {
          camera.parent.worldToLocal(worldPos);
        }
        camera.position.copy(worldPos);
        camera.lookAt(worldTarget);
        doSlot();
      }
    }

    // setTimeout puzzle
    function registerSetTimeout(timeout, callback) {
      window.setTimeout(callback, 1000 * timeout);
    }

    // everyFrame puzzle
    function registerEveryFrame(callback) {
      if (typeof callback == "function") {
        appInstance.renderCallbacks.push(callback);
        if (PL.editorRenderCallbacks)
          PL.editorRenderCallbacks.push([appInstance, callback]);
      }
    }

    // Describe this function...
    function cam_position() {
      setCameraParam("KEYBOARD_CONTROLS", "Camera", false);
      if (dictGet(_STATE_skeleton, "mirrored")) {
        _cam_shift = _place_shift;
      } else {
        _cam_shift = 0;
      }
      _basic_module_id = dictGet(_STATE_basic_module, "id");
      if (dictGet(_STATE_skeleton, "cam_addon_target")) {
        _cam_module_target_position_x = getObjTransform(
          "addon_module",
          false,
          "position",
          "x"
        );
        _cam_module_target_position_z =
          getObjTransform("addon_module", false, "position", "z") - 0.184698;
        setCameraParam("ALLOW_PANNING", "Camera", true);
        setObjTransform(
          "cam_module_target",
          false,
          "position",
          [_cam_module_target_position_x, "", _cam_module_target_position_z],
          false
        );
        tweenCamera(
          "cam_module_position",
          "cam_module_target",
          2,
          function () {},
          0
        );
        dictSet(_STATE_scene, "defalult_cam position", false);
      } else if (_basic_module_id >= 2 && _basic_module_id <= 16) {
        _cam_module_target_position_x =
          getObjTransform(
            "basic_module" + String(_basic_module_id),
            false,
            "position",
            "x"
          ) - _cam_shift;
        _cam_module_target_position_z =
          getObjTransform(
            "basic_module" + String(_basic_module_id),
            false,
            "position",
            "z"
          ) - 0.184698;
        setObjTransform(
          "cam_module_target",
          false,
          "position",
          [_cam_module_target_position_x, "", _cam_module_target_position_z],
          false
        );
        tweenCamera(
          "cam_module_position",
          "cam_module_target",
          2,
          function () {},
          0
        );
        setCameraParam("ALLOW_PANNING", "Camera", true);
        dictSet(_STATE_scene, "defalult_cam position", false);
      } else if (dictGet(_STATE_scene, "defalult_cam position")) {
        tweenCamera(
          "camera_default_position",
          "camera_default_target",
          2,
          function () {},
          0
        );
      } else {
        setCameraParam("ALLOW_PANNING", "Camera", true);
        registerEveryFrame(function () {
          if (_cam_update_requests.slice(-1)[0]) {
            if (_cam_update_requests.slice(-1)[0] != _cam_update_counter) {
              if (!_anim_running) {
                _cam_update_counter = _cam_update_requests.slice(-1)[0];
                _anim_running = true;
                _cam_state = _cam_update_requests.slice(-1)[0];
                setObjTransform(
                  "camera_default_target",
                  false,
                  "position",
                  [
                    ((_cam_state[0] - 1) * 0.341) / 2,
                    "",
                    -0.192 - ((_cam_state[1] - 1) * 0.385) / 2,
                  ],
                  false
                );
                if (dictGet(_STATE_skeleton, "cam_addon_target") == false) {
                  tweenCamera(
                    "camera_default_position",
                    "camera_default_target",
                    1.5,
                    function () {},
                    0
                  );
                }
                registerSetTimeout(0.7, function () {
                  _anim_running = false;
                });
              }
            }
          }
          _cam_position_x = getObjTransform("Camera", false, "position", "x");
          _cam_position_z = getObjTransform("Camera", false, "position", "z");
          if (_cam_position_x >= 5 || _cam_position_x <= -5) {
            tweenCamera(
              "camera_default_position",
              "camera_default_target",
              4,
              function () {},
              0
            );
          }
          if (_cam_position_z >= 2.5 || _cam_position_z <= -3) {
            tweenCamera(
              "camera_default_position",
              "camera_default_target",
              4,
              function () {},
              0
            );
          }
        });
      }
    }

    // createTextObject puzzle
    function createTextObject(
      name,
      text,
      font,
      size,
      height,
      alignX,
      alignY,
      segments,
      bevelThickness,
      bevelSize,
      doCb
    ) {
      var oldObj = appInstance.scene.getObjectByName(name);

      var material = new v3d.MeshStandardMaterial({
        color: "white",
        roughness: 1.0,
        metalness: 0.0,
        side: height == 0 ? v3d.DoubleSide : v3d.FrontSide,
      });

      material.name = name + "Material";

      var obj = new v3d.Mesh(new v3d.BufferGeometry(), material);
      obj.name = name;

      appInstance.scene.add(obj);

      // clean object cache
      _pGlob.objCache = {};

      var loader = new v3d.TTFLoader();
      loader.setCrossOrigin("Anonymous");

      v3d.loadModule(
        "opentype.js",
        function () {
          loader.load(font, function (json) {
            // NOTE: fix possible double-delete errors
            if (oldObj && oldObj.parent) {
              oldObj.parent.remove(oldObj);
            }

            var font = new v3d.Font(json);

            var geometry = new v3d.TextGeometry(text, {
              font: font,

              size: size,
              height: height,
              curveSegments: segments,

              bevelThickness: bevelThickness,
              bevelSize: bevelSize,
              bevelEnabled: bevelSize > 0 || bevelThickness > 0,

              alignX: alignX,
              alignY: alignY,
            });

            obj.geometry = geometry;

            doCb(obj);
          });
        },
        function () {
          console.error(
            "create text object: opentype.js module not found, please copy it to your app directory"
          );
        }
      );
    }

    // getObjectMaterial puzzle
    function getObjectMaterial(objSelector) {
      var objNames = retrieveObjectNames(objSelector);

      for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i];
        if (!objName) continue;
        var obj = getObjectByName(objName);
        if (!obj) continue;

        obj = obj.resolveMultiMaterial()[0];

        if (obj.material && typeof obj.material.name == "string")
          return obj.material.name;
      }
      return "";
    }

    // makeParent puzzle
    function makeParent(objName, targetObjName) {
      if (!objName) return;
      var obj = getObjectByName(objName);
      if (!obj) return;
      if (targetObjName && targetObjName !== LIST_NONE) {
        var targetObj = getObjectByName(targetObjName);
        if (!targetObj) return;
      } else {
        obj.traverseAncestors(function (ancObj) {
          if (ancObj.type == "Scene") targetObj = ancObj;
        });
      }
      var matOffset = new v3d.Matrix4();
      matOffset.copy(targetObj.matrixWorld).invert();
      matOffset.multiply(obj.matrixWorld);
      matOffset.decompose(obj.position, obj.quaternion, obj.scale);
      targetObj.add(obj);

      obj.updateMatrixWorld(true);
    }

    // Describe this function...
    function clone_group(parent2, template, where, num) {
      var VARS = Object.defineProperties(
        {},
        {
          _name: {
            get: function () {
              return _name;
            },
            set: function (val) {
              _name = val;
            },
          },
          _plates_amount: {
            get: function () {
              return _plates_amount;
            },
            set: function (val) {
              _plates_amount = val;
            },
          },
          x_position: {
            get: function () {
              return x_position;
            },
            set: function (val) {
              x_position = val;
            },
          },
          _plates_basic_arr: {
            get: function () {
              return _plates_basic_arr;
            },
            set: function (val) {
              _plates_basic_arr = val;
            },
          },
          _place_type: {
            get: function () {
              return _place_type;
            },
            set: function (val) {
              _place_type = val;
            },
          },
          _G_step_hor: {
            get: function () {
              return _G_step_hor;
            },
            set: function (val) {
              _G_step_hor = val;
            },
          },
          mailbox_obj: {
            get: function () {
              return mailbox_obj;
            },
            set: function (val) {
              mailbox_obj = val;
            },
          },
          _top_lable_x_pos: {
            get: function () {
              return _top_lable_x_pos;
            },
            set: function (val) {
              _top_lable_x_pos = val;
            },
          },
          _cam_update_requests: {
            get: function () {
              return _cam_update_requests;
            },
            set: function (val) {
              _cam_update_requests = val;
            },
          },
          columns: {
            get: function () {
              return columns;
            },
            set: function (val) {
              columns = val;
            },
          },
          row: {
            get: function () {
              return row;
            },
            set: function (val) {
              row = val;
            },
          },
          col: {
            get: function () {
              return col;
            },
            set: function (val) {
              col = val;
            },
          },
          parent: {
            get: function () {
              return parent2;
            },
            set: function (val) {
              parent2 = val;
            },
          },
          template: {
            get: function () {
              return template;
            },
            set: function (val) {
              template = val;
            },
          },
          where: {
            get: function () {
              return where;
            },
            set: function (val) {
              where = val;
            },
          },
          num: {
            get: function () {
              return num;
            },
            set: function (val) {
              num = val;
            },
          },
          promise: {
            get: function () {
              return promise;
            },
            set: function (val) {
              promise = val;
            },
          },
          ruler_object_top: {
            get: function () {
              return ruler_object_top;
            },
            set: function (val) {
              ruler_object_top = val;
            },
          },
          callback: {
            get: function () {
              return callback;
            },
            set: function (val) {
              callback = val;
            },
          },
          visible: {
            get: function () {
              return visible;
            },
            set: function (val) {
              visible = val;
            },
          },
          show_ruler: {
            get: function () {
              return show_ruler;
            },
            set: function (val) {
              show_ruler = val;
            },
          },
          _name_obj: {
            get: function () {
              return _name_obj;
            },
            set: function (val) {
              _name_obj = val;
            },
          },
          _plates_template: {
            get: function () {
              return _plates_template;
            },
            set: function (val) {
              _plates_template = val;
            },
          },
          z_position: {
            get: function () {
              return z_position;
            },
            set: function (val) {
              z_position = val;
            },
          },
          _plates_basic_template: {
            get: function () {
              return _plates_basic_template;
            },
            set: function (val) {
              _plates_basic_template = val;
            },
          },
          _place_key: {
            get: function () {
              return _place_key;
            },
            set: function (val) {
              _place_key = val;
            },
          },
          _G_step_vert: {
            get: function () {
              return _G_step_vert;
            },
            set: function (val) {
              _G_step_vert = val;
            },
          },
          _leg_mouting_offset: {
            get: function () {
              return _leg_mouting_offset;
            },
            set: function (val) {
              _leg_mouting_offset = val;
            },
          },
          _STATE_skeleton: {
            get: function () {
              return _STATE_skeleton;
            },
            set: function (val) {
              _STATE_skeleton = val;
            },
          },
          _top_lable_y_pos: {
            get: function () {
              return _top_lable_y_pos;
            },
            set: function (val) {
              _top_lable_y_pos = val;
            },
          },
          _cam_update_counter: {
            get: function () {
              return _cam_update_counter;
            },
            set: function (val) {
              _cam_update_counter = val;
            },
          },
          j: {
            get: function () {
              return j;
            },
            set: function (val) {
              j = val;
            },
          },
          _zoom_step: {
            get: function () {
              return _zoom_step;
            },
            set: function (val) {
              _zoom_step = val;
            },
          },
          ruler_object_left: {
            get: function () {
              return ruler_object_left;
            },
            set: function (val) {
              ruler_object_left = val;
            },
          },
          _name_basic: {
            get: function () {
              return _name_basic;
            },
            set: function (val) {
              _name_basic = val;
            },
          },
          _plates_x_position: {
            get: function () {
              return _plates_x_position;
            },
            set: function (val) {
              _plates_x_position = val;
            },
          },
          i: {
            get: function () {
              return i;
            },
            set: function (val) {
              i = val;
            },
          },
          _plates_basic_group: {
            get: function () {
              return _plates_basic_group;
            },
            set: function (val) {
              _plates_basic_group = val;
            },
          },
          _place_configuration: {
            get: function () {
              return _place_configuration;
            },
            set: function (val) {
              _place_configuration = val;
            },
          },
          _basic_modules_arr: {
            get: function () {
              return _basic_modules_arr;
            },
            set: function (val) {
              _basic_modules_arr = val;
            },
          },
          _top_lable_z_pos: {
            get: function () {
              return _top_lable_z_pos;
            },
            set: function (val) {
              _top_lable_z_pos = val;
            },
          },
          _anim_running: {
            get: function () {
              return _anim_running;
            },
            set: function (val) {
              _anim_running = val;
            },
          },
          _JSON_placement_rules: {
            get: function () {
              return _JSON_placement_rules;
            },
            set: function (val) {
              _JSON_placement_rules = val;
            },
          },
          ruler_object_bottom: {
            get: function () {
              return ruler_object_bottom;
            },
            set: function (val) {
              ruler_object_bottom = val;
            },
          },
          _name_obj_basic: {
            get: function () {
              return _name_obj_basic;
            },
            set: function (val) {
              _name_obj_basic = val;
            },
          },
          _plates_z_position: {
            get: function () {
              return _plates_z_position;
            },
            set: function (val) {
              _plates_z_position = val;
            },
          },
          _place_direction: {
            get: function () {
              return _place_direction;
            },
            set: function (val) {
              _place_direction = val;
            },
          },
          placeholder_modules_arr: {
            get: function () {
              return placeholder_modules_arr;
            },
            set: function (val) {
              placeholder_modules_arr = val;
            },
          },
          _STATE_addon_module: {
            get: function () {
              return _STATE_addon_module;
            },
            set: function (val) {
              _STATE_addon_module = val;
            },
          },
          _STATE_top_lable: {
            get: function () {
              return _STATE_top_lable;
            },
            set: function (val) {
              _STATE_top_lable = val;
            },
          },
          _top_lable_xyz_scale: {
            get: function () {
              return _top_lable_xyz_scale;
            },
            set: function (val) {
              _top_lable_xyz_scale = val;
            },
          },
          _cam_shift: {
            get: function () {
              return _cam_shift;
            },
            set: function (val) {
              _cam_shift = val;
            },
          },
          _basic_module_id: {
            get: function () {
              return _basic_module_id;
            },
            set: function (val) {
              _basic_module_id = val;
            },
          },
          _temp_text: {
            get: function () {
              return _temp_text;
            },
            set: function (val) {
              _temp_text = val;
            },
          },
          _plates_temp: {
            get: function () {
              return _plates_temp;
            },
            set: function (val) {
              _plates_temp = val;
            },
          },
          _STATE_scene: {
            get: function () {
              return _STATE_scene;
            },
            set: function (val) {
              _STATE_scene = val;
            },
          },
          _STATE_basic_module: {
            get: function () {
              return _STATE_basic_module;
            },
            set: function (val) {
              _STATE_basic_module = val;
            },
          },
          calculated_width: {
            get: function () {
              return calculated_width;
            },
            set: function (val) {
              calculated_width = val;
            },
          },
          ruler_points: {
            get: function () {
              return ruler_points;
            },
            set: function (val) {
              ruler_points = val;
            },
          },
          _plates_arr: {
            get: function () {
              return _plates_arr;
            },
            set: function (val) {
              _plates_arr = val;
            },
          },
          _STATE_addon_plates: {
            get: function () {
              return _STATE_addon_plates;
            },
            set: function (val) {
              _STATE_addon_plates = val;
            },
          },
          _place_shift: {
            get: function () {
              return _place_shift;
            },
            set: function (val) {
              _place_shift = val;
            },
          },
          _plaсe_shift_z: {
            get: function () {
              return _pla_D1_81e_shift_z;
            },
            set: function (val) {
              _pla_D1_81e_shift_z = val;
            },
          },
          _character_number: {
            get: function () {
              return _character_number;
            },
            set: function (val) {
              _character_number = val;
            },
          },
          _JSON_font_path: {
            get: function () {
              return _JSON_font_path;
            },
            set: function (val) {
              _JSON_font_path = val;
            },
          },
          calculated_height: {
            get: function () {
              return calculated_height;
            },
            set: function (val) {
              calculated_height = val;
            },
          },
          LEG_WIDTH: {
            get: function () {
              return LEG_WIDTH;
            },
            set: function (val) {
              LEG_WIDTH = val;
            },
          },
          _plates_height_limit: {
            get: function () {
              return _plates_height_limit;
            },
            set: function (val) {
              _plates_height_limit = val;
            },
          },
          _STATE_basic_plates: {
            get: function () {
              return _STATE_basic_plates;
            },
            set: function (val) {
              _STATE_basic_plates = val;
            },
          },
          _top_label_single_char: {
            get: function () {
              return _top_label_single_char;
            },
            set: function (val) {
              _top_label_single_char = val;
            },
          },
          _cam_module_target_position_x: {
            get: function () {
              return _cam_module_target_position_x;
            },
            set: function (val) {
              _cam_module_target_position_x = val;
            },
          },
          calculated_depth: {
            get: function () {
              return calculated_depth;
            },
            set: function (val) {
              calculated_depth = val;
            },
          },
          DISTANCE_TO_FLOOR: {
            get: function () {
              return DISTANCE_TO_FLOOR;
            },
            set: function (val) {
              DISTANCE_TO_FLOOR = val;
            },
          },
          _plates_z_step: {
            get: function () {
              return _plates_z_step;
            },
            set: function (val) {
              _plates_z_step = val;
            },
          },
          _3_15_exeption: {
            get: function () {
              return _3_15_exeption;
            },
            set: function (val) {
              _3_15_exeption = val;
            },
          },
          _cam_module_target_position_z: {
            get: function () {
              return _cam_module_target_position_z;
            },
            set: function (val) {
              _cam_module_target_position_z = val;
            },
          },
          ONE_BOX_WIDTH: {
            get: function () {
              return ONE_BOX_WIDTH;
            },
            set: function (val) {
              ONE_BOX_WIDTH = val;
            },
          },
          _plates_x_step: {
            get: function () {
              return _plates_x_step;
            },
            set: function (val) {
              _plates_x_step = val;
            },
          },
          ONE_BOX_HEIGHT: {
            get: function () {
              return ONE_BOX_HEIGHT;
            },
            set: function (val) {
              ONE_BOX_HEIGHT = val;
            },
          },
          _plates_shift: {
            get: function () {
              return _plates_shift;
            },
            set: function (val) {
              _plates_shift = val;
            },
          },
          _cam_position_x: {
            get: function () {
              return _cam_position_x;
            },
            set: function (val) {
              _cam_position_x = val;
            },
          },
          TOP_LABLE_HEIGHT: {
            get: function () {
              return TOP_LABLE_HEIGHT;
            },
            set: function (val) {
              TOP_LABLE_HEIGHT = val;
            },
          },
          _plates_max: {
            get: function () {
              return _plates_max;
            },
            set: function (val) {
              _plates_max = val;
            },
          },
          _top_label_text_area: {
            get: function () {
              return _top_label_text_area;
            },
            set: function (val) {
              _top_label_text_area = val;
            },
          },
          _cam_position_z: {
            get: function () {
              return _cam_position_z;
            },
            set: function (val) {
              _cam_position_z = val;
            },
          },
          _plates_group: {
            get: function () {
              return _plates_group;
            },
            set: function (val) {
              _plates_group = val;
            },
          },
          _cam_state: {
            get: function () {
              return _cam_state;
            },
            set: function (val) {
              _cam_state = val;
            },
          },
          _plates_row_limit: {
            get: function () {
              return _plates_row_limit;
            },
            set: function (val) {
              _plates_row_limit = val;
            },
          },
          _basic_temp_emptyes: {
            get: function () {
              return _basic_temp_emptyes;
            },
            set: function (val) {
              _basic_temp_emptyes = val;
            },
          },
          _counter: {
            get: function () {
              return _counter;
            },
            set: function (val) {
              _counter = val;
            },
          },
          _temp_module: {
            get: function () {
              return _temp_module;
            },
            set: function (val) {
              _temp_module = val;
            },
          },
        }
      );

      var j_list2 = getObjectsFrom(template, "MESH");
      for (var j_index2 in j_list2) {
        let j = j_list2[j_index2];
        var VARS = Object.defineProperties(
          {},
          {
            _name: {
              get: function () {
                return _name;
              },
              set: function (val) {
                _name = val;
              },
            },
            _plates_amount: {
              get: function () {
                return _plates_amount;
              },
              set: function (val) {
                _plates_amount = val;
              },
            },
            x_position: {
              get: function () {
                return x_position;
              },
              set: function (val) {
                x_position = val;
              },
            },
            _plates_basic_arr: {
              get: function () {
                return _plates_basic_arr;
              },
              set: function (val) {
                _plates_basic_arr = val;
              },
            },
            _place_type: {
              get: function () {
                return _place_type;
              },
              set: function (val) {
                _place_type = val;
              },
            },
            _G_step_hor: {
              get: function () {
                return _G_step_hor;
              },
              set: function (val) {
                _G_step_hor = val;
              },
            },
            mailbox_obj: {
              get: function () {
                return mailbox_obj;
              },
              set: function (val) {
                mailbox_obj = val;
              },
            },
            _top_lable_x_pos: {
              get: function () {
                return _top_lable_x_pos;
              },
              set: function (val) {
                _top_lable_x_pos = val;
              },
            },
            _cam_update_requests: {
              get: function () {
                return _cam_update_requests;
              },
              set: function (val) {
                _cam_update_requests = val;
              },
            },
            columns: {
              get: function () {
                return columns;
              },
              set: function (val) {
                columns = val;
              },
            },
            row: {
              get: function () {
                return row;
              },
              set: function (val) {
                row = val;
              },
            },
            col: {
              get: function () {
                return col;
              },
              set: function (val) {
                col = val;
              },
            },
            parent: {
              get: function () {
                return parent2;
              },
              set: function (val) {
                parent2 = val;
              },
            },
            template: {
              get: function () {
                return template;
              },
              set: function (val) {
                template = val;
              },
            },
            where: {
              get: function () {
                return where;
              },
              set: function (val) {
                where = val;
              },
            },
            num: {
              get: function () {
                return num;
              },
              set: function (val) {
                num = val;
              },
            },
            promise: {
              get: function () {
                return promise;
              },
              set: function (val) {
                promise = val;
              },
            },
            ruler_object_top: {
              get: function () {
                return ruler_object_top;
              },
              set: function (val) {
                ruler_object_top = val;
              },
            },
            callback: {
              get: function () {
                return callback;
              },
              set: function (val) {
                callback = val;
              },
            },
            visible: {
              get: function () {
                return visible;
              },
              set: function (val) {
                visible = val;
              },
            },
            show_ruler: {
              get: function () {
                return show_ruler;
              },
              set: function (val) {
                show_ruler = val;
              },
            },
            _name_obj: {
              get: function () {
                return _name_obj;
              },
              set: function (val) {
                _name_obj = val;
              },
            },
            _plates_template: {
              get: function () {
                return _plates_template;
              },
              set: function (val) {
                _plates_template = val;
              },
            },
            z_position: {
              get: function () {
                return z_position;
              },
              set: function (val) {
                z_position = val;
              },
            },
            _plates_basic_template: {
              get: function () {
                return _plates_basic_template;
              },
              set: function (val) {
                _plates_basic_template = val;
              },
            },
            _place_key: {
              get: function () {
                return _place_key;
              },
              set: function (val) {
                _place_key = val;
              },
            },
            _G_step_vert: {
              get: function () {
                return _G_step_vert;
              },
              set: function (val) {
                _G_step_vert = val;
              },
            },
            _leg_mouting_offset: {
              get: function () {
                return _leg_mouting_offset;
              },
              set: function (val) {
                _leg_mouting_offset = val;
              },
            },
            _STATE_skeleton: {
              get: function () {
                return _STATE_skeleton;
              },
              set: function (val) {
                _STATE_skeleton = val;
              },
            },
            _top_lable_y_pos: {
              get: function () {
                return _top_lable_y_pos;
              },
              set: function (val) {
                _top_lable_y_pos = val;
              },
            },
            _cam_update_counter: {
              get: function () {
                return _cam_update_counter;
              },
              set: function (val) {
                _cam_update_counter = val;
              },
            },
            j: {
              get: function () {
                return j;
              },
              set: function (val) {
                j = val;
              },
            },
            _zoom_step: {
              get: function () {
                return _zoom_step;
              },
              set: function (val) {
                _zoom_step = val;
              },
            },
            ruler_object_left: {
              get: function () {
                return ruler_object_left;
              },
              set: function (val) {
                ruler_object_left = val;
              },
            },
            _name_basic: {
              get: function () {
                return _name_basic;
              },
              set: function (val) {
                _name_basic = val;
              },
            },
            _plates_x_position: {
              get: function () {
                return _plates_x_position;
              },
              set: function (val) {
                _plates_x_position = val;
              },
            },
            i: {
              get: function () {
                return i;
              },
              set: function (val) {
                i = val;
              },
            },
            _plates_basic_group: {
              get: function () {
                return _plates_basic_group;
              },
              set: function (val) {
                _plates_basic_group = val;
              },
            },
            _place_configuration: {
              get: function () {
                return _place_configuration;
              },
              set: function (val) {
                _place_configuration = val;
              },
            },
            _basic_modules_arr: {
              get: function () {
                return _basic_modules_arr;
              },
              set: function (val) {
                _basic_modules_arr = val;
              },
            },
            _top_lable_z_pos: {
              get: function () {
                return _top_lable_z_pos;
              },
              set: function (val) {
                _top_lable_z_pos = val;
              },
            },
            _anim_running: {
              get: function () {
                return _anim_running;
              },
              set: function (val) {
                _anim_running = val;
              },
            },
            _JSON_placement_rules: {
              get: function () {
                return _JSON_placement_rules;
              },
              set: function (val) {
                _JSON_placement_rules = val;
              },
            },
            ruler_object_bottom: {
              get: function () {
                return ruler_object_bottom;
              },
              set: function (val) {
                ruler_object_bottom = val;
              },
            },
            _name_obj_basic: {
              get: function () {
                return _name_obj_basic;
              },
              set: function (val) {
                _name_obj_basic = val;
              },
            },
            _plates_z_position: {
              get: function () {
                return _plates_z_position;
              },
              set: function (val) {
                _plates_z_position = val;
              },
            },
            _place_direction: {
              get: function () {
                return _place_direction;
              },
              set: function (val) {
                _place_direction = val;
              },
            },
            placeholder_modules_arr: {
              get: function () {
                return placeholder_modules_arr;
              },
              set: function (val) {
                placeholder_modules_arr = val;
              },
            },
            _STATE_addon_module: {
              get: function () {
                return _STATE_addon_module;
              },
              set: function (val) {
                _STATE_addon_module = val;
              },
            },
            _STATE_top_lable: {
              get: function () {
                return _STATE_top_lable;
              },
              set: function (val) {
                _STATE_top_lable = val;
              },
            },
            _top_lable_xyz_scale: {
              get: function () {
                return _top_lable_xyz_scale;
              },
              set: function (val) {
                _top_lable_xyz_scale = val;
              },
            },
            _cam_shift: {
              get: function () {
                return _cam_shift;
              },
              set: function (val) {
                _cam_shift = val;
              },
            },
            _basic_module_id: {
              get: function () {
                return _basic_module_id;
              },
              set: function (val) {
                _basic_module_id = val;
              },
            },
            _temp_text: {
              get: function () {
                return _temp_text;
              },
              set: function (val) {
                _temp_text = val;
              },
            },
            _plates_temp: {
              get: function () {
                return _plates_temp;
              },
              set: function (val) {
                _plates_temp = val;
              },
            },
            _STATE_scene: {
              get: function () {
                return _STATE_scene;
              },
              set: function (val) {
                _STATE_scene = val;
              },
            },
            _STATE_basic_module: {
              get: function () {
                return _STATE_basic_module;
              },
              set: function (val) {
                _STATE_basic_module = val;
              },
            },
            calculated_width: {
              get: function () {
                return calculated_width;
              },
              set: function (val) {
                calculated_width = val;
              },
            },
            ruler_points: {
              get: function () {
                return ruler_points;
              },
              set: function (val) {
                ruler_points = val;
              },
            },
            _plates_arr: {
              get: function () {
                return _plates_arr;
              },
              set: function (val) {
                _plates_arr = val;
              },
            },
            _STATE_addon_plates: {
              get: function () {
                return _STATE_addon_plates;
              },
              set: function (val) {
                _STATE_addon_plates = val;
              },
            },
            _place_shift: {
              get: function () {
                return _place_shift;
              },
              set: function (val) {
                _place_shift = val;
              },
            },
            _plaсe_shift_z: {
              get: function () {
                return _pla_D1_81e_shift_z;
              },
              set: function (val) {
                _pla_D1_81e_shift_z = val;
              },
            },
            _character_number: {
              get: function () {
                return _character_number;
              },
              set: function (val) {
                _character_number = val;
              },
            },
            _JSON_font_path: {
              get: function () {
                return _JSON_font_path;
              },
              set: function (val) {
                _JSON_font_path = val;
              },
            },
            calculated_height: {
              get: function () {
                return calculated_height;
              },
              set: function (val) {
                calculated_height = val;
              },
            },
            LEG_WIDTH: {
              get: function () {
                return LEG_WIDTH;
              },
              set: function (val) {
                LEG_WIDTH = val;
              },
            },
            _plates_height_limit: {
              get: function () {
                return _plates_height_limit;
              },
              set: function (val) {
                _plates_height_limit = val;
              },
            },
            _STATE_basic_plates: {
              get: function () {
                return _STATE_basic_plates;
              },
              set: function (val) {
                _STATE_basic_plates = val;
              },
            },
            _top_label_single_char: {
              get: function () {
                return _top_label_single_char;
              },
              set: function (val) {
                _top_label_single_char = val;
              },
            },
            _cam_module_target_position_x: {
              get: function () {
                return _cam_module_target_position_x;
              },
              set: function (val) {
                _cam_module_target_position_x = val;
              },
            },
            calculated_depth: {
              get: function () {
                return calculated_depth;
              },
              set: function (val) {
                calculated_depth = val;
              },
            },
            DISTANCE_TO_FLOOR: {
              get: function () {
                return DISTANCE_TO_FLOOR;
              },
              set: function (val) {
                DISTANCE_TO_FLOOR = val;
              },
            },
            _plates_z_step: {
              get: function () {
                return _plates_z_step;
              },
              set: function (val) {
                _plates_z_step = val;
              },
            },
            _3_15_exeption: {
              get: function () {
                return _3_15_exeption;
              },
              set: function (val) {
                _3_15_exeption = val;
              },
            },
            _cam_module_target_position_z: {
              get: function () {
                return _cam_module_target_position_z;
              },
              set: function (val) {
                _cam_module_target_position_z = val;
              },
            },
            ONE_BOX_WIDTH: {
              get: function () {
                return ONE_BOX_WIDTH;
              },
              set: function (val) {
                ONE_BOX_WIDTH = val;
              },
            },
            _plates_x_step: {
              get: function () {
                return _plates_x_step;
              },
              set: function (val) {
                _plates_x_step = val;
              },
            },
            ONE_BOX_HEIGHT: {
              get: function () {
                return ONE_BOX_HEIGHT;
              },
              set: function (val) {
                ONE_BOX_HEIGHT = val;
              },
            },
            _plates_shift: {
              get: function () {
                return _plates_shift;
              },
              set: function (val) {
                _plates_shift = val;
              },
            },
            _cam_position_x: {
              get: function () {
                return _cam_position_x;
              },
              set: function (val) {
                _cam_position_x = val;
              },
            },
            TOP_LABLE_HEIGHT: {
              get: function () {
                return TOP_LABLE_HEIGHT;
              },
              set: function (val) {
                TOP_LABLE_HEIGHT = val;
              },
            },
            _plates_max: {
              get: function () {
                return _plates_max;
              },
              set: function (val) {
                _plates_max = val;
              },
            },
            _top_label_text_area: {
              get: function () {
                return _top_label_text_area;
              },
              set: function (val) {
                _top_label_text_area = val;
              },
            },
            _cam_position_z: {
              get: function () {
                return _cam_position_z;
              },
              set: function (val) {
                _cam_position_z = val;
              },
            },
            _plates_group: {
              get: function () {
                return _plates_group;
              },
              set: function (val) {
                _plates_group = val;
              },
            },
            _cam_state: {
              get: function () {
                return _cam_state;
              },
              set: function (val) {
                _cam_state = val;
              },
            },
            _plates_row_limit: {
              get: function () {
                return _plates_row_limit;
              },
              set: function (val) {
                _plates_row_limit = val;
              },
            },
            _basic_temp_emptyes: {
              get: function () {
                return _basic_temp_emptyes;
              },
              set: function (val) {
                _basic_temp_emptyes = val;
              },
            },
            _counter: {
              get: function () {
                return _counter;
              },
              set: function (val) {
                _counter = val;
              },
            },
            _temp_module: {
              get: function () {
                return _temp_module;
              },
              set: function (val) {
                _temp_module = val;
              },
            },
          }
        );

        if (j == "engrave_basic_text") {
          _temp_text = ["engrave_basic_text_", num, "_basic"].join("");
          createTextObject(
            _temp_text,
            dictGet(_STATE_basic_plates, "default_name"),
            dictGet(_JSON_font_path, dictGet(_STATE_basic_plates, "font")),
            0.012,
            0.0001,
            "center",
            "topBaseline",
            2,
            0,
            0,
            function () {}
          );
          setObjTransform(
            _temp_text,
            false,
            "position",
            getObjTransform("engrave_basic_text", true, "position", "xyz"),
            false
          );
          assignMat(_temp_text, getObjectMaterial("engrave_basic_text"));
          makeParent(_temp_text, parent2);
        } else if (j == "engrave_text") {
          _temp_text = ["engrave_text_", num, "_addon"].join("");
          createTextObject(
            _temp_text,
            dictGet(_STATE_addon_plates, "default_name"),
            dictGet(_JSON_font_path, dictGet(_STATE_addon_plates, "font")),
            0.012,
            0.0001,
            "center",
            "topBaseline",
            2,
            0,
            0,
            function () {}
          );
          setObjTransform(
            _temp_text,
            false,
            "position",
            getObjTransform("engrave_text", true, "position", "xyz"),
            false
          );
          assignMat(_temp_text, getObjectMaterial("engrave_text"));
          makeParent(_temp_text, parent2);
        } else {
          _plates_temp = cloneObject(j);
          changeVis(_plates_temp, true);

          Function(
            "app",
            "v3d",
            "puzzles",
            "VARS",
            "PROC",
            "// Built-in variables: app, v3d, VARS, PROC" +
              "\n" +
              "let obj = app.scene.getObjectByName(VARS._plates_temp);" +
              "\n" +
              'obj.name = VARS._plates_temp + "_" + VARS.num + VARS.where;' +
              "\n" +
              "VARS._plates_temp = obj.name;"
          )(appInstance, v3d, PL, VARS, PROC);

          makeParent(_plates_temp, parent2);
        }
      }
    }

    // loadFile puzzle
    _pGlob.loadedFiles = {};

    function loadFile(url, callback, caching) {
      const files = _pGlob.loadedFiles;

      if (!url || typeof url != "string") {
        _pGlob.loadedFile = "";
        callback();
      } else if (caching && url in files) {
        _pGlob.loadedFile = files[url];
        callback();
      } else {
        const req = new XMLHttpRequest();

        req.onreadystatechange = function () {
          if (req.readyState == 4 && req.status == 200) {
            if (
              req
                .getResponseHeader("Content-Type")
                .indexOf("application/json") > -1
            )
              _pGlob.loadedFile = JSON.parse(req.responseText);
            else _pGlob.loadedFile = req.responseText;

            if (caching) files[url] = _pGlob.loadedFile;

            callback();
          }
        };
        req.open("GET", url, true);
        req.send();
      }
    }

    // Describe this function...
    function init() {
      loadFile(
        "./konfigurator/json/placement_rules.json",
        function () {
          _JSON_placement_rules = _pGlob.loadedFile;
          loadFile(
            "./konfigurator/json/fonts.json",
            function () {
              _JSON_font_path = _pGlob.loadedFile;
              changeVis(
                [
                  ["GROUP", "basic_module"],
                  ["GROUP", "addon_module"],
                  ["GROUP", "placeholder_module"],
                  ["GROUP", "plate"],
                  ["GROUP", "engrave"],
                  "leg_mounting",
                  ["GROUP", "top_lable"],
                  "light_ring",
                  ["GROUP", "top_lable_mirrored"],
                  ["GROUP", "materials_store"],
                ],
                false
              );
              cofigure_skeleton();
              configure_mounting();
              configure_addon_module();
              configure_addon_plates();
              pass_names_to_arr();
              chenge_handle_color();
              set_transparent();
              light_on();
              cam_position();
              scene();
            },
            true
          );
        },
        true
      );
    }

    // Describe this function...
    function set_transparent() {
      operateAnimation(
        "STOP",
        "addon_module_panel",
        null,
        null,
        "AUTO",
        1,
        function () {},
        false
      );

      operateAnimation(
        "STOP",
        "basic_module",
        null,
        null,
        "AUTO",
        1,
        function () {},
        false
      );

      operateAnimation(
        "STOP",
        "ring_buttons_module",
        null,
        null,
        "AUTO",
        1,
        function () {},
        false
      );

      operateAnimation(
        "STOP",
        "leg_mounting",
        null,
        null,
        "AUTO",
        1,
        function () {},
        false
      );

      operateAnimation(
        "STOP",
        "frame_wall_mounting",
        null,
        null,
        "AUTO",
        1,
        function () {},
        false
      );

      operateAnimation(
        "STOP",
        "placeholder_module",
        null,
        null,
        "AUTO",
        1,
        function () {},
        false
      );

      operateAnimation(
        "STOP",
        "_material_store_steel",
        null,
        null,
        "AUTO",
        1,
        function () {},
        false
      );

      operateAnimation(
        "STOP",
        "plate_basic_plate",
        null,
        null,
        "AUTO",
        1,
        function () {},
        false
      );

      operateAnimation(
        "STOP",
        "addon_module",
        null,
        null,
        "AUTO",
        1,
        function () {},
        false
      );

      operateAnimation(
        "STOP",
        "plate_plate",
        null,
        null,
        "AUTO",
        1,
        function () {},
        false
      );

      operateAnimation(
        "STOP",
        "plate_ring",
        null,
        null,
        "AUTO",
        1,
        function () {},
        false
      );

      operateAnimation(
        "STOP",
        "light_ring",
        null,
        null,
        "AUTO",
        1,
        function () {},
        false
      );

      operateAnimation(
        "STOP",
        "engrave_ring",
        null,
        null,
        "AUTO",
        1,
        function () {},
        false
      );

      if (dictGet(_STATE_skeleton, "transparent")) {
        operateAnimation(
          "PLAY",
          "addon_module_panel",
          null,
          null,
          "LoopOnce",
          1,
          function () {},
          false
        );

        operateAnimation(
          "PLAY",
          "basic_module",
          null,
          null,
          "LoopOnce",
          1,
          function () {},
          false
        );

        operateAnimation(
          "PLAY",
          "ring_buttons_module",
          null,
          null,
          "LoopOnce",
          1,
          function () {},
          false
        );

        operateAnimation(
          "PLAY",
          "leg_mounting",
          null,
          null,
          "LoopOnce",
          1,
          function () {},
          false
        );

        operateAnimation(
          "PLAY",
          "frame_wall_mounting",
          null,
          null,
          "LoopOnce",
          1,
          function () {},
          false
        );

        operateAnimation(
          "PLAY",
          "placeholder_module",
          null,
          null,
          "LoopOnce",
          1,
          function () {},
          false
        );

        operateAnimation(
          "PLAY",
          "_material_store_steel",
          null,
          null,
          "LoopOnce",
          1,
          function () {},
          false
        );

        operateAnimation(
          "PLAY",
          "plate_basic_plate",
          null,
          null,
          "LoopOnce",
          1,
          function () {},
          false
        );

        operateAnimation(
          "PLAY",
          "addon_module",
          null,
          null,
          "LoopOnce",
          1,
          function () {},
          false
        );

        operateAnimation(
          "PLAY",
          "plate_plate",
          null,
          null,
          "LoopOnce",
          1,
          function () {},
          false
        );

        operateAnimation(
          "PLAY",
          "plate_ring",
          null,
          null,
          "LoopOnce",
          1,
          function () {},
          false
        );

        operateAnimation(
          "PLAY",
          "light_ring",
          null,
          null,
          "LoopOnce",
          1,
          function () {},
          false
        );

        operateAnimation(
          "PLAY",
          "engrave_ring",
          null,
          null,
          "LoopOnce",
          1,
          function () {},
          false
        );
      }
    }

    // Describe this function...
    function scene() {
      if (dictGet(_STATE_scene, "background")) {
        if (dictGet(_STATE_scene, "background") == "house") {
          changeVis("house_scene", true);
          changeVis("office_scene", false);
          changeVis("office_env", false);
        } else if (dictGet(_STATE_scene, "background") == "default") {
          changeVis("house_scene", false);
          changeVis("office_scene", false);
          changeVis("office_env", false);
        } else if (dictGet(_STATE_scene, "background") == "office") {
          changeVis("house_scene", false);
          changeVis("office_scene", true);
          changeVis("office_env", true);
        }
      }
    }

    // Describe this function...
    function make_screenshot(promise) {
      var VARS = Object.defineProperties(
        {},
        {
          _name: {
            get: function () {
              return _name;
            },
            set: function (val) {
              _name = val;
            },
          },
          _plates_amount: {
            get: function () {
              return _plates_amount;
            },
            set: function (val) {
              _plates_amount = val;
            },
          },
          x_position: {
            get: function () {
              return x_position;
            },
            set: function (val) {
              x_position = val;
            },
          },
          _plates_basic_arr: {
            get: function () {
              return _plates_basic_arr;
            },
            set: function (val) {
              _plates_basic_arr = val;
            },
          },
          _place_type: {
            get: function () {
              return _place_type;
            },
            set: function (val) {
              _place_type = val;
            },
          },
          _G_step_hor: {
            get: function () {
              return _G_step_hor;
            },
            set: function (val) {
              _G_step_hor = val;
            },
          },
          mailbox_obj: {
            get: function () {
              return mailbox_obj;
            },
            set: function (val) {
              mailbox_obj = val;
            },
          },
          _top_lable_x_pos: {
            get: function () {
              return _top_lable_x_pos;
            },
            set: function (val) {
              _top_lable_x_pos = val;
            },
          },
          _cam_update_requests: {
            get: function () {
              return _cam_update_requests;
            },
            set: function (val) {
              _cam_update_requests = val;
            },
          },
          columns: {
            get: function () {
              return columns;
            },
            set: function (val) {
              columns = val;
            },
          },
          row: {
            get: function () {
              return row;
            },
            set: function (val) {
              row = val;
            },
          },
          col: {
            get: function () {
              return col;
            },
            set: function (val) {
              col = val;
            },
          },
          parent: {
            get: function () {
              return parent2;
            },
            set: function (val) {
              parent2 = val;
            },
          },
          template: {
            get: function () {
              return template;
            },
            set: function (val) {
              template = val;
            },
          },
          where: {
            get: function () {
              return where;
            },
            set: function (val) {
              where = val;
            },
          },
          num: {
            get: function () {
              return num;
            },
            set: function (val) {
              num = val;
            },
          },
          promise: {
            get: function () {
              return promise;
            },
            set: function (val) {
              promise = val;
            },
          },
          ruler_object_top: {
            get: function () {
              return ruler_object_top;
            },
            set: function (val) {
              ruler_object_top = val;
            },
          },
          callback: {
            get: function () {
              return callback;
            },
            set: function (val) {
              callback = val;
            },
          },
          visible: {
            get: function () {
              return visible;
            },
            set: function (val) {
              visible = val;
            },
          },
          show_ruler: {
            get: function () {
              return show_ruler;
            },
            set: function (val) {
              show_ruler = val;
            },
          },
          _name_obj: {
            get: function () {
              return _name_obj;
            },
            set: function (val) {
              _name_obj = val;
            },
          },
          _plates_template: {
            get: function () {
              return _plates_template;
            },
            set: function (val) {
              _plates_template = val;
            },
          },
          z_position: {
            get: function () {
              return z_position;
            },
            set: function (val) {
              z_position = val;
            },
          },
          _plates_basic_template: {
            get: function () {
              return _plates_basic_template;
            },
            set: function (val) {
              _plates_basic_template = val;
            },
          },
          _place_key: {
            get: function () {
              return _place_key;
            },
            set: function (val) {
              _place_key = val;
            },
          },
          _G_step_vert: {
            get: function () {
              return _G_step_vert;
            },
            set: function (val) {
              _G_step_vert = val;
            },
          },
          _leg_mouting_offset: {
            get: function () {
              return _leg_mouting_offset;
            },
            set: function (val) {
              _leg_mouting_offset = val;
            },
          },
          _STATE_skeleton: {
            get: function () {
              return _STATE_skeleton;
            },
            set: function (val) {
              _STATE_skeleton = val;
            },
          },
          _top_lable_y_pos: {
            get: function () {
              return _top_lable_y_pos;
            },
            set: function (val) {
              _top_lable_y_pos = val;
            },
          },
          _cam_update_counter: {
            get: function () {
              return _cam_update_counter;
            },
            set: function (val) {
              _cam_update_counter = val;
            },
          },
          j: {
            get: function () {
              return j;
            },
            set: function (val) {
              j = val;
            },
          },
          _zoom_step: {
            get: function () {
              return _zoom_step;
            },
            set: function (val) {
              _zoom_step = val;
            },
          },
          ruler_object_left: {
            get: function () {
              return ruler_object_left;
            },
            set: function (val) {
              ruler_object_left = val;
            },
          },
          _name_basic: {
            get: function () {
              return _name_basic;
            },
            set: function (val) {
              _name_basic = val;
            },
          },
          _plates_x_position: {
            get: function () {
              return _plates_x_position;
            },
            set: function (val) {
              _plates_x_position = val;
            },
          },
          i: {
            get: function () {
              return i;
            },
            set: function (val) {
              i = val;
            },
          },
          _plates_basic_group: {
            get: function () {
              return _plates_basic_group;
            },
            set: function (val) {
              _plates_basic_group = val;
            },
          },
          _place_configuration: {
            get: function () {
              return _place_configuration;
            },
            set: function (val) {
              _place_configuration = val;
            },
          },
          _basic_modules_arr: {
            get: function () {
              return _basic_modules_arr;
            },
            set: function (val) {
              _basic_modules_arr = val;
            },
          },
          _top_lable_z_pos: {
            get: function () {
              return _top_lable_z_pos;
            },
            set: function (val) {
              _top_lable_z_pos = val;
            },
          },
          _anim_running: {
            get: function () {
              return _anim_running;
            },
            set: function (val) {
              _anim_running = val;
            },
          },
          _JSON_placement_rules: {
            get: function () {
              return _JSON_placement_rules;
            },
            set: function (val) {
              _JSON_placement_rules = val;
            },
          },
          ruler_object_bottom: {
            get: function () {
              return ruler_object_bottom;
            },
            set: function (val) {
              ruler_object_bottom = val;
            },
          },
          _name_obj_basic: {
            get: function () {
              return _name_obj_basic;
            },
            set: function (val) {
              _name_obj_basic = val;
            },
          },
          _plates_z_position: {
            get: function () {
              return _plates_z_position;
            },
            set: function (val) {
              _plates_z_position = val;
            },
          },
          _place_direction: {
            get: function () {
              return _place_direction;
            },
            set: function (val) {
              _place_direction = val;
            },
          },
          placeholder_modules_arr: {
            get: function () {
              return placeholder_modules_arr;
            },
            set: function (val) {
              placeholder_modules_arr = val;
            },
          },
          _STATE_addon_module: {
            get: function () {
              return _STATE_addon_module;
            },
            set: function (val) {
              _STATE_addon_module = val;
            },
          },
          _STATE_top_lable: {
            get: function () {
              return _STATE_top_lable;
            },
            set: function (val) {
              _STATE_top_lable = val;
            },
          },
          _top_lable_xyz_scale: {
            get: function () {
              return _top_lable_xyz_scale;
            },
            set: function (val) {
              _top_lable_xyz_scale = val;
            },
          },
          _cam_shift: {
            get: function () {
              return _cam_shift;
            },
            set: function (val) {
              _cam_shift = val;
            },
          },
          _basic_module_id: {
            get: function () {
              return _basic_module_id;
            },
            set: function (val) {
              _basic_module_id = val;
            },
          },
          _temp_text: {
            get: function () {
              return _temp_text;
            },
            set: function (val) {
              _temp_text = val;
            },
          },
          _plates_temp: {
            get: function () {
              return _plates_temp;
            },
            set: function (val) {
              _plates_temp = val;
            },
          },
          _STATE_scene: {
            get: function () {
              return _STATE_scene;
            },
            set: function (val) {
              _STATE_scene = val;
            },
          },
          _STATE_basic_module: {
            get: function () {
              return _STATE_basic_module;
            },
            set: function (val) {
              _STATE_basic_module = val;
            },
          },
          calculated_width: {
            get: function () {
              return calculated_width;
            },
            set: function (val) {
              calculated_width = val;
            },
          },
          ruler_points: {
            get: function () {
              return ruler_points;
            },
            set: function (val) {
              ruler_points = val;
            },
          },
          _plates_arr: {
            get: function () {
              return _plates_arr;
            },
            set: function (val) {
              _plates_arr = val;
            },
          },
          _STATE_addon_plates: {
            get: function () {
              return _STATE_addon_plates;
            },
            set: function (val) {
              _STATE_addon_plates = val;
            },
          },
          _place_shift: {
            get: function () {
              return _place_shift;
            },
            set: function (val) {
              _place_shift = val;
            },
          },
          _plaсe_shift_z: {
            get: function () {
              return _pla_D1_81e_shift_z;
            },
            set: function (val) {
              _pla_D1_81e_shift_z = val;
            },
          },
          _character_number: {
            get: function () {
              return _character_number;
            },
            set: function (val) {
              _character_number = val;
            },
          },
          _JSON_font_path: {
            get: function () {
              return _JSON_font_path;
            },
            set: function (val) {
              _JSON_font_path = val;
            },
          },
          calculated_height: {
            get: function () {
              return calculated_height;
            },
            set: function (val) {
              calculated_height = val;
            },
          },
          LEG_WIDTH: {
            get: function () {
              return LEG_WIDTH;
            },
            set: function (val) {
              LEG_WIDTH = val;
            },
          },
          _plates_height_limit: {
            get: function () {
              return _plates_height_limit;
            },
            set: function (val) {
              _plates_height_limit = val;
            },
          },
          _STATE_basic_plates: {
            get: function () {
              return _STATE_basic_plates;
            },
            set: function (val) {
              _STATE_basic_plates = val;
            },
          },
          _top_label_single_char: {
            get: function () {
              return _top_label_single_char;
            },
            set: function (val) {
              _top_label_single_char = val;
            },
          },
          _cam_module_target_position_x: {
            get: function () {
              return _cam_module_target_position_x;
            },
            set: function (val) {
              _cam_module_target_position_x = val;
            },
          },
          calculated_depth: {
            get: function () {
              return calculated_depth;
            },
            set: function (val) {
              calculated_depth = val;
            },
          },
          DISTANCE_TO_FLOOR: {
            get: function () {
              return DISTANCE_TO_FLOOR;
            },
            set: function (val) {
              DISTANCE_TO_FLOOR = val;
            },
          },
          _plates_z_step: {
            get: function () {
              return _plates_z_step;
            },
            set: function (val) {
              _plates_z_step = val;
            },
          },
          _3_15_exeption: {
            get: function () {
              return _3_15_exeption;
            },
            set: function (val) {
              _3_15_exeption = val;
            },
          },
          _cam_module_target_position_z: {
            get: function () {
              return _cam_module_target_position_z;
            },
            set: function (val) {
              _cam_module_target_position_z = val;
            },
          },
          ONE_BOX_WIDTH: {
            get: function () {
              return ONE_BOX_WIDTH;
            },
            set: function (val) {
              ONE_BOX_WIDTH = val;
            },
          },
          _plates_x_step: {
            get: function () {
              return _plates_x_step;
            },
            set: function (val) {
              _plates_x_step = val;
            },
          },
          ONE_BOX_HEIGHT: {
            get: function () {
              return ONE_BOX_HEIGHT;
            },
            set: function (val) {
              ONE_BOX_HEIGHT = val;
            },
          },
          _plates_shift: {
            get: function () {
              return _plates_shift;
            },
            set: function (val) {
              _plates_shift = val;
            },
          },
          _cam_position_x: {
            get: function () {
              return _cam_position_x;
            },
            set: function (val) {
              _cam_position_x = val;
            },
          },
          TOP_LABLE_HEIGHT: {
            get: function () {
              return TOP_LABLE_HEIGHT;
            },
            set: function (val) {
              TOP_LABLE_HEIGHT = val;
            },
          },
          _plates_max: {
            get: function () {
              return _plates_max;
            },
            set: function (val) {
              _plates_max = val;
            },
          },
          _top_label_text_area: {
            get: function () {
              return _top_label_text_area;
            },
            set: function (val) {
              _top_label_text_area = val;
            },
          },
          _cam_position_z: {
            get: function () {
              return _cam_position_z;
            },
            set: function (val) {
              _cam_position_z = val;
            },
          },
          _plates_group: {
            get: function () {
              return _plates_group;
            },
            set: function (val) {
              _plates_group = val;
            },
          },
          _cam_state: {
            get: function () {
              return _cam_state;
            },
            set: function (val) {
              _cam_state = val;
            },
          },
          _plates_row_limit: {
            get: function () {
              return _plates_row_limit;
            },
            set: function (val) {
              _plates_row_limit = val;
            },
          },
          _basic_temp_emptyes: {
            get: function () {
              return _basic_temp_emptyes;
            },
            set: function (val) {
              _basic_temp_emptyes = val;
            },
          },
          _counter: {
            get: function () {
              return _counter;
            },
            set: function (val) {
              _counter = val;
            },
          },
          _temp_module: {
            get: function () {
              return _temp_module;
            },
            set: function (val) {
              _temp_module = val;
            },
          },
        }
      );

      Function(
        "app",
        "v3d",
        "puzzles",
        "VARS",
        "PROC",
        "VARS.promise = new Promise(function(resolve, reject) {" +
          "\n" +
          " function makeScreenshot(callback) {" +
          "\n" +
          "    setTimeout(() => {" +
          "\n" +
          "        html2canvas(document.getElementById('v3d-container')).then(function(canvas) {" +
          "\n" +
          "           const data = canvas.toDataURL();" +
          "\n" +
          "            if (typeof callback === 'function') {" +
          "\n" +
          "                callback(data);" +
          "\n" +
          "            }" +
          "\n" +
          "        });" +
          "\n" +
          "        " +
          "\n" +
          "    },100);" +
          "\n" +
          "}" +
          "\n" +
          "document.querySelector('#v3d-container').style.width = '1080px'" +
          "\n" +
          "document.querySelector('#v3d-container').style.height = '1080px'" +
          "\n" +
          "window.dispatchEvent(new Event('resize'));" +
          "\n" +
          "setTimeout(() => {" +
          "\n" +
          "    PROC.zoom_to_fit_all( () => makeScreenshot(" +
          "\n" +
          "    (data) => {" +
          "\n" +
          "               resolve(data)" +
          "\n" +
          "        document.querySelector('#v3d-container').style.width = ''" +
          "\n" +
          "                                                        document.querySelector('#v3d-container').style.height = ''" +
          "\n" +
          "                                                        window.dispatchEvent(new Event('resize'));" +
          "\n" +
          "        // downloadURI(data, 'screenshot.png');" +
          "\n" +
          "        PROC.cam_position();" +
          "\n" +
          "        return;" +
          "\n" +
          "        // setTimeout(() => resolve(data), 100);" +
          "\n" +
          "    }" +
          "\n" +
          "    ))});" +
          "\n" +
          "function downloadURI(uri, name) {" +
          "\n" +
          '        const link = document.createElement("a");' +
          "\n" +
          "        link.download = name;" +
          "\n" +
          "        link.href = uri;" +
          "\n" +
          "        document.body.appendChild(link);" +
          "\n" +
          "        link.click();" +
          "\n" +
          "        document.body.removeChild(link);" +
          "\n" +
          "        delete link;" +
          "\n" +
          "}" +
          "\n" +
          "})" +
          "\n" +
          ""
      )(appInstance, v3d, PL, VARS, PROC);

      return promise;
    }

    // applyObjLocalTransform puzzle
    function applyObjLocalTransform(objSelector, mode, vector) {
      var objNames = retrieveObjectNames(objSelector);
      var x = vector[0] || 0;
      var y = vector[1] || 0;
      var z = vector[2] || 0;

      var defValue = mode == "scale" ? 1 : 0;
      if (typeof x != "number") x = defValue;
      if (typeof y != "number") y = defValue;
      if (typeof z != "number") z = defValue;

      var coords = coordsTransform(
        _pGlob.vec3Tmp.set(x, y, z),
        getCoordSystem(),
        "Y_UP_RIGHT",
        mode == "scale"
      );

      for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i];
        if (!objName) continue;

        var obj = getObjectByName(objName);
        if (!obj) continue;

        // don't transform values for cameras, their local space happens
        // to be the same as for Blender/Max cameras, bcz their different
        // rest orientation balances difference in coordinate systems
        var useTransformed = !obj.isCamera;
        var xVal = useTransformed ? coords.x : x;
        var yVal = useTransformed ? coords.y : y;
        var zVal = useTransformed ? coords.z : z;

        switch (mode) {
          case "position":
            if (_pGlob.xrSessionAcquired && obj.isCamera) {
              v3d.WebXRUtils.translateVRCamera(obj, _pGlob.AXIS_X, xVal);
              v3d.WebXRUtils.translateVRCamera(obj, _pGlob.AXIS_Y, yVal);
              v3d.WebXRUtils.translateVRCamera(obj, _pGlob.AXIS_Z, zVal);
            } else {
              obj.translateX(xVal);
              obj.translateY(yVal);
              obj.translateZ(zVal);
            }
            break;
          case "rotation":
            if (_pGlob.xrSessionAcquired && obj.isCamera) {
              v3d.WebXRUtils.rotateVRCamera(
                obj,
                _pGlob.AXIS_X,
                v3d.MathUtils.degToRad(xVal)
              );
              v3d.WebXRUtils.rotateVRCamera(
                obj,
                _pGlob.AXIS_Y,
                v3d.MathUtils.degToRad(yVal)
              );
              v3d.WebXRUtils.rotateVRCamera(
                obj,
                _pGlob.AXIS_Z,
                v3d.MathUtils.degToRad(zVal)
              );
            } else {
              obj.rotateX(v3d.MathUtils.degToRad(xVal));
              obj.rotateY(v3d.MathUtils.degToRad(yVal));
              obj.rotateZ(v3d.MathUtils.degToRad(zVal));
            }
            break;
          case "scale":
            obj.scale.x *= xVal;
            obj.scale.y *= yVal;
            obj.scale.z *= zVal;
            break;
        }

        obj.updateMatrixWorld(true);
      }
    }

    // Describe this function...
    function zoom_in() {
      _zoom_step = dictGet(_STATE_scene, "zoom_step") * -1;
      if (dictGet(_STATE_scene, "zoom_step")) {
        applyObjLocalTransform("Camera", "position", ["", "", _zoom_step]);
      }
    }

    // createCSSRule puzzle
    function createCSSRule(cssRule, cssRuleCont, isParent, mediaRule) {
      var style = document.createElement("style");
      style.type = "text/css";
      if (mediaRule) {
        style.innerHTML = `@media ${mediaRule} { ${cssRule} { ${cssRuleCont} } }`;
      } else {
        style.innerHTML = `${cssRule} { ${cssRuleCont} }`;
      }

      var styles = isParent
        ? parent.document.getElementsByTagName("head")[0]
        : document.getElementsByTagName("head")[0];
      styles.appendChild(style);
    }

    // Describe this function...
    function zoom_to_fit_all(callback) {
      var VARS = Object.defineProperties(
        {},
        {
          _name: {
            get: function () {
              return _name;
            },
            set: function (val) {
              _name = val;
            },
          },
          _plates_amount: {
            get: function () {
              return _plates_amount;
            },
            set: function (val) {
              _plates_amount = val;
            },
          },
          x_position: {
            get: function () {
              return x_position;
            },
            set: function (val) {
              x_position = val;
            },
          },
          _plates_basic_arr: {
            get: function () {
              return _plates_basic_arr;
            },
            set: function (val) {
              _plates_basic_arr = val;
            },
          },
          _place_type: {
            get: function () {
              return _place_type;
            },
            set: function (val) {
              _place_type = val;
            },
          },
          _G_step_hor: {
            get: function () {
              return _G_step_hor;
            },
            set: function (val) {
              _G_step_hor = val;
            },
          },
          mailbox_obj: {
            get: function () {
              return mailbox_obj;
            },
            set: function (val) {
              mailbox_obj = val;
            },
          },
          _top_lable_x_pos: {
            get: function () {
              return _top_lable_x_pos;
            },
            set: function (val) {
              _top_lable_x_pos = val;
            },
          },
          _cam_update_requests: {
            get: function () {
              return _cam_update_requests;
            },
            set: function (val) {
              _cam_update_requests = val;
            },
          },
          columns: {
            get: function () {
              return columns;
            },
            set: function (val) {
              columns = val;
            },
          },
          row: {
            get: function () {
              return row;
            },
            set: function (val) {
              row = val;
            },
          },
          col: {
            get: function () {
              return col;
            },
            set: function (val) {
              col = val;
            },
          },
          parent: {
            get: function () {
              return parent2;
            },
            set: function (val) {
              parent2 = val;
            },
          },
          template: {
            get: function () {
              return template;
            },
            set: function (val) {
              template = val;
            },
          },
          where: {
            get: function () {
              return where;
            },
            set: function (val) {
              where = val;
            },
          },
          num: {
            get: function () {
              return num;
            },
            set: function (val) {
              num = val;
            },
          },
          promise: {
            get: function () {
              return promise;
            },
            set: function (val) {
              promise = val;
            },
          },
          ruler_object_top: {
            get: function () {
              return ruler_object_top;
            },
            set: function (val) {
              ruler_object_top = val;
            },
          },
          callback: {
            get: function () {
              return callback;
            },
            set: function (val) {
              callback = val;
            },
          },
          visible: {
            get: function () {
              return visible;
            },
            set: function (val) {
              visible = val;
            },
          },
          show_ruler: {
            get: function () {
              return show_ruler;
            },
            set: function (val) {
              show_ruler = val;
            },
          },
          _name_obj: {
            get: function () {
              return _name_obj;
            },
            set: function (val) {
              _name_obj = val;
            },
          },
          _plates_template: {
            get: function () {
              return _plates_template;
            },
            set: function (val) {
              _plates_template = val;
            },
          },
          z_position: {
            get: function () {
              return z_position;
            },
            set: function (val) {
              z_position = val;
            },
          },
          _plates_basic_template: {
            get: function () {
              return _plates_basic_template;
            },
            set: function (val) {
              _plates_basic_template = val;
            },
          },
          _place_key: {
            get: function () {
              return _place_key;
            },
            set: function (val) {
              _place_key = val;
            },
          },
          _G_step_vert: {
            get: function () {
              return _G_step_vert;
            },
            set: function (val) {
              _G_step_vert = val;
            },
          },
          _leg_mouting_offset: {
            get: function () {
              return _leg_mouting_offset;
            },
            set: function (val) {
              _leg_mouting_offset = val;
            },
          },
          _STATE_skeleton: {
            get: function () {
              return _STATE_skeleton;
            },
            set: function (val) {
              _STATE_skeleton = val;
            },
          },
          _top_lable_y_pos: {
            get: function () {
              return _top_lable_y_pos;
            },
            set: function (val) {
              _top_lable_y_pos = val;
            },
          },
          _cam_update_counter: {
            get: function () {
              return _cam_update_counter;
            },
            set: function (val) {
              _cam_update_counter = val;
            },
          },
          j: {
            get: function () {
              return j;
            },
            set: function (val) {
              j = val;
            },
          },
          _zoom_step: {
            get: function () {
              return _zoom_step;
            },
            set: function (val) {
              _zoom_step = val;
            },
          },
          ruler_object_left: {
            get: function () {
              return ruler_object_left;
            },
            set: function (val) {
              ruler_object_left = val;
            },
          },
          _name_basic: {
            get: function () {
              return _name_basic;
            },
            set: function (val) {
              _name_basic = val;
            },
          },
          _plates_x_position: {
            get: function () {
              return _plates_x_position;
            },
            set: function (val) {
              _plates_x_position = val;
            },
          },
          i: {
            get: function () {
              return i;
            },
            set: function (val) {
              i = val;
            },
          },
          _plates_basic_group: {
            get: function () {
              return _plates_basic_group;
            },
            set: function (val) {
              _plates_basic_group = val;
            },
          },
          _place_configuration: {
            get: function () {
              return _place_configuration;
            },
            set: function (val) {
              _place_configuration = val;
            },
          },
          _basic_modules_arr: {
            get: function () {
              return _basic_modules_arr;
            },
            set: function (val) {
              _basic_modules_arr = val;
            },
          },
          _top_lable_z_pos: {
            get: function () {
              return _top_lable_z_pos;
            },
            set: function (val) {
              _top_lable_z_pos = val;
            },
          },
          _anim_running: {
            get: function () {
              return _anim_running;
            },
            set: function (val) {
              _anim_running = val;
            },
          },
          _JSON_placement_rules: {
            get: function () {
              return _JSON_placement_rules;
            },
            set: function (val) {
              _JSON_placement_rules = val;
            },
          },
          ruler_object_bottom: {
            get: function () {
              return ruler_object_bottom;
            },
            set: function (val) {
              ruler_object_bottom = val;
            },
          },
          _name_obj_basic: {
            get: function () {
              return _name_obj_basic;
            },
            set: function (val) {
              _name_obj_basic = val;
            },
          },
          _plates_z_position: {
            get: function () {
              return _plates_z_position;
            },
            set: function (val) {
              _plates_z_position = val;
            },
          },
          _place_direction: {
            get: function () {
              return _place_direction;
            },
            set: function (val) {
              _place_direction = val;
            },
          },
          placeholder_modules_arr: {
            get: function () {
              return placeholder_modules_arr;
            },
            set: function (val) {
              placeholder_modules_arr = val;
            },
          },
          _STATE_addon_module: {
            get: function () {
              return _STATE_addon_module;
            },
            set: function (val) {
              _STATE_addon_module = val;
            },
          },
          _STATE_top_lable: {
            get: function () {
              return _STATE_top_lable;
            },
            set: function (val) {
              _STATE_top_lable = val;
            },
          },
          _top_lable_xyz_scale: {
            get: function () {
              return _top_lable_xyz_scale;
            },
            set: function (val) {
              _top_lable_xyz_scale = val;
            },
          },
          _cam_shift: {
            get: function () {
              return _cam_shift;
            },
            set: function (val) {
              _cam_shift = val;
            },
          },
          _basic_module_id: {
            get: function () {
              return _basic_module_id;
            },
            set: function (val) {
              _basic_module_id = val;
            },
          },
          _temp_text: {
            get: function () {
              return _temp_text;
            },
            set: function (val) {
              _temp_text = val;
            },
          },
          _plates_temp: {
            get: function () {
              return _plates_temp;
            },
            set: function (val) {
              _plates_temp = val;
            },
          },
          _STATE_scene: {
            get: function () {
              return _STATE_scene;
            },
            set: function (val) {
              _STATE_scene = val;
            },
          },
          _STATE_basic_module: {
            get: function () {
              return _STATE_basic_module;
            },
            set: function (val) {
              _STATE_basic_module = val;
            },
          },
          calculated_width: {
            get: function () {
              return calculated_width;
            },
            set: function (val) {
              calculated_width = val;
            },
          },
          ruler_points: {
            get: function () {
              return ruler_points;
            },
            set: function (val) {
              ruler_points = val;
            },
          },
          _plates_arr: {
            get: function () {
              return _plates_arr;
            },
            set: function (val) {
              _plates_arr = val;
            },
          },
          _STATE_addon_plates: {
            get: function () {
              return _STATE_addon_plates;
            },
            set: function (val) {
              _STATE_addon_plates = val;
            },
          },
          _place_shift: {
            get: function () {
              return _place_shift;
            },
            set: function (val) {
              _place_shift = val;
            },
          },
          _plaсe_shift_z: {
            get: function () {
              return _pla_D1_81e_shift_z;
            },
            set: function (val) {
              _pla_D1_81e_shift_z = val;
            },
          },
          _character_number: {
            get: function () {
              return _character_number;
            },
            set: function (val) {
              _character_number = val;
            },
          },
          _JSON_font_path: {
            get: function () {
              return _JSON_font_path;
            },
            set: function (val) {
              _JSON_font_path = val;
            },
          },
          calculated_height: {
            get: function () {
              return calculated_height;
            },
            set: function (val) {
              calculated_height = val;
            },
          },
          LEG_WIDTH: {
            get: function () {
              return LEG_WIDTH;
            },
            set: function (val) {
              LEG_WIDTH = val;
            },
          },
          _plates_height_limit: {
            get: function () {
              return _plates_height_limit;
            },
            set: function (val) {
              _plates_height_limit = val;
            },
          },
          _STATE_basic_plates: {
            get: function () {
              return _STATE_basic_plates;
            },
            set: function (val) {
              _STATE_basic_plates = val;
            },
          },
          _top_label_single_char: {
            get: function () {
              return _top_label_single_char;
            },
            set: function (val) {
              _top_label_single_char = val;
            },
          },
          _cam_module_target_position_x: {
            get: function () {
              return _cam_module_target_position_x;
            },
            set: function (val) {
              _cam_module_target_position_x = val;
            },
          },
          calculated_depth: {
            get: function () {
              return calculated_depth;
            },
            set: function (val) {
              calculated_depth = val;
            },
          },
          DISTANCE_TO_FLOOR: {
            get: function () {
              return DISTANCE_TO_FLOOR;
            },
            set: function (val) {
              DISTANCE_TO_FLOOR = val;
            },
          },
          _plates_z_step: {
            get: function () {
              return _plates_z_step;
            },
            set: function (val) {
              _plates_z_step = val;
            },
          },
          _3_15_exeption: {
            get: function () {
              return _3_15_exeption;
            },
            set: function (val) {
              _3_15_exeption = val;
            },
          },
          _cam_module_target_position_z: {
            get: function () {
              return _cam_module_target_position_z;
            },
            set: function (val) {
              _cam_module_target_position_z = val;
            },
          },
          ONE_BOX_WIDTH: {
            get: function () {
              return ONE_BOX_WIDTH;
            },
            set: function (val) {
              ONE_BOX_WIDTH = val;
            },
          },
          _plates_x_step: {
            get: function () {
              return _plates_x_step;
            },
            set: function (val) {
              _plates_x_step = val;
            },
          },
          ONE_BOX_HEIGHT: {
            get: function () {
              return ONE_BOX_HEIGHT;
            },
            set: function (val) {
              ONE_BOX_HEIGHT = val;
            },
          },
          _plates_shift: {
            get: function () {
              return _plates_shift;
            },
            set: function (val) {
              _plates_shift = val;
            },
          },
          _cam_position_x: {
            get: function () {
              return _cam_position_x;
            },
            set: function (val) {
              _cam_position_x = val;
            },
          },
          TOP_LABLE_HEIGHT: {
            get: function () {
              return TOP_LABLE_HEIGHT;
            },
            set: function (val) {
              TOP_LABLE_HEIGHT = val;
            },
          },
          _plates_max: {
            get: function () {
              return _plates_max;
            },
            set: function (val) {
              _plates_max = val;
            },
          },
          _top_label_text_area: {
            get: function () {
              return _top_label_text_area;
            },
            set: function (val) {
              _top_label_text_area = val;
            },
          },
          _cam_position_z: {
            get: function () {
              return _cam_position_z;
            },
            set: function (val) {
              _cam_position_z = val;
            },
          },
          _plates_group: {
            get: function () {
              return _plates_group;
            },
            set: function (val) {
              _plates_group = val;
            },
          },
          _cam_state: {
            get: function () {
              return _cam_state;
            },
            set: function (val) {
              _cam_state = val;
            },
          },
          _plates_row_limit: {
            get: function () {
              return _plates_row_limit;
            },
            set: function (val) {
              _plates_row_limit = val;
            },
          },
          _basic_temp_emptyes: {
            get: function () {
              return _basic_temp_emptyes;
            },
            set: function (val) {
              _basic_temp_emptyes = val;
            },
          },
          _counter: {
            get: function () {
              return _counter;
            },
            set: function (val) {
              _counter = val;
            },
          },
          _temp_module: {
            get: function () {
              return _temp_module;
            },
            set: function (val) {
              _temp_module = val;
            },
          },
        }
      );

      Function(
        "app",
        "v3d",
        "puzzles",
        "VARS",
        "PROC",
        "app.camera.clearViewOffset();" +
          "\n" +
          'app.camera.position.copy(app.scene.getObjectByName("camera_preview_position").position)' +
          "\n" +
          'app.controls.targetObj = app.scene.getObjectByName("camera_default_target")' +
          "\n" +
          "if (typeof VARS.callback === 'function') {" +
          "\n" +
          "    VARS.callback()" +
          "\n" +
          "}"
      )(appInstance, v3d, PL, VARS, PROC);
    }

    // addHTMLElement puzzle
    function addHTMLElement(elemType, id, mode, targetId, isParent) {
      var win = isParent ? window.parent : window;

      var elem = win.document.createElement(elemType);
      if (id !== "") elem.id = id;

      var targetElem = getElement(targetId, isParent);
      if (targetElem instanceof win.Element) {
        switch (mode) {
          case "TO":
            targetElem.appendChild(elem);
            break;
          case "BEFORE":
            targetElem.insertAdjacentElement("beforebegin", elem);
            break;
          case "AFTER":
            targetElem.insertAdjacentElement("afterend", elem);
            break;
        }
      }
    }

    // setHTMLElemAttribute puzzle
    function setHTMLElemAttribute(attr, value, ids, isParent) {
      var elems = getElements(ids, isParent);
      for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem) continue;

        if ((attr == "href" || attr == "src") && value instanceof Promise) {
          // resolve promise value for url-based attributes
          value.then(function (response) {
            elem[attr] = response;
          });
        } else {
          elem[attr] = value;
        }
      }
    }

    // bindHTMLObject puzzle
    _pGlob.bindHTMLCallbackInfo = [];

    function bindHTMLObject(objName, id, isParent) {
      if (!objName) return;
      var elem = getElement(id, isParent);
      if (!elem) return;
      var obj = getObjectByName(objName);
      if (!obj) return;
      var projected = new v3d.Vector3();
      elem.style.top = 0;
      elem.style.left = 0;
      function bindHTMLUpdateCb() {
        var camera = appInstance.getCamera(true);
        camera.updateMatrixWorld();
        obj.getWorldPosition(projected).project(camera);

        var isBehindCamera = false;
        var farNearCoeff =
          (camera.far + camera.near) / (camera.far - camera.near);
        if (camera.isPerspectiveCamera) {
          isBehindCamera = projected.z > farNearCoeff;
        } else if (camera.isOrthographicCamera) {
          isBehindCamera = projected.z < -farNearCoeff;
        }

        if (isBehindCamera) {
          // behind the camera, just move the element out of the sight
          projected.x = projected.y = -1e5;
        } else {
          projected.x =
            (0.5 + projected.x / 2) * appInstance.container.offsetWidth;
          projected.y =
            (0.5 - projected.y / 2) * appInstance.container.offsetHeight;
        }

        elem.style.transform =
          "translate(" + projected.x + "px, " + projected.y + "px)";
      }

      _pGlob.bindHTMLCallbackInfo.push({
        elem: elem,
        obj: obj,
        callback: bindHTMLUpdateCb,
      });

      appInstance.renderCallbacks.push(bindHTMLUpdateCb);
      if (PL.editorRenderCallbacks)
        PL.editorRenderCallbacks.push([appInstance, bindHTMLUpdateCb]);
    }

    // Describe this function...
    function add_ruler() {
      remove_ruler();
      if (show_ruler) {
        return;
      }
      calc_dimensions();
      setObjTransform(
        "myObject",
        false,
        "position",
        getObjTransform("camera_preview_position", false, "position", "xyz"),
        false
      );
      setObjTransform(
        "myObject2",
        false,
        "position",
        getObjTransform("camera_default_target", false, "position", "xyz"),
        false
      );
      addHTMLElement("div", "top_ruler_text", "TO", ["CONTAINER"], false);
      addHTMLElement("div", "left_ruler_text", "TO", ["CONTAINER"], false);
      addHTMLElement("div", "bottom_ruler_text", "TO", ["CONTAINER"], false);
      setHTMLElemAttribute("className", "ruler_text", "top_ruler_text", false);
      setHTMLElemAttribute("className", "ruler_text", "left_ruler_text", false);
      setHTMLElemAttribute(
        "className",
        "ruler_text",
        "bottom_ruler_text",
        false
      );
      addHTMLElement(
        "div",
        "top_ruler_text_content",
        "TO",
        ["QUERYSELECTOR", "#top_ruler_text"],
        false
      );
      addHTMLElement(
        "div",
        "left_ruler_text_content",
        "TO",
        ["QUERYSELECTOR", "#left_ruler_text"],
        false
      );
      addHTMLElement(
        "div",
        "bottom_ruler_text_content",
        "TO",
        ["QUERYSELECTOR", "#bottom_ruler_text"],
        false
      );
      setHTMLElemAttribute(
        "innerHTML",
        String(["<div>", calculated_width, "</div>"].join("")) +
          "<div>mm</div>",
        "top_ruler_text_content",
        false
      );
      setHTMLElemAttribute(
        "innerHTML",
        String(["<div>", calculated_height, "</div>"].join("")) +
          "<div>mm</div>",
        "left_ruler_text_content",
        false
      );
      setHTMLElemAttribute(
        "innerHTML",
        String(["<div>", calculated_depth, "</div>"].join("")) +
          "<div>mm</div>",
        "bottom_ruler_text_content",
        false
      );
      setHTMLElemAttribute(
        "className",
        "ruler_text_content",
        "top_ruler_text_content",
        false
      );
      setHTMLElemAttribute(
        "className",
        "ruler_text_content",
        "left_ruler_text_content",
        false
      );
      setHTMLElemAttribute(
        "className",
        "ruler_text_content",
        "bottom_ruler_text_content",
        false
      );
      bindHTMLObject("top_ruler", "top_ruler_text", false);
      bindHTMLObject("left_ruler", "left_ruler_text", false);
      bindHTMLObject("bottom_ruler", "bottom_ruler_text", false);
    }

    // removeHTMLElement puzzle
    function removeHTMLElement(id, isParent) {
      var elem = getElement(id, isParent);
      if (elem && elem.parentNode) elem.parentNode.removeChild(elem);
    }

    // Describe this function...
    function remove_ruler() {
      removeHTMLElement("top_ruler_text", false);
      removeHTMLElement("left_ruler_text", false);
      removeHTMLElement("bottom_ruler_text", false);

      Function(
        "app",
        "v3d",
        "puzzles",
        "VARS",
        "PROC",
        "if (VARS.ruler_object_top) app.scene.remove(VARS.ruler_object_top);" +
          "\n" +
          "if (VARS.ruler_object_left) app.scene.remove(VARS.ruler_object_left);" +
          "\n" +
          "if (VARS.ruler_object_bottom) app.scene.remove(VARS.ruler_object_bottom);" +
          "\n" +
          ""
      )(appInstance, v3d, PL, VARS, PROC);
    }

    // Describe this function...
    function zoom_out() {
      _zoom_step = dictGet(_STATE_scene, "zoom_step");
      if (dictGet(_STATE_scene, "zoom_step")) {
        applyObjLocalTransform("Camera", "position", ["", "", _zoom_step]);
      }
    }

    // Describe this function...
    function calc_dimensions() {
      ruler_points = [];
      LEG_WIDTH = 0.04;
      DISTANCE_TO_FLOOR = 1.59;
      ONE_BOX_WIDTH = 0.385;
      ONE_BOX_HEIGHT = 0.341;
      TOP_LABLE_HEIGHT = 0.08;

      Function(
        "app",
        "v3d",
        "puzzles",
        "VARS",
        "PROC",
        "let height = 0;" +
          "\n" +
          "if (VARS._STATE_skeleton.mounting) {" +
          "\n" +
          "    VARS.calculated_height = VARS._STATE_skeleton.rows *390;" +
          "\n" +
          "    height = VARS.ONE_BOX_HEIGHT * VARS._STATE_skeleton.rows;" +
          "\n" +
          "} else {" +
          "\n" +
          "    VARS.calculated_height = 1598;" +
          "\n" +
          "    height = VARS.DISTANCE_TO_FLOOR;" +
          "\n" +
          "}" +
          "\n" +
          "if (VARS._STATE_top_lable.top_lable) {" +
          "\n" +
          "    VARS.calculated_height += 150;" +
          "\n" +
          "    height += VARS.TOP_LABLE_HEIGHT;" +
          "\n" +
          "}" +
          "\n" +
          "let width = VARS.ONE_BOX_WIDTH * VARS._place_configuration.row_1?.length;" +
          "\n" +
          "VARS.calculated_width = VARS._place_configuration.row_1?.length * 390;" +
          "\n" +
          "" +
          "\n" +
          "if (!VARS._STATE_skeleton.mounting) {" +
          "\n" +
          "    VARS.calculated_width += 2 * 40;" +
          "\n" +
          "    width += VARS.LEG_WIDTH * 2;" +
          "\n" +
          "}" +
          "\n" +
          "if (!VARS._STATE_skeleton.screws) {" +
          "\n" +
          "    VARS.calculated_width += 2 * 25;" +
          "\n" +
          "}" +
          "\n" +
          "let depth = 0;" +
          "\n" +
          "VARS.calculated_depth = 2 * 25;" +
          "\n" +
          "" +
          "\n" +
          "if (VARS._STATE_skeleton.mounting) {" +
          "\n" +
          "    depth = 0.1;" +
          "\n" +
          "    VARS.calculated_depth = 116;" +
          "\n" +
          "} else if (!VARS._STATE_skeleton.screws) {" +
          "\n" +
          "    depth = 0.180;" +
          "\n" +
          "    VARS.calculated_depth = 170;" +
          "\n" +
          "} else {" +
          "\n" +
          "    depth = 0.140;" +
          "\n" +
          "    VARS.calculated_depth = 120;" +
          "\n" +
          "}" +
          "\n" +
          "let x = -VARS.ONE_BOX_WIDTH / 2;" +
          "\n" +
          "if (!VARS._STATE_skeleton.mounting) {" +
          "\n" +
          "    x -= VARS.LEG_WIDTH;" +
          "\n" +
          "}" +
          "\n" +
          "let y = 0;" +
          "\n" +
          "if (VARS._STATE_top_lable.top_lable) {" +
          "\n" +
          "    y += VARS.TOP_LABLE_HEIGHT;" +
          "\n" +
          "}" +
          "\n" +
          "let z = 0;" +
          "\n" +
          "" +
          "\n" +
          "const line_offset = 0.1;" +
          "\n" +
          "const material = new v3d.LineBasicMaterial({ color: 0x111111, linewidth: 5, });" +
          "\n" +
          "" +
          "\n" +
          "if (VARS.ruler_object_top) app.scene.remove(VARS.ruler_object_top);" +
          "\n" +
          "const top_points = [];" +
          "\n" +
          "top_points.push(new v3d.Vector3(x, y, z));" +
          "\n" +
          "top_points.push(new v3d.Vector3(x, y + line_offset, z));" +
          "\n" +
          "top_points.push(new v3d.Vector3(x + width, y + line_offset, z));" +
          "\n" +
          "top_points.push(new v3d.Vector3(x + width, y, z));" +
          "\n" +
          "const top_geometry = new v3d.BufferGeometry().setFromPoints(top_points);" +
          "\n" +
          "VARS.ruler_object_top = new v3d.Line(top_geometry, material);" +
          "\n" +
          "app.scene.add(VARS.ruler_object_top);" +
          "\n" +
          "" +
          "\n" +
          "if (VARS.ruler_object_left) app.scene.remove(VARS.ruler_object_left);" +
          "\n" +
          "const left_points = [];" +
          "\n" +
          "left_points.push(new v3d.Vector3(x, y, z));" +
          "\n" +
          "left_points.push(new v3d.Vector3(x - line_offset, y, z));" +
          "\n" +
          "left_points.push(new v3d.Vector3(x - line_offset, y - height, z));" +
          "\n" +
          "left_points.push(new v3d.Vector3(x, y - height, z));" +
          "\n" +
          "const left_geometry = new v3d.BufferGeometry().setFromPoints(left_points);" +
          "\n" +
          "VARS.ruler_object_left = new v3d.Line(left_geometry, material);" +
          "\n" +
          "app.scene.add(VARS.ruler_object_left);" +
          "\n" +
          "" +
          "\n" +
          "if (VARS.ruler_object_bottom) app.scene.remove(VARS.ruler_object_bottom);" +
          "\n" +
          "const bottom_points = [];" +
          "\n" +
          "bottom_points.push(new v3d.Vector3(x, y - height, z));" +
          "\n" +
          "bottom_points.push(new v3d.Vector3(x - line_offset, y - height, z));" +
          "\n" +
          "bottom_points.push(new v3d.Vector3(x - line_offset, y - height, z + depth));" +
          "\n" +
          "bottom_points.push(new v3d.Vector3(x, y - height, z + depth));" +
          "\n" +
          "const geometry = new v3d.BufferGeometry().setFromPoints(bottom_points);" +
          "\n" +
          "VARS.ruler_object_bottom = new v3d.Line(geometry, material);" +
          "\n" +
          "app.scene.add(VARS.ruler_object_bottom);" +
          "\n" +
          "" +
          "\n" +
          "const top_ruler = app.scene.getObjectByName('top_ruler');" +
          "\n" +
          "const left_ruler = app.scene.getObjectByName('left_ruler');" +
          "\n" +
          "const bottom_ruler = app.scene.getObjectByName('bottom_ruler');" +
          "\n" +
          "" +
          "\n" +
          "top_ruler.position.set(x + width/2, y + line_offset*1, z);" +
          "\n" +
          "left_ruler.position.set(x - line_offset*1, y - height/2, z);" +
          "\n" +
          "bottom_ruler.position.set(x - line_offset*1, y - height + line_offset*0, z + depth);" +
          "\n" +
          'app.scene.getObjectByName("camera_default_target").position.set(x + width/2, y - height/3, z);' +
          "\n" +
          'app.scene.getObjectByName("camera_preview_position").position.set(x + width/2, y - height/3, z + 3);' +
          "\n" +
          ""
      )(appInstance, v3d, PL, VARS, PROC);
    }

    // Describe this function...
    function set_ruler_visibility(visible) {
      if (visible) {
        show_ruler2();
      } else {
        hide_ruler();
      }
    }

    // Describe this function...
    function show_ruler2() {
      show_ruler = false;
      add_ruler();
    }

    // Describe this function...
    function hide_ruler() {
      show_ruler = true;
      remove_ruler();
    }

    // Describe this function...
    function pass_names_to_arr() {
      dictSet(_STATE_addon_plates, "names", [
        "Hello, Verge!",
        "Privet",
        "Aloha",
      ]);
      dictSet(_STATE_basic_plates, "names", [
        "Hello, Verge!",
        "Privet",
        "Aloha",
        "Aloha",
        "Aloha",
        "Aloha",
        "Aloha",
        "Aloha",
      ]);
      dictSet(_STATE_top_lable, "name", "Metzler");
      configure_plates_names();
      configure_top_lable_name();
    }

    _name = "";
    _name_obj = "";
    _name_basic = "";
    _name_obj_basic = "";

    _plates_amount = 0;
    _plates_template = "";
    _plates_x_position = -0.1585;
    _plates_z_position = -0.147;
    _plates_arr = [];
    _plates_height_limit = 5;
    _plates_z_step = 0;
    _plates_x_step = 0;
    _plates_shift = 0;
    _plates_max = 15;
    _plates_group = "";

    x_position = 0;
    z_position = 0;

    _plates_basic_arr = [];
    _plates_basic_template = "";
    _plates_basic_group = "";
    _plates_basic_template = "";

    eventHTMLElem("click", "mirrored", true, function (event) {
      dictSet(
        _STATE_skeleton,
        "mirrored",
        toNumber(getHTMLElemAttribute("checked", "mirrored", true))
      );
      cofigure_skeleton();
    });
    eventHTMLElem("click", "addon_module", true, function (event) {
      dictSet(
        _STATE_skeleton,
        "addon_module",
        toNumber(getHTMLElemAttribute("checked", "addon_module", true))
      );
      cofigure_skeleton();
    });
    eventHTMLElem("click", "custom_plates_amount", true, function (event) {
      dictSet(
        _STATE_addon_plates,
        "custom",
        toNumber(getHTMLElemAttribute("checked", "custom_plates_amount", true))
      );
      configure_addon_plates();
    });
    eventHTMLElem("click", "addon_plates", true, function (event) {
      dictSet(
        _STATE_addon_plates,
        "visible",
        toNumber(getHTMLElemAttribute("checked", "addon_plates", true))
      );
      cofigure_skeleton();
    });
    eventHTMLElem("input", "plates_amount", true, function (event) {
      dictSet(
        _STATE_addon_plates,
        "amount",
        toNumber(getHTMLElemAttribute("value", "plates_amount", true))
      );
      configure_addon_plates();
    });
    eventHTMLElem("click", "addon_type", true, function (event) {
      if (dictGet(_STATE_addon_plates, "type") == "plate") {
        dictSet(_STATE_addon_plates, "type", "engrave");
      } else {
        dictSet(_STATE_addon_plates, "type", "plate");
      }
      configure_addon_plates();
    });
    eventHTMLElem("click", "basic_plates", true, function (event) {
      dictSet(
        _STATE_basic_plates,
        "visible",
        toNumber(getHTMLElemAttribute("checked", "basic_plates", true))
      );
      configure_basic_plates();
    });
    eventHTMLElem("click", "basic_type", true, function (event) {
      if (dictGet(_STATE_basic_plates, "type") == "plate") {
        dictSet(_STATE_basic_plates, "type", "engrave");
      } else {
        dictSet(_STATE_basic_plates, "type", "plate");
      }
      configure_basic_plates();
    });

    Function(
      "app",
      "v3d",
      "puzzles",
      "VARS",
      "PROC",
      "window._VARS = VARS;" + "\n" + ""
    )(appInstance, v3d, PL, VARS, PROC);

    eventHTMLElem("click", "Leg_mounting", true, function (event) {
      dictSet(_STATE_skeleton, "mounting", false);
      configure_mounting();
    });
    eventHTMLElem("click", "wall_mounting", true, function (event) {
      dictSet(_STATE_skeleton, "mounting", true);
      configure_mounting();
    });
    eventHTMLElem("click", "screws", true, function (event) {
      if (dictGet(_STATE_skeleton, "screws")) {
        dictSet(_STATE_skeleton, "screws", false);
      } else {
        dictSet(_STATE_skeleton, "screws", true);
      }
      configure_mounting();
    });
    eventHTMLElem("click", "handle_color", true, function (event) {
      if (dictGet(_STATE_skeleton, "handle_color")) {
        dictSet(_STATE_skeleton, "handle_color", false);
      } else {
        dictSet(_STATE_skeleton, "handle_color", true);
      }
      chenge_handle_color();
    });
    eventHTMLElem("click", "light_on", true, function (event) {
      if (dictGet(_STATE_addon_plates, "light_on")) {
        dictSet(_STATE_addon_plates, "light_on", false);
      } else {
        dictSet(_STATE_addon_plates, "light_on", true);
      }
      light_on();
    });

    _place_type = "";
    _place_key = "";
    _place_configuration = {};
    _place_direction = 1;
    _place_shift = 0;
    _pla_D1_81e_shift_z = 0;
    _pla_D1_81e_shift_z = 0;
    _3_15_exeption = false;

    _G_step_hor = 0.385;
    _G_step_vert = -0.341;
    _basic_modules_arr = [];
    placeholder_modules_arr = [];
    _JSON_placement_rules = {};

    mailbox_obj = [
      "addon_module_group",
      ["GROUP", "mounting"],
      ["GROUP", "basic_module"],
      "engrave_group",
      ["GROUP", "placeholder_module"],
      "plate_group",
      "light_ring",
    ];
    _leg_mouting_offset = -0.1;

    /* STATE */
    _STATE_skeleton = {};
    dictSet(_STATE_skeleton, "mirrored", false);
    dictSet(_STATE_skeleton, "amount", 1);
    dictSet(_STATE_skeleton, "rows", 1);
    dictSet(_STATE_skeleton, "addon_module", false);
    dictSet(_STATE_skeleton, "rows_avto", true);
    dictSet(_STATE_skeleton, "mounting", true);
    dictSet(_STATE_skeleton, "screws", true);
    dictSet(_STATE_skeleton, "handle_color", false);
    dictSet(_STATE_skeleton, "transparent", false);
    dictSet(_STATE_skeleton, "cam_addon_target", false);
    _STATE_addon_plates = {};
    dictSet(_STATE_addon_plates, "visible", false);
    dictSet(_STATE_addon_plates, "custom", false);
    dictSet(_STATE_addon_plates, "type", "plate");
    dictSet(_STATE_addon_plates, "amount", 1);
    dictSet(_STATE_addon_plates, "names", []);
    dictSet(_STATE_addon_plates, "default_name", "Metzler");
    dictSet(_STATE_addon_plates, "light_ring", false);
    dictSet(_STATE_addon_plates, "font", "schriftart_7");
    dictSet(_STATE_addon_plates, "light_ring_color", "#ffffff");
    dictSet(_STATE_addon_plates, "light_ring_on", false);
    dictSet(_STATE_addon_plates, "light_on", false);
    _STATE_basic_plates = {};
    dictSet(_STATE_basic_plates, "visible", true);
    dictSet(_STATE_basic_plates, "type", "plate");
    dictSet(_STATE_basic_plates, "names", []);
    dictSet(_STATE_basic_plates, "default_name", "Metzler");
    dictSet(_STATE_basic_plates, "font", "schriftart_7");
    _STATE_addon_module = {};
    dictSet(_STATE_addon_module, "light_button", false);
    dictSet(_STATE_addon_module, "camera_addon", false);
    dictSet(_STATE_addon_module, "rfid", false);
    dictSet(_STATE_addon_module, "touch_display", false);
    dictSet(_STATE_addon_module, "audio", false);
    dictSet(_STATE_addon_module, "paper_engraving", false);
    _STATE_basic_module = {};
    dictSet(_STATE_basic_module, "id", "");
    _STATE_top_lable = {};
    dictSet(_STATE_top_lable, "top_lable", false);
    dictSet(_STATE_top_lable, "name", "");
    dictSet(_STATE_top_lable, "default_name", "Metzler");
    dictSet(_STATE_top_lable, "top_text", "center");
    dictSet(_STATE_top_lable, "light_on", false);
    _STATE_scene = {};
    dictSet(_STATE_scene, "background", "house");
    dictSet(_STATE_scene, "zoom_step", 0);
    dictSet(_STATE_scene, "defalult_cam position", false);
    init();

    eventHTMLElem("click", "light_button", true, function (event) {
      if (dictGet(_STATE_addon_module, "light_button")) {
        dictSet(_STATE_addon_module, "light_button", false);
        dictSet(_STATE_addon_plates, "light_ring", false);
      } else {
        dictSet(_STATE_addon_module, "light_button", true);
        dictSet(_STATE_addon_plates, "light_ring", true);
      }
      configure_addon_module();
      configure_addon_plates();
    });
    eventHTMLElem("click", "camera", true, function (event) {
      if (dictGet(_STATE_addon_module, "camera")) {
        dictSet(_STATE_addon_module, "camera", false);
        dictSet(_STATE_addon_module, "audio", false);
      } else {
        dictSet(_STATE_addon_module, "camera", true);
        dictSet(_STATE_addon_module, "audio", false);
      }
      configure_addon_module();
      configure_plates_names();
    });
    eventHTMLElem("click", "RFID", true, function (event) {
      if (dictGet(_STATE_addon_module, "RFID")) {
        dictSet(_STATE_addon_module, "RFID", false);
      } else {
        dictSet(_STATE_addon_module, "RFID", true);
      }
      configure_addon_module();
    });
    eventHTMLElem("click", "touch", true, function (event) {
      if (dictGet(_STATE_addon_module, "touch")) {
        dictSet(_STATE_addon_module, "touch", false);
      } else {
        dictSet(_STATE_addon_module, "touch", true);
      }
      configure_addon_module();
    });
    eventHTMLElem("click", "audio", true, function (event) {
      if (dictGet(_STATE_addon_module, "audio")) {
        dictSet(_STATE_addon_module, "audio", false);
        dictSet(_STATE_addon_module, "camera", false);
      } else {
        dictSet(_STATE_addon_module, "audio", true);
        dictSet(_STATE_addon_module, "camera", false);
      }
      configure_addon_module();
    });

    _top_lable_x_pos = -0.18;
    _top_lable_y_pos = -0.058819;
    _top_lable_z_pos = 0.05;
    _top_lable_xyz_scale = 0;
    _character_number = 0;
    _top_label_single_char = 0.0195;

    _cam_update_requests = [];
    _cam_update_counter = [];
    _anim_running = false;

    eventHTMLElem("input", "rows", true, function (event) {
      dictSet(
        _STATE_skeleton,
        "rows",
        toNumber(getHTMLElemAttribute("value", "rows", true))
      );
      dictSet(_STATE_skeleton, "rows_avto", false);
      cofigure_skeleton();
    });
    eventHTMLElem("input", "amount", true, function (event) {
      dictSet(
        _STATE_skeleton,
        "amount",
        toNumber(getHTMLElemAttribute("value", "amount", true))
      );
      cofigure_skeleton();
    });

    eventHTMLElem("input", "top_label", true, function (event) {
      if (getHTMLElemAttribute("value", "top_label", true) != "") {
        dictSet(
          _STATE_top_lable,
          "name",
          getHTMLElemAttribute("value", "top_label", true)
        );
        cofigure_skeleton();
      }
    });
    eventHTMLElem("input", "button_color", true, function (event) {
      if (getHTMLElemAttribute("value", "button_color", true) != "") {
        dictSet(
          _STATE_addon_plates,
          "light_ring_color",
          getHTMLElemAttribute("value", "button_color", true)
        );
        light_on();
      }
    });

    eventHTMLElem("click", "top_lable", true, function (event) {
      if (dictGet(_STATE_top_lable, "top_lable")) {
        dictSet(_STATE_top_lable, "top_lable", false);
      } else {
        dictSet(_STATE_top_lable, "top_lable", true);
      }
      cofigure_skeleton();
    });

    eventHTMLElem("input", "basic_module_id", true, function (event) {
      if (getHTMLElemAttribute("value", "basic_module_id", true) != "") {
        dictSet(
          _STATE_basic_module,
          "id",
          getHTMLElemAttribute("value", "basic_module_id", true)
        );
      }
      cam_position();
    });

    eventHTMLElem("click", "left", true, function (event) {
      if (dictGet(_STATE_top_lable, "top_lable")) {
        dictSet(_STATE_top_lable, "top_text", "left");
      }
      cofigure_skeleton();
    });
    eventHTMLElem("click", "right", true, function (event) {
      if (dictGet(_STATE_top_lable, "top_lable")) {
        dictSet(_STATE_top_lable, "top_text", "right");
      }
      cofigure_skeleton();
    });
    eventHTMLElem("click", "center", true, function (event) {
      if (dictGet(_STATE_top_lable, "top_lable")) {
        dictSet(_STATE_top_lable, "top_text", "center");
      }
      cofigure_skeleton();
    });

    Function(
      "app",
      "v3d",
      "puzzles",
      "VARS",
      "PROC",
      "window.app = app;"
    )(appInstance, v3d, PL, VARS, PROC);

    ruler_object_top = "";
    ruler_object_left = "";
    ruler_object_bottom = "";
    calculated_width = 0;
    calculated_height = 0;
    calculated_depth = 0;
    createObject(
      "EMPTY",
      "top_ruler",
      0,
      0,
      0,
      0,
      0,
      0,
      "PERSPECTIVE",
      "AMBIENT",
      0
    );
    createObject(
      "EMPTY",
      "left_ruler",
      0,
      0,
      0,
      0,
      0,
      0,
      "PERSPECTIVE",
      "AMBIENT",
      0
    );
    createObject(
      "EMPTY",
      "bottom_ruler",
      0,
      0,
      0,
      0,
      0,
      0,
      "PERSPECTIVE",
      "AMBIENT",
      0
    );
    createCSSRule(".ruler_text", "position: absolute", false, "");
    createCSSRule(".ruler_text", "padding:4px", false, "");
    createCSSRule(
      ".ruler_text",
      "display: flex; align-items: center; justify-content: center;",
      false,
      ""
    );
    createCSSRule(
      "#top_ruler_text_content",
      "position: absolute; top: -200%; color: #333333; user-select: none;",
      false,
      ""
    );
    createCSSRule(
      "#left_ruler_text_content",
      "position: absolute; right: 10px; top: -100%; color: #333333; user-select: none;",
      false,
      ""
    );
    createCSSRule(
      "#bottom_ruler_text_content",
      "position: absolute; top: -200%; right: 10px; color: #333333; user-select: none;",
      false,
      ""
    );
    createCSSRule(
      ".ruler_text_content",
      "display: flex;     gap: 4px;    background: white;     padding: 2px;     border-radius: 4px;",
      false,
      ""
    );

    createObject(
      "EMPTY",
      "camera_preview_position",
      0,
      0,
      0,
      0,
      0,
      0,
      "PERSPECTIVE",
      "AMBIENT",
      0
    );

    eventHTMLElem("click", "transparent", true, function (event) {
      if (dictGet(_STATE_skeleton, "transparent")) {
        dictSet(_STATE_skeleton, "transparent", false);
      } else {
        dictSet(_STATE_skeleton, "transparent", true);
      }
      set_transparent();
    });

    eventHTMLElem("click", "cam_addon_target", true, function (event) {
      if (dictGet(_STATE_skeleton, "cam_addon_target")) {
        dictSet(_STATE_skeleton, "cam_addon_target", false);
      } else {
        dictSet(_STATE_skeleton, "cam_addon_target", true);
      }
      cam_position();
    });

    eventHTMLElem("click", "zoom_in", true, function (event) {
      if (getHTMLElemAttribute("value", "zoom_step", true) != "") {
        dictSet(
          _STATE_scene,
          "zoom_step",
          toNumber(getHTMLElemAttribute("value", "zoom_step", true))
        );
      }
      zoom_in();
    });
    eventHTMLElem("click", "zoom_out", true, function (event) {
      if (getHTMLElemAttribute("value", "zoom_step", true) != "") {
        dictSet(
          _STATE_scene,
          "zoom_step",
          toNumber(getHTMLElemAttribute("value", "zoom_step", true))
        );
      }
      zoom_out();
    });

    show_ruler = true;
  }; // end of PL.init function

  PL.disposeListeners = function () {
    if (_pGlob) {
      _pGlob.eventListeners.forEach(
        ({ target, type, listener, optionsOrUseCapture }) => {
          target.removeEventListener(type, listener, optionsOrUseCapture);
        }
      );
      _pGlob.eventListeners.length = 0;
    }
  };

  PL.dispose = function () {
    PL.disposeListeners();
    _pGlob = null;
    // backward compatibility
    if (v3d[Symbol.toStringTag] !== "Module") {
      delete v3d.PL;
      delete v3d.puzzles;
    }
  };

  return PL;
}

export { createPL };
